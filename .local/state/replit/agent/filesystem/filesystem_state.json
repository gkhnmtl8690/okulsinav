{"file_contents":{"README.md":{"content":"# Okul Yönetim Sistemi (School Management System)\n\nBu proje, eğitim kurumları için kapsamlı bir okul yönetim sistemi uygulamasıdır.\n\n## 🚀 Otomatik APK Oluşturma (GitHub Actions)\n\nBu proje GitHub Actions kullanarak otomatik APK oluşturma özelliğine sahiptir.\n\n### Nasıl Çalışır?\n\n1. **Kod Push/Pull Request**: `main` veya `master` branch'ine kod gönderdiğinizde otomatik olarak APK oluşturulur\n2. **Manual Tetikleme**: GitHub'da \"Actions\" sekmesinden manuel olarak build başlatabilirsiniz\n3. **Otomatik Release**: `main` branch'e push yapıldığında otomatik release oluşturulur\n\n### APK İndirme\n\n- **Artifacts**: Her build sonrası APK dosyalarını \"Actions\" > \"Build\" > \"Artifacts\" bölümünden indirebilirsiniz\n- **Releases**: Otomatik oluşturulan release'lerden APK indirebilirsiniz\n\n### Desteklenen Özellikler\n\n- ✅ Debug ve Release APK oluşturma\n- ✅ Otomatik Android SDK kurulumu\n- ✅ Cordova ve plugin kurulumları\n- ✅ APK imzalama\n- ✅ Artifact yükleme (30 gün saklama)\n- ✅ Otomatik release oluşturma\n\n## 🔧 Local Geliştirme\n\n### Gereksinimler\n\n- Node.js 18+\n- Android Studio / Android SDK\n- Cordova CLI\n\n### Kurulum\n\n```bash\n# Cordova CLI kurulumu\nnpm install -g cordova\n\n# Proje bağımlılıklarını yükle\ncd okul-app\nnpm install\n\n# Android platform ekle\ncordova platform add android\n\n# APK oluştur\nnpm run build\n```\n\n### Build Komutları\n\n```bash\n# Debug APK\nnpm run build:debug\n\n# Release APK  \nnpm run build:release\n\n# Platform hazırlama\nnpm run prepare\n```\n\n## 📱 Uygulama Özellikleri\n\n- **Okul Yönetimi**: Çoklu okul desteği\n- **Sınıf Organizasyonu**: Sınıf ve öğrenci yönetimi\n- **Değerlendirme Sistemi**: 5-8. sınıf akademik kriterler\n- **Sınav Sistemi**: Kapsamlı sınav yönetimi\n- **Raporlama**: Detaylı analiz ve raporlar\n\n## 🌐 Web Versiyonu\n\nProje aynı zamanda web tabanlı bir versiyona sahiptir:\n\n```bash\ncd HTML-CSS-JS-Static\nnpm start\n```\n\nWeb uygulaması `http://localhost:5000` adresinde çalışacaktır.\n\n## 📄 Lisans\n\nBu proje MIT lisansı altında lisanslanmıştır.","size_bytes":2076},"replit.md":{"content":"# Okul Yönetim Sistemi (School Management System)\n\n## Overview\n\nThis is a Turkish school management system designed for educational institutions to manage schools, classes, students, and academic assessments. The application provides a comprehensive platform for organizing school data, creating exams, and generating reports. It features a hybrid architecture with both static frontend components and a Node.js backend with JSON-based data persistence.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Technology Stack**: Vanilla HTML, CSS, and JavaScript (static frontend)\n- **UI Design**: Single-page application with client-side navigation using JavaScript\n- **Styling**: Custom CSS with backdrop filters, gradients, and responsive design\n- **Navigation System**: Tab-based interface with conditional page rendering\n- **State Management**: JavaScript-based state management with localStorage fallback\n\n### Backend Architecture\n- **Framework**: Express.js (Node.js)\n- **Server Design**: RESTful API with CORS-enabled endpoints\n- **Data Persistence**: JSON file-based storage system using `private_data.json`\n- **API Endpoints**: \n  - `/api/sync` for data synchronization\n  - `/api/data` for data retrieval\n- **Security**: Private data storage outside public access with selective static file serving\n\n### Data Storage Solution\n- **Primary Storage**: JSON file-based system (`private_data.json`)\n- **Data Structure**: Hierarchical organization with schools, classes, students, and criteria\n- **Offline Support**: DatabaseSync class with pending changes queue for offline functionality\n- **Data Synchronization**: Automatic sync between frontend and backend with fallback mechanisms\n\n### Application Features\n- **School Management**: Add and manage multiple schools\n- **Class Management**: Organize classes within schools with student rosters\n- **Criteria Management**: Grade-level specific academic criteria (5th-8th grade)\n- **Exam Creation**: Assessment tools and exam management\n- **Reporting System**: Data analysis and report generation capabilities\n\n### Database Integration Readiness\n- **PostgreSQL Compatibility**: Includes `pg` package for future database migration\n- **Schema Design**: Current JSON structure can be easily mapped to relational database tables\n- **Migration Path**: DatabaseSync class provides abstraction layer for easy database integration\n\n## External Dependencies\n\n### Core Backend Dependencies\n- **express**: Web application framework for Node.js API server\n- **cors**: Cross-Origin Resource Sharing middleware for API access\n- **pg**: PostgreSQL client library (prepared for database migration)\n\n### Frontend Dependencies\n- **No external libraries**: Pure HTML, CSS, and JavaScript implementation\n- **Browser APIs**: Uses navigator.onLine, fetch API, and localStorage for functionality\n\n### Development Tools\n- **Node.js**: Runtime environment for backend server\n- **npm**: Package management and script execution\n\n### Third-party Integrations\n- **File System**: Node.js fs module for JSON data persistence\n- **Path Module**: For secure file path handling and static asset serving\n- **Network Status**: Browser online/offline detection for sync management\n\n## Recent Changes\n\n### GitHub Actions APK Build Setup (September 18, 2025)\n- **GitHub Integration**: Connected project with GitHub for automated builds\n- **CI/CD Workflow**: Implemented `.github/workflows/build-apk.yml` for automatic APK generation\n- **Build Configuration**: \n  - Java 17 support for Cordova Android 14\n  - Android SDK 34 with appropriate build tools\n  - Debug and Release APK generation\n  - Automated artifact upload with 30-day retention\n  - GitHub Releases integration for main branch pushes\n- **Package Management**: Enhanced `okul-app/package.json` with build scripts\n- **Documentation**: Added comprehensive README.md with GitHub Actions usage guide\n\n### Key Features Added\n- **Automatic APK Building**: Triggered on push/PR to main/master branches\n- **Manual Build Trigger**: Available via GitHub Actions interface\n- **Multi-format Output**: Both debug and unsigned release APKs\n- **Artifact Storage**: Downloadable build artifacts with GitHub retention policy\n- **Release Management**: Automated versioning and release creation","size_bytes":4330},"HTML-CSS-JS-Static/replit.md":{"content":"# Okul Yönetim Sistemi\n\n## Overview\nThis is a Turkish school management application built with React. The system allows users to manage schools and academic criteria for different grade levels (5th-8th grade). The application provides functionality to add schools, define criteria for each grade level, and navigate between different sections through a simple interface. The app is designed as a single-page application with client-side routing and state management.\n\n### Current Features\n- **Ana Sayfa (Main Page)**: Three vertical buttons for navigation - Okul Ekle, Kriterler, Sınav Oluştur\n- **Okul Ekle (Add School)**: Add schools with text input and display them in a list\n- **Kriterler (Criteria)**: Four grade level buttons (5th-8th grade) for accessing criteria management\n- **Sınıf Kriterleri (Grade Criteria)**: Individual pages for each grade to add and list academic criteria\n- **Navigation System**: Seamless navigation between all pages with back buttons\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 19.1.1 with functional components and hooks\n- **State Management**: Local component state using React's useState hook\n- **Navigation**: Custom client-side routing system using conditional rendering\n- **Component Structure**: Modular component-based architecture with separate files for each page/feature\n- **Styling**: CSS-based styling with a central index.css file and component-specific styles\n\n### Application Structure\n- **Single Page Application**: All navigation handled through state changes rather than actual page routing\n- **Component Hierarchy**: \n  - App.js serves as the main container with navigation logic\n  - Individual components for each feature (AnaSayfa, OkulEkle, Kriterler, SinifKriterleri)\n  - Props-based communication between parent and child components\n\n### Data Management\n- **Client-Side Storage**: All data stored in component state (no persistence)\n- **Data Flow**: Unidirectional data flow using props and state lifting\n- **No Backend**: Currently operates as a frontend-only application without API integration\n\n### User Interface Design\n- **Responsive Design**: Mobile-first approach with viewport meta tags\n- **Styling Approach**: Custom CSS with modern features like gradients and box shadows\n- **Layout**: Centered container design with maximum width constraints\n- **Interactive Elements**: Button-based navigation with hover effects and transitions\n\n### Build System\n- **Build Tool**: Create React App (react-scripts 5.0.1)\n- **Development Server**: Built-in development server with hot reloading\n- **Browser Support**: Modern browser compatibility with specified browserslist configuration\n\n## External Dependencies\n\n### Core Dependencies\n- **react**: 19.1.1 - Core React library for building user interfaces\n- **react-dom**: 19.1.1 - DOM-specific methods for React\n- **react-scripts**: 5.0.1 - Build scripts and configuration for Create React App\n\n### Development Tools\n- **Babel**: Code transformation and compilation (included via react-scripts)\n- **Webpack**: Module bundling and development server (included via react-scripts)\n\n### Browser Compatibility\n- Production: Targets browsers with >0.2% usage, excluding dead browsers and Opera Mini\n- Development: Latest versions of Chrome, Firefox, and Safari\n\n### No External Services\n- No database connections\n- No third-party API integrations\n- No authentication services\n- No cloud storage or external data persistence","size_bytes":3538},"HTML-CSS-JS-Static/script.js":{"content":"// Database API\nclass DatabaseSync {\n    constructor() {\n        this.isOnline = navigator.onLine;\n        this.pendingChanges = [];\n        this.setupOnlineListener();\n    }\n\n    setupOnlineListener() {\n        window.addEventListener('online', () => {\n            this.isOnline = true;\n            this.syncPendingChanges();\n        });\n        window.addEventListener('offline', () => {\n            this.isOnline = false;\n        });\n    }\n\n    async syncToDatabase(dataType, data) {\n        if (!this.isOnline) {\n            this.pendingChanges.push({ dataType, data });\n            return;\n        }\n\n        try {\n            const response = await fetch('/api/sync', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ dataType, data })\n            });\n            if (!response.ok) throw new Error('Sync failed');\n        } catch (error) {\n            console.log('Database sync failed, saving for later:', error);\n            this.pendingChanges.push({ dataType, data });\n        }\n    }\n\n    async loadFromDatabase() {\n        if (!this.isOnline) return null;\n        \n        try {\n            const response = await fetch('/api/data');\n            if (!response.ok) throw new Error('Load failed');\n            return await response.json();\n        } catch (error) {\n            console.log('Database load failed, using localStorage:', error);\n            return null;\n        }\n    }\n\n    async syncPendingChanges() {\n        while (this.pendingChanges.length > 0 && this.isOnline) {\n            const change = this.pendingChanges.shift();\n            await this.syncToDatabase(change.dataType, change.data);\n        }\n    }\n}\n\n// Database instance\nconst dbSync = new DatabaseSync();\n\n// Uygulama durumu (state)\nlet appState = {\n    currentPage: 'anasayfa',\n    currentTab: 'schools',\n    selectedSchoolIndex: null,\n    selectedGrade: null,\n    selectedSchoolForClass: null,\n    selectedClassForStudents: null,\n    schools: [],\n    criteriaByGrade: {\n        5: [],\n        6: [],\n        7: [],\n        8: []\n    },\n    exams: [],\n    selectedCriteria: [],\n    selectedCriteriaWithDeadlines: [],\n    currentExamScores: {}\n};\n\n// Veri yükleme (Database + LocalStorage hybrid)\nasync function loadAppState() {\n    // Önce database'den yüklemeyi dene\n    const dbData = await dbSync.loadFromDatabase();\n    \n    if (dbData) {\n        // Database'den yüklendi\n        appState.schools = dbData.schools || [];\n        appState.criteriaByGrade = dbData.criteriaByGrade || {5: [], 6: [], 7: [], 8: []};\n        appState.exams = dbData.exams || [];\n        \n        // LocalStorage'a da backup olarak kaydet\n        localStorage.setItem('okulYonetimSistemi', JSON.stringify({\n            schools: appState.schools,\n            criteriaByGrade: appState.criteriaByGrade,\n            exams: appState.exams\n        }));\n    } else {\n        // Database başarısızsa localStorage'dan yükle\n        const savedState = localStorage.getItem('okulYonetimSistemi');\n        if (savedState) {\n            const parsed = JSON.parse(savedState);\n            appState.schools = parsed.schools || [];\n            appState.criteriaByGrade = parsed.criteriaByGrade || {5: [], 6: [], 7: [], 8: []};\n            appState.exams = parsed.exams || [];\n            \n            // LocalStorage'daki veriyi database'e sync et\n            dbSync.syncToDatabase('schools', appState.schools);\n            dbSync.syncToDatabase('criteria', appState.criteriaByGrade);\n            dbSync.syncToDatabase('exams', appState.exams);\n        }\n    }\n    \n    // Diğer state değerlerini sıfırla\n    appState.selectedCriteria = [];\n    appState.selectedCriteriaWithDeadlines = [];\n    appState.currentExamScores = {};\n}\n\n// Veri kaydetme (Database + LocalStorage hybrid)\nfunction saveAppState() {\n    const stateToSave = {\n        schools: appState.schools,\n        criteriaByGrade: appState.criteriaByGrade,\n        exams: appState.exams\n    };\n    \n    // LocalStorage'a kaydet (offline backup)\n    localStorage.setItem('okulYonetimSistemi', JSON.stringify(stateToSave));\n    \n    // Database'e sync et\n    dbSync.syncToDatabase('schools', appState.schools);\n    dbSync.syncToDatabase('criteria', appState.criteriaByGrade);\n    dbSync.syncToDatabase('exams', appState.exams);\n}\n\n// Sayfa geçişleri\nfunction navigateTo(page) {\n    // Tüm sayfaları gizle ve scrollable sınıfını kaldır\n    document.querySelectorAll('.page').forEach(p => {\n        p.classList.add('hidden');\n        p.classList.remove('scrollable');\n    });\n    \n    // Seçili sayfayı göster\n    document.getElementById(page).classList.remove('hidden');\n    \n    // Compact mode toggle for okul-ekle\n    if (page === 'okul-ekle') {\n        document.body.classList.add('compact');\n        document.body.classList.remove('allow-scroll');\n    } else {\n        document.body.classList.remove('compact');\n    }\n    \n    // Scrollbar gerekli sayfalara scrollable sınıfı ekle\n    if (page === 'sinav-olustur' || page === 'sinif-kriterleri' || page === 'sinavlarim' || page === 'rapor-al' || page === 'sinav-puanlama' || page === 'sinif-yonetimi') {\n        document.getElementById(page).classList.add('scrollable');\n    }\n    \n    appState.currentPage = page;\n    \n    // Sayfa yüklendiğinde güncelleme\n    if (page === 'okul-ekle') {\n        updateSchoolList();\n        updateSchoolSelectForClass();\n    } else if (page === 'sinav-olustur') {\n        updateExamSchools();\n        updateExamsList();\n    } else if (page === 'sinavlarim') {\n        updateMyExamsList();\n    } else if (page === 'rapor-al') {\n        updateReportExamSelect();\n    }\n}\n\n// Tab değiştirme\nfunction switchTab(tabName) {\n    const tabs = document.querySelectorAll('.tab');\n    const tabContents = document.querySelectorAll('.tab-content');\n    \n    tabs.forEach(tab => tab.classList.remove('active'));\n    tabContents.forEach(content => content.classList.add('hidden'));\n    \n    document.querySelector(`[onclick=\"switchTab('${tabName}')\"]`).classList.add('active');\n    \n    if (tabName === 'schools') {\n        document.getElementById('school-management').classList.remove('hidden');\n        updateSchoolList();\n    } else if (tabName === 'classes') {\n        document.getElementById('class-management').classList.remove('hidden');\n        updateSchoolSelectForClass();\n    }\n    \n    appState.currentTab = tabName;\n}\n\n// Okul yönetimi\nfunction addSchool() {\n    const schoolNameInput = document.getElementById('school-name');\n    const schoolName = schoolNameInput.value.trim().toLocaleUpperCase('tr-TR');\n    \n    if (schoolName) {\n        const newSchool = {\n            name: schoolName,\n            classes: [],\n            id: Date.now()\n        };\n        \n        appState.schools.push(newSchool);\n        schoolNameInput.value = '';\n        updateSchoolList();\n        saveAppState();\n    }\n}\n\nfunction deleteSchool(index) {\n    if (confirm('Bu okulu silmek istediğinizden emin misiniz? Tüm sınıfları ve öğrencileri silinecektir.')) {\n        appState.schools.splice(index, 1);\n        updateSchoolList();\n        updateSchoolSelectForClass();\n        saveAppState();\n    }\n}\n\nfunction updateSchoolList() {\n    const schoolsList = document.getElementById('schools-list');\n    const schoolCount = document.getElementById('school-count');\n    \n    schoolCount.textContent = appState.schools.length;\n    \n    if (appState.schools.length === 0) {\n        schoolsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz okul eklenmedi.</div>';\n        return;\n    }\n    \n    schoolsList.innerHTML = appState.schools.map((school, index) => `\n        <div class=\"school-item\">\n            <div class=\"school-header\">\n                <div>\n                    <div class=\"school-name\">${school.name}</div>\n                    <div class=\"class-count\">${school.classes.length} sınıf</div>\n                </div>\n                <div class=\"action-buttons\">\n                    <button class=\"small-button view-button\" onclick=\"selectSchoolForClassManagement(${index})\">\n                        Sınıfları Görüntüle\n                    </button>\n                    <button class=\"small-button delete-button\" onclick=\"deleteSchool(${index})\">\n                        Sil\n                    </button>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\n// Sınıf yönetimi\nfunction selectSchoolForClassManagement(schoolIndex) {\n    switchTab('classes');\n    document.getElementById('selected-school').value = schoolIndex;\n    selectSchoolForClass();\n}\n\nfunction updateSchoolSelectForClass() {\n    const select = document.getElementById('selected-school');\n    select.innerHTML = '<option value=\"\">Okul seçiniz...</option>' +\n        appState.schools.map((school, index) => \n            `<option value=\"${index}\">${school.name}</option>`\n        ).join('');\n}\n\nfunction selectSchoolForClass() {\n    const selectedIndex = document.getElementById('selected-school').value;\n    appState.selectedSchoolForClass = selectedIndex !== '' ? parseInt(selectedIndex) : null;\n    \n    const classManager = document.getElementById('class-manager');\n    \n    if (appState.selectedSchoolForClass !== null) {\n        classManager.classList.remove('hidden');\n        updateClassList();\n    } else {\n        classManager.classList.add('hidden');\n    }\n}\n\nfunction addClass() {\n    const classNameInput = document.getElementById('class-name');\n    const className = classNameInput.value.trim().toLocaleUpperCase('tr-TR');\n    \n    if (className && appState.selectedSchoolForClass !== null) {\n        const newClass = {\n            name: className,\n            students: [],\n            id: Date.now()\n        };\n        \n        appState.schools[appState.selectedSchoolForClass].classes.push(newClass);\n        classNameInput.value = '';\n        updateClassList();\n        updateSchoolList(); // Ana listeyı de güncelle\n        saveAppState();\n    }\n}\n\nfunction deleteClass(classIndex) {\n    if (confirm('Bu sınıfı silmek istediğinizden emin misiniz? Tüm öğrencileri silinecektir.')) {\n        appState.schools[appState.selectedSchoolForClass].classes.splice(classIndex, 1);\n        updateClassList();\n        updateSchoolList();\n        saveAppState();\n    }\n}\n\nfunction updateClassList() {\n    if (appState.selectedSchoolForClass === null) return;\n    \n    const school = appState.schools[appState.selectedSchoolForClass];\n    const classesList = document.getElementById('classes-list');\n    const classCount = document.getElementById('class-count');\n    \n    classCount.textContent = school.classes.length;\n    \n    if (school.classes.length === 0) {\n        classesList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Bu okulda henüz sınıf bulunmuyor.</div>';\n        return;\n    }\n    \n    classesList.innerHTML = school.classes.map((classItem, index) => `\n        <div class=\"class-item\">\n            <div>\n                <span class=\"class-name\">${classItem.name}</span>\n                <div class=\"student-count\">\n                    ${(classItem.students || []).length} öğrenci\n                </div>\n            </div>\n            <div class=\"action-buttons\">\n                <button class=\"small-button view-button\" onclick=\"navigateToStudentManagement(${appState.selectedSchoolForClass}, ${index})\">\n                    Öğrenci Yönet\n                </button>\n                <button class=\"small-button delete-button\" onclick=\"deleteClass(${index})\">\n                    Sınıfı Sil\n                </button>\n            </div>\n        </div>\n    `).join('');\n}\n\n// Kriter yönetimi\nfunction navigateToGradeCriteria(grade) {\n    appState.selectedGrade = grade;\n    document.getElementById('criteria-grade').textContent = grade;\n    document.getElementById('criteria-grade-title').textContent = grade;\n    navigateTo('sinif-kriterleri');\n    updateCriteriaList();\n}\n\nfunction addCriteria() {\n    const criteriaInput = document.getElementById('criteria-text');\n    const criteriaText = criteriaInput.value.trim().toLocaleUpperCase('tr-TR');\n    \n    if (criteriaText && appState.selectedGrade) {\n        appState.criteriaByGrade[appState.selectedGrade].push(criteriaText);\n        criteriaInput.value = '';\n        updateCriteriaList();\n        saveAppState();\n    }\n}\n\nfunction deleteCriteria(index) {\n    if (confirm('Bu kriteri silmek istediğinizden emin misiniz?')) {\n        appState.criteriaByGrade[appState.selectedGrade].splice(index, 1);\n        updateCriteriaList();\n        saveAppState();\n    }\n}\n\nfunction updateCriteriaList() {\n    if (!appState.selectedGrade) return;\n    \n    const criteriaList = document.getElementById('criteria-list');\n    const criteriaCount = document.getElementById('criteria-count');\n    const criteria = appState.criteriaByGrade[appState.selectedGrade];\n    \n    criteriaCount.textContent = criteria.length;\n    \n    if (criteria.length === 0) {\n        criteriaList.innerHTML = `<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz ${appState.selectedGrade}. sınıf için kriter eklenmedi.</div>`;\n        return;\n    }\n    \n    criteriaList.innerHTML = criteria.map((criteriaItem, index) => `\n        <div class=\"list-item\" style=\"display: flex; justify-content: space-between; align-items: center;\">\n            <div>\n                <strong>Kriter ${index + 1}:</strong> ${criteriaItem}\n            </div>\n            <button class=\"small-button delete-button\" onclick=\"deleteCriteria(${index})\" style=\"margin-left: 10px;\">\n                Sil\n            </button>\n        </div>\n    `).join('');\n}\n\n// Öğrenci yönetimi\nfunction navigateToStudentManagement(schoolIndex, classIndex) {\n    appState.selectedSchoolIndex = schoolIndex;\n    appState.selectedClassIndex = classIndex;\n    \n    const school = appState.schools[schoolIndex];\n    const classItem = school.classes[classIndex];\n    \n    document.getElementById('student-school-name').textContent = school.name;\n    document.getElementById('student-class-name').textContent = classItem.name;\n    \n    navigateTo('sinif-yonetimi');\n    updateStudentsList();\n}\n\nfunction addStudent() {\n    const numberInput = document.getElementById('student-number');\n    const nameInput = document.getElementById('student-name');\n    const number = numberInput.value.trim();\n    const name = nameInput.value.trim();\n    \n    if (number && name && appState.selectedSchoolIndex !== null && appState.selectedClassIndex !== null) {\n        const student = {\n            number: number,\n            name: name,\n            id: Date.now()\n        };\n        \n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        if (!classItem.students) classItem.students = [];\n        classItem.students.push(student);\n        \n        numberInput.value = '';\n        nameInput.value = '';\n        updateStudentsList();\n        saveAppState();\n    }\n}\n\nfunction deleteStudent(studentId) {\n    if (confirm('Bu öğrenciyi silmek istediğinizden emin misiniz?')) {\n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        classItem.students = classItem.students.filter(s => s.id !== studentId);\n        updateStudentsList();\n        saveAppState();\n    }\n}\n\nfunction uploadStudentFile() {\n    const fileInput = document.getElementById('student-file');\n    const file = fileInput.files[0];\n    \n    if (file && file.type === 'text/plain') {\n        const reader = new FileReader();\n        reader.onload = function(e) {\n            const content = e.target.result;\n            parseAndAddStudents(content);\n        };\n        reader.readAsText(file, 'UTF-8');\n    } else {\n        alert('Lütfen .txt uzantılı bir dosya seçin.');\n    }\n}\n\nfunction parseAndAddStudents(content) {\n    const lines = content.split('\\n').filter(line => line.trim());\n    const newStudents = [];\n    \n    lines.forEach(line => {\n        const parts = line.trim().split('\\t');\n        if (parts.length >= 2) {\n            const number = parts[0].trim();\n            const name = parts[1].trim();\n            if (number && name) {\n                newStudents.push({\n                    number: number,\n                    name: name,\n                    id: Date.now() + Math.random()\n                });\n            }\n        }\n    });\n    \n    if (newStudents.length > 0) {\n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        if (!classItem.students) classItem.students = [];\n        classItem.students.push(...newStudents);\n        \n        updateStudentsList();\n        saveAppState();\n        alert(`${newStudents.length} öğrenci başarıyla eklendi.`);\n    } else {\n        alert('Dosyada geçerli öğrenci bilgisi bulunamadı. Format: Numara[TAB]Ad Soyad');\n    }\n}\n\nfunction updateStudentsList() {\n    if (appState.selectedSchoolIndex === null || appState.selectedClassIndex === null) return;\n    \n    const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n    const students = classItem.students || [];\n    const studentsList = document.getElementById('students-list');\n    const studentsCount = document.getElementById('students-count');\n    \n    studentsCount.textContent = students.length;\n    \n    if (students.length === 0) {\n        studentsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Bu sınıfta henüz öğrenci bulunmuyor.</div>';\n        return;\n    }\n    \n    studentsList.innerHTML = students.map(student => `\n        <div class=\"student-item\">\n            <div class=\"student-info\">\n                <span class=\"student-number\">#${student.number}</span>\n                <span class=\"student-name\">${student.name}</span>\n            </div>\n            <button class=\"small-button delete-button\" onclick=\"deleteStudent(${student.id})\">\n                Sil\n            </button>\n        </div>\n    `).join('');\n}\n\n// Sınav yönetimi\nfunction updateExamSchools() {\n    const select = document.getElementById('exam-school');\n    select.innerHTML = '<option value=\"\">Okul seçiniz...</option>' +\n        appState.schools.map((school, index) => \n            `<option value=\"${index}\">${school.name}</option>`\n        ).join('');\n}\n\nfunction updateExamClasses() {\n    const schoolIndex = document.getElementById('exam-school').value;\n    const classSelect = document.getElementById('exam-class');\n    \n    if (schoolIndex === '') {\n        classSelect.innerHTML = '<option value=\"\">Sınıf seçiniz...</option>';\n        classSelect.disabled = true;\n        return;\n    }\n    \n    const school = appState.schools[parseInt(schoolIndex)];\n    classSelect.disabled = false;\n    classSelect.innerHTML = '<option value=\"\">Sınıf seçiniz...</option>' +\n        school.classes.map((classItem, index) => \n            `<option value=\"${index}\">${classItem.name}</option>`\n        ).join('');\n}\n\nfunction updateExamCriteria() {\n    const grade = document.getElementById('exam-grade').value;\n    const criteriaSection = document.getElementById('criteria-selection-section');\n    const criteriaDiv = document.getElementById('criteria-selection');\n    \n    if (grade === '') {\n        criteriaSection.classList.add('hidden');\n        return;\n    }\n    \n    const criteria = appState.criteriaByGrade[grade] || [];\n    \n    if (criteria.length === 0) {\n        criteriaSection.classList.add('hidden');\n        alert(`${grade}. sınıf için henüz kriter eklenmemiş. Lütfen önce kriterler bölümünden kriter ekleyiniz.`);\n        return;\n    }\n    \n    criteriaSection.classList.remove('hidden');\n    appState.selectedCriteria = [];\n    appState.selectedCriteriaWithDeadlines = [];\n    \n    criteriaDiv.innerHTML = criteria.map((criteria, index) => `\n        <div class=\"criteria-with-deadline\">\n            <div class=\"criteria-checkbox-with-date\" onclick=\"toggleCriteriaWithDeadline('${criteria}', ${index})\">\n                <input type=\"checkbox\" id=\"criteria-${index}\">\n                <span>${criteria}</span>\n                <input type=\"date\" id=\"deadline-${index}\" class=\"date-input\" onclick=\"event.stopPropagation()\" onchange=\"updateCriteriaDeadline('${criteria}', ${index})\">\n            </div>\n        </div>\n    `).join('');\n    \n    updateSelectedCriteriaCount();\n    updateExamSummary();\n}\n\nfunction toggleCriteriaWithDeadline(criteria, index) {\n    const checkbox = document.getElementById(`criteria-${index}`);\n    const criteriaDiv = checkbox.parentElement;\n    const deadlineInput = document.getElementById(`deadline-${index}`);\n    \n    if (appState.selectedCriteria.includes(criteria)) {\n        // Remove criteria\n        appState.selectedCriteria = appState.selectedCriteria.filter(c => c !== criteria);\n        appState.selectedCriteriaWithDeadlines = appState.selectedCriteriaWithDeadlines.filter(c => c.criteria !== criteria);\n        checkbox.checked = false;\n        criteriaDiv.classList.remove('selected');\n        deadlineInput.value = '';\n    } else {\n        // Add criteria\n        appState.selectedCriteria.push(criteria);\n        appState.selectedCriteriaWithDeadlines.push({\n            criteria: criteria,\n            deadline: deadlineInput.value || ''\n        });\n        checkbox.checked = true;\n        criteriaDiv.classList.add('selected');\n    }\n    \n    updateSelectedCriteriaCount();\n    updateExamSummary();\n}\n\nfunction updateCriteriaDeadline(criteria, index) {\n    const deadlineInput = document.getElementById(`deadline-${index}`);\n    const deadlineValue = deadlineInput.value;\n    \n    // Update the deadline in selectedCriteriaWithDeadlines\n    const criteriaItem = appState.selectedCriteriaWithDeadlines.find(c => c.criteria === criteria);\n    if (criteriaItem) {\n        criteriaItem.deadline = deadlineValue;\n        updateExamSummary();\n    }\n}\n\nfunction updateSelectedCriteriaCount() {\n    document.getElementById('selected-criteria-count').textContent = appState.selectedCriteria.length;\n}\n\nfunction updateExamSummary() {\n    const examName = document.getElementById('exam-name').value;\n    const schoolIndex = document.getElementById('exam-school').value;\n    const semester = document.getElementById('exam-semester').value;\n    const classIndex = document.getElementById('exam-class').value;\n    const grade = document.getElementById('exam-grade').value;\n    \n    const summaryDiv = document.getElementById('exam-summary');\n    const summaryContent = document.getElementById('exam-summary-content');\n    \n    if (examName && schoolIndex !== '' && semester && classIndex !== '' && grade && appState.selectedCriteriaWithDeadlines.length > 0) {\n        const school = appState.schools[parseInt(schoolIndex)];\n        const classItem = school.classes[parseInt(classIndex)];\n        \n        const criteriaList = appState.selectedCriteriaWithDeadlines.map(c => \n            `<li>${c.criteria} ${c.deadline ? `(Son Teslim: ${c.deadline})` : ''}</li>`\n        ).join('');\n        \n        summaryDiv.classList.remove('hidden');\n        summaryContent.innerHTML = `\n            <p><strong>Sınav Adı:</strong> ${examName}</p>\n            <p><strong>Okul:</strong> ${school.name}</p>\n            <p><strong>Dönem:</strong> ${semester}. DÖNEM</p>\n            <p><strong>Sınıf:</strong> ${classItem.name}</p>\n            <p><strong>Seviye:</strong> ${grade}. Sınıf</p>\n            <p><strong>Seçilen Kriterler (${appState.selectedCriteriaWithDeadlines.length}):</strong></p>\n            <ul>${criteriaList}</ul>\n        `;\n    } else {\n        summaryDiv.classList.add('hidden');\n    }\n}\n\nfunction createExam() {\n    const examName = document.getElementById('exam-name').value.trim();\n    const schoolIndex = document.getElementById('exam-school').value;\n    const semester = document.getElementById('exam-semester').value;\n    const classIndex = document.getElementById('exam-class').value;\n    const grade = document.getElementById('exam-grade').value;\n    \n    if (examName && schoolIndex !== '' && semester && classIndex !== '' && grade && appState.selectedCriteriaWithDeadlines.length > 0) {\n        const school = appState.schools[parseInt(schoolIndex)];\n        const classItem = school.classes[parseInt(classIndex)];\n        \n        const newExam = {\n            id: Date.now(),\n            name: examName,\n            school: school.name,\n            schoolIndex: parseInt(schoolIndex),\n            semester: semester,\n            class: classItem.name,\n            classIndex: parseInt(classIndex),\n            grade: grade,\n            criteriaWithDeadlines: [...appState.selectedCriteriaWithDeadlines],\n            students: [...(classItem.students || [])],\n            scores: {},\n            createdAt: new Date().toLocaleDateString('tr-TR')\n        };\n        \n        // Initialize scores for all students\n        newExam.students.forEach(student => {\n            newExam.scores[student.id] = {};\n            newExam.criteriaWithDeadlines.forEach(criteria => {\n                newExam.scores[student.id][criteria.criteria] = null; // null = not scored yet\n            });\n        });\n        \n        appState.exams.push(newExam);\n        \n        // Formu temizle\n        document.getElementById('exam-name').value = '';\n        document.getElementById('exam-school').value = '';\n        document.getElementById('exam-semester').value = '';\n        document.getElementById('exam-class').value = '';\n        document.getElementById('exam-grade').value = '';\n        document.getElementById('exam-class').disabled = true;\n        document.getElementById('criteria-selection-section').classList.add('hidden');\n        document.getElementById('exam-summary').classList.add('hidden');\n        appState.selectedCriteria = [];\n        appState.selectedCriteriaWithDeadlines = [];\n        \n        updateExamsList();\n        saveAppState();\n        alert('Sınav başarıyla oluşturuldu!');\n    } else {\n        alert('Lütfen tüm alanları doldurun, dönem seçin ve en az bir kriter seçin.');\n    }\n}\n\nfunction updateExamsList() {\n    const examsListContainer = document.getElementById('exams-list-container');\n    const examsList = document.getElementById('exams-list');\n    const examsCount = document.getElementById('exams-count');\n    \n    examsCount.textContent = appState.exams.length;\n    \n    if (appState.exams.length === 0) {\n        examsListContainer.classList.add('hidden');\n        return;\n    }\n    \n    examsListContainer.classList.remove('hidden');\n    examsList.innerHTML = appState.exams.map(exam => `\n        <div class=\"list-item\">\n            <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                <div>\n                    <strong>${exam.name}</strong><br/>\n                    <small>${exam.school} - ${exam.class} (${exam.grade}. Sınıf) - ${exam.semester}. DÖNEM - ${exam.criteriaWithDeadlines.length} kriter</small><br/>\n                    <small style=\"color: #666;\">Oluşturulma: ${exam.createdAt}</small>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction updateMyExamsList() {\n    const examsList = document.getElementById('my-exams-list');\n    const examsCount = document.getElementById('my-exams-count');\n    \n    examsCount.textContent = appState.exams.length;\n    \n    if (appState.exams.length === 0) {\n        examsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz sınav oluşturulmamış.</div>';\n        return;\n    }\n    \n    examsList.innerHTML = appState.exams.map(exam => `\n        <div class=\"list-item\" style=\"cursor: pointer;\" onclick=\"openExamScoring(${exam.id})\">\n            <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                <div>\n                    <strong>${exam.class} ${exam.semester}. DÖNEM ${exam.name}</strong><br/>\n                    <small>${exam.school} - ${exam.grade}. Sınıf - ${exam.criteriaWithDeadlines.length} kriter - ${exam.students.length} öğrenci</small><br/>\n                    <small style=\"color: #666;\">Oluşturulma: ${exam.createdAt}</small>\n                </div>\n                <div style=\"color: #667eea;\">\n                    <span style=\"font-size: 24px;\">▶</span>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction updateReportExamSelect() {\n    const select = document.getElementById('report-exam-select');\n    select.innerHTML = '<option value=\"\">Rapor alınacak sınavı seçiniz...</option>' +\n        appState.exams.map((exam, index) => \n            `<option value=\"${index}\">${exam.class} ${exam.semester}. DÖNEM ${exam.name} - ${exam.school}</option>`\n        ).join('');\n}\n\nfunction openExamScoring(examId) {\n    const exam = appState.exams.find(e => e.id === examId);\n    if (!exam) return;\n    \n    appState.currentExam = exam;\n    document.getElementById('scoring-exam-title').textContent = \n        `${exam.class} ${exam.semester}. DÖNEM ${exam.name} - Puanlama`;\n    \n    createScoringTable(exam);\n    navigateTo('sinav-puanlama');\n}\n\nfunction createScoringTable(exam) {\n    const container = document.getElementById('scoring-table-container');\n    \n    if (exam.students.length === 0) {\n        container.innerHTML = '<p style=\"color: white; text-align: center;\">Bu sınıfta öğrenci bulunmuyor.</p>';\n        return;\n    }\n    \n    const headerCells = exam.criteriaWithDeadlines.map(c => \n        `<th style=\"min-width: 120px;\">\n            ${c.criteria}<br/>\n            <small>(${c.deadline || 'Tarih yok'})<br/>(20 puan)</small>\n        </th>`\n    ).join('');\n    \n    const studentRows = exam.students.map(student => {\n        const criteriaCells = exam.criteriaWithDeadlines.map(criteria => {\n            const currentScore = exam.scores[student.id][criteria.criteria];\n            return `\n                <td>\n                    <div class=\"score-buttons\">\n                        <button class=\"score-btn g ${currentScore === 10 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 10)\">G</button>\n                        <button class=\"score-btn iyi ${currentScore === 15 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 15)\">İYİ</button>\n                        <button class=\"score-btn ci ${currentScore === 20 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 20)\">Çİ</button>\n                    </div>\n                </td>\n            `;\n        }).join('');\n        \n        const totalScore = Object.values(exam.scores[student.id]).reduce((sum, score) => {\n            return sum + (score || 0);\n        }, 0);\n        \n        return `\n            <tr>\n                <td class=\"student-number\">${student.number}</td>\n                <td class=\"student-name\">${student.name}</td>\n                ${criteriaCells}\n                <td class=\"total-score\">${totalScore}</td>\n            </tr>\n        `;\n    }).join('');\n    \n    container.innerHTML = `\n        <table class=\"scoring-table\">\n            <thead>\n                <tr>\n                    <th>OKUL NO</th>\n                    <th>AD SOYAD</th>\n                    ${headerCells}\n                    <th>TOPLAM</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${studentRows}\n            </tbody>\n        </table>\n    `;\n}\n\nfunction setStudentScore(studentId, criteria, score) {\n    if (!appState.currentExam) return;\n    \n    // Sanitize criteria to prevent XSS\n    const safeCriteria = criteria.replace(/'/g, \"&#x27;\");\n    \n    // Update score in current exam\n    appState.currentExam.scores[studentId][criteria] = score;\n    \n    // Update score in stored exams\n    const examIndex = appState.exams.findIndex(e => e.id === appState.currentExam.id);\n    if (examIndex !== -1) {\n        appState.exams[examIndex].scores[studentId][criteria] = score;\n    }\n    \n    // Recreate the table to show updated scores\n    createScoringTable(appState.currentExam);\n    saveAppState();\n}\n\nfunction saveExamScores() {\n    saveAppState();\n    alert('Puanlar başarıyla kaydedildi!');\n}\n\nfunction updateReportPreview() {\n    const examIndex = document.getElementById('report-exam-select').value;\n    const previewDiv = document.getElementById('report-preview');\n    const contentDiv = document.getElementById('report-content');\n    \n    if (examIndex === '') {\n        previewDiv.classList.add('hidden');\n        return;\n    }\n    \n    const exam = appState.exams[parseInt(examIndex)];\n    if (!exam) return;\n    \n    const currentYear = new Date().getFullYear();\n    const nextYear = currentYear + 1;\n    \n    const headerCells = exam.criteriaWithDeadlines.map(c => \n        `<th class=\"header-cell\">\n            ${c.criteria}<br/>\n            ${c.deadline || '..../..../....'}\n        </th>`\n    ).join('');\n    \n    const scoringCells = exam.criteriaWithDeadlines.map(() => \n        `<th class=\"scoring-cell\">\n            <div class=\"score-marks\">\n                <span>G</span><span>İYİ</span><span>Çİ</span>\n            </div>\n        </th>`\n    ).join('');\n    \n    const studentRows = exam.students.map(student => {\n        const criteriaCells = exam.criteriaWithDeadlines.map(criteria => {\n            const score = exam.scores[student.id][criteria.criteria];\n            const gMark = score === 10 ? '●' : '○';\n            const iyiMark = score === 15 ? '●' : '○';\n            const ciMark = score === 20 ? '●' : '○';\n            \n            return `\n                <td class=\"score-cell\">\n                    <div class=\"score-marks\">\n                        <span>${gMark}</span><span>${iyiMark}</span><span>${ciMark}</span>\n                    </div>\n                </td>\n            `;\n        }).join('');\n        \n        const totalScore = Object.values(exam.scores[student.id]).reduce((sum, score) => {\n            return sum + (score || 0);\n        }, 0);\n        \n        return `\n            <tr>\n                <td class=\"number-cell\">${student.number}</td>\n                <td class=\"name-cell\">${student.name}</td>\n                ${criteriaCells}\n                <td class=\"total-cell\">${totalScore}</td>\n            </tr>\n        `;\n    }).join('');\n    \n    contentDiv.innerHTML = `\n        <div class=\"report-title\">\n            ${currentYear} – ${nextYear} EĞİTİM ÖĞRETİM YILI ${exam.school} ${exam.class} SINIFI ${exam.semester}. DÖNEM ${exam.name}\n        </div>\n        \n        <table class=\"report-table\">\n            <thead>\n                <tr>\n                    <th rowspan=\"2\" class=\"main-header\">OKUL NO</th>\n                    <th rowspan=\"2\" class=\"main-header\">AD SOYAD</th>\n                    ${headerCells}\n                    <th rowspan=\"2\" class=\"main-header\">TOPLAM</th>\n                </tr>\n                <tr>\n                    ${scoringCells}\n                </tr>\n            </thead>\n            <tbody>\n                ${studentRows}\n            </tbody>\n        </table>\n        \n        <div class=\"score-legend\">\n            <strong>G: 10 PUAN &nbsp;&nbsp; İYİ: 15 PUAN &nbsp;&nbsp; Çİ: 20 PUAN</strong>\n        </div>\n    `;\n    \n    previewDiv.classList.remove('hidden');\n}\n\nfunction exportToWord() {\n    const examIndex = document.getElementById('report-exam-select').value;\n    if (examIndex === '') {\n        alert('Lütfen önce bir sınav seçin.');\n        return;\n    }\n    \n    const exam = appState.exams[parseInt(examIndex)];\n    const content = document.getElementById('report-content').innerHTML;\n    \n    // A4 optimize edilmiş kompakt stil\n    const fullContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>${exam.class} ${exam.semester}. DÖNEM ${exam.name}</title>\n            <style>\n                @page { size: A4; margin: 0.5cm; }\n                body { \n                    font-family: Arial, sans-serif; \n                    margin: 0;\n                    font-size: 9px;\n                    line-height: 1.1;\n                }\n                table { \n                    border-collapse: collapse; \n                    width: 100%; \n                    page-break-inside: avoid;\n                }\n                th, td { \n                    border: 1px solid #000; \n                    padding: 2px; \n                    text-align: center;\n                    font-size: 8px;\n                }\n                th { \n                    background-color: #f0f0f0;\n                    font-weight: bold;\n                }\n                .student-name { text-align: left; }\n                .header-title {\n                    text-align: center;\n                    font-size: 11px;\n                    font-weight: bold;\n                    margin-bottom: 5px;\n                }\n                .score-legend {\n                    font-size: 8px;\n                    margin-top: 5px;\n                }\n            </style>\n        </head>\n        <body>\n            ${content}\n        </body>\n        </html>\n    `;\n    \n    // Cordova/Mobil cihaz kontrolü\n    const isCordova = (typeof window.cordova !== 'undefined');\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    if (isCordova) {\n        // Cordova ortamında gerçek dosya kaydetme\n        const fileName = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.doc`;\n        \n        if (window.cordova && window.cordova.file) {\n            const blob = new Blob([fullContent], { type: 'application/msword' });\n            \n            window.resolveLocalFileSystemURL(cordova.file.externalDataDirectory, function(dirEntry) {\n                dirEntry.getFile(fileName, {create: true, exclusive: false}, function(fileEntry) {\n                    fileEntry.createWriter(function(fileWriter) {\n                        fileWriter.onwriteend = function() {\n                            alert('Rapor başarıyla kaydedildi!');\n                            if (window.cordova.plugins && window.cordova.plugins.fileOpener2) {\n                                cordova.plugins.fileOpener2.open(\n                                    fileEntry.toURL(),\n                                    'application/msword',\n                                    {\n                                        error: function(e) {\n                                            alert('Dosya açılamadı. İndirilenler klasöründen bulabilirsiniz.');\n                                        },\n                                        success: function() {}\n                                    }\n                                );\n                            }\n                        };\n                        fileWriter.onerror = function(e) {\n                            alert('Dosya kaydedilemedi: ' + e.toString());\n                        };\n                        fileWriter.write(blob);\n                    });\n                }, function(e) {\n                    alert('Dosya oluşturulamadı: ' + e.toString());\n                });\n            }, function(e) {\n                alert('Klasöre erişilemedi: ' + e.toString());\n            });\n        } else {\n            const blob = new Blob([fullContent], { type: 'text/html' });\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.html`;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            setTimeout(() => {\n                document.body.removeChild(a);\n                window.URL.revokeObjectURL(url);\n            }, 100);\n            alert('Rapor HTML formatında indirildi!');\n        }\n    } else if (isMobile) {\n        // Mobil tarayıcı için HTML dosyası\n        const blob = new Blob([fullContent], { type: 'text/html' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.html`;\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        \n        try {\n            a.click();\n            setTimeout(() => {\n                document.body.removeChild(a);\n                window.URL.revokeObjectURL(url);\n            }, 100);\n            alert('Rapor HTML formatında indirildi!');\n        } catch (e) {\n            window.open(url, '_blank');\n            alert('Rapor yeni pencerede açıldı.');\n        }\n    } else {\n        // Masaüstünde Word dosyası olarak indir\n        const blob = new Blob([fullContent], { type: 'application/msword' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.doc`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n        alert('Rapor başarıyla indirildi!');\n    }\n}\n\n// Enter tuşu ile form gönderme\ndocument.addEventListener('DOMContentLoaded', async function() {\n    // Database + Local Storage'dan veriyi yükle\n    await loadAppState();\n    \n    // Enter tuşu event listeners\n    document.getElementById('school-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addSchool();\n    });\n    \n    document.getElementById('class-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addClass();\n    });\n    \n    document.getElementById('criteria-text').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addCriteria();\n    });\n    \n    document.getElementById('student-number').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            document.getElementById('student-name').focus();\n        }\n    });\n    \n    document.getElementById('student-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addStudent();\n    });\n    \n    // Sınav formu değişiklik dinleyicileri\n    document.getElementById('exam-name').addEventListener('input', updateExamSummary);\n    document.getElementById('exam-school').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-semester').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-class').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-grade').addEventListener('change', updateExamSummary);\n    \n    // İlk sayfa yüklemesi\n    navigateTo('anasayfa');\n    \n    // PWA Service Worker kayıt\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register('/sw.js')\n            .then(function(registration) {\n                console.log('Service Worker registered successfully:', registration.scope);\n            })\n            .catch(function(error) {\n                console.log('Service Worker registration failed:', error);\n            });\n    }\n});","size_bytes":43425},"HTML-CSS-JS-Static/server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst port = process.env.PORT || 5000;\n\n// JSON file based storage (secure path outside public access)\nconst DATA_FILE = path.join(__dirname, '..', 'private_data.json');\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Only serve specific safe files (not the entire directory)\napp.use('/style.css', express.static(path.join(__dirname, 'style.css')));\napp.use('/script.js', express.static(path.join(__dirname, 'script.js')));\napp.use('/attached_assets', express.static(path.join(__dirname, 'attached_assets')));\n\n// PWA files\napp.use('/manifest.json', express.static(path.join(__dirname, 'manifest.json')));\napp.use('/sw.js', express.static(path.join(__dirname, 'sw.js')));\napp.use('/icon-192.png', express.static(path.join(__dirname, 'icon-192.png')));\napp.use('/icon-512.png', express.static(path.join(__dirname, 'icon-512.png')));\n\n// Helper functions for JSON file operations\nfunction readSyncData() {\n  try {\n    if (fs.existsSync(DATA_FILE)) {\n      const data = fs.readFileSync(DATA_FILE, 'utf8');\n      return JSON.parse(data);\n    }\n    return {\n      schools: [],\n      criteriaByGrade: {5: [], 6: [], 7: [], 8: []},\n      exams: []\n    };\n  } catch (error) {\n    console.error('Error reading sync data:', error);\n    return {\n      schools: [],\n      criteriaByGrade: {5: [], 6: [], 7: [], 8: []},\n      exams: []\n    };\n  }\n}\n\nfunction writeSyncData(data) {\n  try {\n    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error writing sync data:', error);\n    return false;\n  }\n}\n\n// Sync API endpoints (JSON file based)\napp.post('/api/sync', async (req, res) => {\n  try {\n    const { dataType, data } = req.body;\n    \n    // Read current data\n    let currentData = readSyncData();\n    \n    // Update specific data type\n    if (dataType === 'schools') {\n      currentData.schools = data;\n    } else if (dataType === 'criteria') {\n      currentData.criteriaByGrade = data;\n    } else if (dataType === 'exams') {\n      currentData.exams = data;\n    }\n    \n    // Write updated data back\n    const success = writeSyncData(currentData);\n    \n    if (success) {\n      res.json({ success: true });\n      console.log(`Synced ${dataType} data successfully`);\n    } else {\n      res.status(500).json({ error: 'Write failed' });\n    }\n  } catch (error) {\n    console.error('Sync error:', error);\n    res.status(500).json({ error: 'Sync failed' });\n  }\n});\n\napp.get('/api/data', async (req, res) => {\n  try {\n    // Read data from JSON file\n    const data = readSyncData();\n    res.json(data);\n    console.log('Data loaded successfully');\n  } catch (error) {\n    console.error('Data load error:', error);\n    res.status(500).json({ error: 'Load failed' });\n  }\n});\n\n// Health check\napp.get('/api/health', async (req, res) => {\n  try {\n    // Check if we can read/write the sync file\n    const testData = readSyncData();\n    res.json({ status: 'healthy', storage: 'json-file' });\n  } catch (error) {\n    res.status(500).json({ status: 'unhealthy', storage: 'error' });\n  }\n});\n\n// Serve static files\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n\napp.listen(port, '0.0.0.0', () => {\n  console.log(`Server running on port ${port}`);\n});","size_bytes":3396},"HTML-CSS-JS-Static/style.css":{"content":"/* Genel ayarlar */\n* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n    width: 100%;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n        sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    \n    /* Arkaplan resmi */\n    background-image: url('arkaplan.jpg');\n    background-size: cover;\n    background-position: center;\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n    \n    /* Şeffaf siyah overlay */\n    background-color: rgba(0, 0, 0, 0.4);\n    background-blend-mode: multiply;\n    \n    min-height: 100vh;\n    overflow: hidden;\n}\n\n/* Ana container - ekranın %80'ini kullan */\n#app {\n    width: 80%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n    min-height: 100vh;\n}\n\n/* Sayfa stilleri */\n.page {\n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(10px);\n    border-radius: 12px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\n    padding: 40px;\n    min-height: 600px;\n    margin: 20px 0;\n    color: white;\n}\n\n.page-title {\n    font-size: 22px;\n    font-weight: bold;\n    margin-bottom: 30px;\n    text-align: center;\n    color: white;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);\n}\n\n/* Görünürlük kontrolleri */\n.hidden {\n    display: none !important;\n}\n\n/* Buton stilleri */\n.button {\n    display: block;\n    width: 100%;\n    max-width: 350px;\n    margin: 20px auto;\n    padding: 18px 24px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border: none;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-align: center;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n}\n\n.button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n.button:active {\n    transform: translateY(-1px);\n}\n\n.back-button {\n    margin-bottom: 20px;\n    padding: 12px 24px;\n    font-size: 16px;\n    color: #667eea;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #667eea;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(5px);\n}\n\n.back-button:hover {\n    background: #667eea;\n    color: white;\n}\n\n/* Tab sistemi */\n.tabs {\n    display: flex;\n    margin-bottom: 30px;\n    border-bottom: 2px solid #ddd;\n    background: rgba(248, 249, 250, 0.8);\n    border-radius: 8px 8px 0 0;\n}\n\n.tab {\n    flex: 1;\n    padding: 15px 24px;\n    cursor: pointer;\n    border: none;\n    background: transparent;\n    font-size: 16px;\n    font-weight: bold;\n    color: #667eea;\n    border-bottom: 3px solid transparent;\n    transition: all 0.3s ease;\n}\n\n.tab.active {\n    color: #333;\n    border-bottom-color: #667eea;\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.tab:hover {\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.tab-content {\n    animation: fadeIn 0.3s ease;\n}\n\n/* Form stilleri */\n.form-container, .form-section {\n    background: rgba(0, 0, 0, 0.4);\n    padding: 25px;\n    border-radius: 10px;\n    margin: 25px 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.form-section h3 {\n    margin-top: 0;\n    margin-bottom: 20px;\n    color: white;\n    font-size: 15px;\n}\n\n.input-group {\n    display: flex;\n    gap: 12px;\n    margin-bottom: 20px;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n.text-input, .select-input {\n    flex: 1;\n    min-width: 200px;\n    padding: 14px;\n    font-size: 16px;\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n    background: rgba(255, 255, 255, 0.9);\n}\n\n.text-input:focus, .select-input:focus {\n    outline: none;\n    border-color: #667eea;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.add-button {\n    padding: 14px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: #28a745;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);\n}\n\n.add-button:hover {\n    background: #218838;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);\n}\n\n/* Liste stilleri */\n.list-container {\n    margin-top: 30px;\n}\n\n.list-title {\n    font-size: 18px;\n    font-weight: bold;\n    margin-bottom: 20px;\n    color: white;\n    padding: 10px 0;\n    border-bottom: 2px solid #667eea;\n}\n\n.item-list {\n    list-style: none;\n    padding: 0;\n}\n\n.list-item, .school-item, .class-item, .student-item {\n    background: rgba(255, 255, 255, 0.08);\n    margin: 12px 0;\n    padding: 18px;\n    border-radius: 8px;\n    border-left: 4px solid #667eea;\n    font-size: 16px;\n    color: white;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n    transition: all 0.3s ease;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.list-item:hover, .school-item:hover, .class-item:hover, .student-item:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n/* Okul ve sınıf özel stilleri */\n.school-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 15px;\n}\n\n.school-name {\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n}\n\n.class-count, .student-count {\n    color: rgba(255, 255, 255, 0.7);\n    font-size: 14px;\n    margin-top: 5px;\n}\n\n.classes-container {\n    margin-top: 15px;\n    padding-left: 20px;\n    border-left: 2px solid #e9ecef;\n}\n\n.class-item {\n    background: rgba(255, 255, 255, 0.15);\n    margin: 8px 0;\n    padding: 12px 15px;\n    border-radius: 6px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-left: 3px solid #6c757d;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.class-name {\n    font-weight: bold;\n    color: white;\n}\n\n/* Aksiyon butonları */\n.action-buttons {\n    display: flex;\n    gap: 8px;\n    flex-wrap: wrap;\n}\n\n.small-button {\n    padding: 6px 12px;\n    font-size: 12px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n\n.view-button {\n    background: #17a2b8;\n    color: white;\n}\n\n.view-button:hover {\n    background: #138496;\n    transform: translateY(-1px);\n}\n\n.delete-button {\n    background: #dc3545;\n    color: white;\n}\n\n.delete-button:hover {\n    background: #c82333;\n    transform: translateY(-1px);\n}\n\n/* Sınıf seviyeleri butonları */\n.grade-buttons {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.grade-button {\n    padding: 25px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);\n    border: none;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);\n}\n\n.grade-button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);\n}\n\n/* Dosya yükleme */\n.file-upload {\n    margin: 15px 0;\n    padding: 20px;\n    border: 2px dashed #ddd;\n    border-radius: 8px;\n    text-align: center;\n    background: rgba(248, 249, 250, 0.5);\n    transition: all 0.3s ease;\n}\n\n.file-upload:hover {\n    border-color: #667eea;\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.file-input {\n    margin: 10px 0;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n    background: white;\n    width: 100%;\n    max-width: 300px;\n}\n\n/* Öğrenci özel stilleri */\n.student-item {\n    background: rgba(255, 193, 7, 0.2);\n    border-left: 4px solid #ffc107;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid rgba(255, 193, 7, 0.3);\n}\n\n.student-info {\n    display: flex;\n    gap: 20px;\n    align-items: center;\n}\n\n.student-number {\n    font-weight: bold;\n    color: #ffc107;\n    background: rgba(255, 193, 7, 0.3);\n    padding: 4px 8px;\n    border-radius: 4px;\n}\n\n.student-name {\n    color: white;\n    font-size: 16px;\n}\n\n/* Kriter seçimi */\n.criteria-selection {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 12px;\n    margin: 15px 0;\n}\n\n.criteria-checkbox {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 12px 16px;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.criteria-checkbox:hover {\n    background: rgba(102, 126, 234, 0.1);\n    border-color: #667eea;\n}\n\n.criteria-checkbox.selected {\n    background: rgba(102, 126, 234, 0.2);\n    border-color: #667eea;\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n/* Sınav özeti */\n.exam-summary {\n    background: rgba(40, 167, 69, 0.2);\n    border: 2px solid rgba(40, 167, 69, 0.5);\n    border-radius: 8px;\n    padding: 25px;\n    margin: 25px 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n}\n\n.exam-summary h3 {\n    color: #28a745;\n    margin-bottom: 15px;\n}\n\n.exam-summary p {\n    margin: 8px 0;\n    color: white;\n}\n\n/* Animasyonlar */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.page {\n    animation: fadeIn 0.5s ease;\n}\n\n/* Scrollbar özel ayarları */\n.page.scrollable {\n    overflow-y: auto;\n    max-height: calc(100vh - 40px);\n}\n\n/* Compact mode - okul-ekle ve sinif-yonetimi için */\nbody.compact #app {\n    padding: 4px;\n}\n\nbody.compact .page {\n    margin: 0;\n    padding: 8px;\n    min-height: unset;\n    height: calc(100vh - 8px);\n    overflow: hidden;\n}\n\nbody.compact .form-container,\nbody.compact .form-section {\n    padding: 8px;\n    margin: 4px 0;\n}\n\nbody.compact .list-title {\n    font-size: 14px;\n    margin: 4px 0 6px;\n    padding: 4px 0;\n}\n\nbody.compact .school-item,\nbody.compact .class-item,\nbody.compact .student-item {\n    margin: 3px 0;\n    padding: 6px 10px;\n    font-size: 13px;\n    line-height: 1.2;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    border-width: 1px;\n}\n\n/* Sınıf listesi grid layout - 3 sıra yan yana - Güçlü selector */\n#classes-list {\n    display: grid !important;\n    grid-template-columns: repeat(3, 1fr) !important;\n    gap: 6px !important;\n    margin-top: 8px !important;\n}\n\n#classes-list .class-item {\n    margin: 0 !important;\n    padding: 4px 6px !important;\n    font-size: 11px !important;\n    display: flex !important;\n    flex-direction: column !important;\n    min-height: 45px !important;\n    max-width: none !important;\n    width: 100% !important;\n    line-height: 1.1 !important;\n}\n\n/* Üst satır: Sınıf adı + Butonlar yan yana */\n#classes-list .class-item > div:first-child {\n    display: flex !important;\n    justify-content: space-between !important;\n    align-items: center !important;\n    margin-bottom: 3px !important;\n}\n\n#classes-list .class-name {\n    font-size: 11px !important;\n    font-weight: bold !important;\n    margin: 0 !important;\n    line-height: 1.1 !important;\n    color: white !important;\n    flex-shrink: 0 !important;\n}\n\n#classes-list .action-buttons {\n    gap: 2px !important;\n    flex-direction: row !important;\n    align-items: center !important;\n    flex-shrink: 0 !important;\n}\n\n#classes-list .small-button {\n    padding: 1px 4px !important;\n    font-size: 8px !important;\n    line-height: 1 !important;\n    margin: 0 !important;\n    white-space: nowrap !important;\n    min-width: auto !important;\n}\n\n/* Alt satır: Öğrenci sayısı */\n#classes-list .student-count {\n    font-size: 9px !important;\n    margin: 0 !important;\n    padding: 0 !important;\n    color: rgba(255, 255, 255, 0.6) !important;\n    text-align: left !important;\n    line-height: 1 !important;\n}\n\nbody.compact .school-header {\n    margin-bottom: 8px;\n}\n\nbody.compact .school-name {\n    font-size: 14px;\n}\n\nbody.compact .class-count,\nbody.compact .student-count {\n    font-size: 12px;\n    margin-top: 2px;\n}\n\nbody.compact .action-buttons {\n    gap: 3px;\n}\n\nbody.compact .small-button {\n    padding: 2px 6px;\n    font-size: 10px;\n    line-height: 1.2;\n}\n\n/* Okul listesi için butonlar normal boyutta kalsın */\nbody.compact #schools-list .small-button {\n    padding: 3px 8px;\n    font-size: 10px;\n}\n\n/* Sınıf yönetimi sayfası için ek optimizasyonlar */\n#sinif-yonetimi .form-section {\n    padding: 6px !important;\n    margin: 4px 0 !important;\n}\n\n#sinif-yonetimi .list-title {\n    font-size: 13px !important;\n    margin: 4px 0 6px !important;\n    padding: 2px 0 !important;\n}\n\n/* Yeni Sınıf Ekle alanını daralt */\n#sinif-yonetimi .form-section h3 {\n    margin: 0 0 8px 0 !important;\n    font-size: 13px !important;\n}\n\n#sinif-yonetimi .input-group {\n    margin-bottom: 6px !important;\n    gap: 4px !important;\n}\n\n#sinif-yonetimi .text-input {\n    padding: 4px 6px !important;\n    font-size: 11px !important;\n}\n\n#sinif-yonetimi .primary-button {\n    padding: 4px 8px !important;\n    font-size: 11px !important;\n}\n\nbody.compact .input-group {\n    gap: 6px;\n    margin-bottom: 8px;\n}\n\nbody.compact .text-input,\nbody.compact .select-input {\n    font-size: 13px;\n    padding: 6px;\n}\n\nbody.compact .primary-button {\n    padding: 6px 12px;\n    font-size: 12px;\n}\n\n.page.scrollable::-webkit-scrollbar {\n    width: 8px;\n}\n\n.page.scrollable::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 4px;\n}\n\n.page.scrollable::-webkit-scrollbar-thumb {\n    background: rgba(102, 126, 234, 0.6);\n    border-radius: 4px;\n}\n\n.page.scrollable::-webkit-scrollbar-thumb:hover {\n    background: rgba(102, 126, 234, 0.8);\n}\n\n/* Compact mode'da scrollbar tamamen gizle */\nbody.compact .page {\n    overflow: hidden !important;\n}\n\nbody.compact {\n    overflow: hidden;\n}\n\n/* Genel sayfalarda scrollbar gizleme */\nbody:not(.allow-scroll) {\n    overflow: hidden;\n}\n\n/* Puanlama tablosu stilleri */\n.scoring-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 20px 0;\n    background: rgba(255, 255, 255, 0.95);\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.scoring-table th,\n.scoring-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n    color: #333;\n}\n\n.scoring-table th {\n    background: #667eea;\n    color: white;\n    font-weight: bold;\n    font-size: 14px;\n}\n\n.scoring-table .student-name {\n    text-align: left;\n    font-weight: bold;\n}\n\n.scoring-table .student-number {\n    font-weight: bold;\n    color: #667eea;\n}\n\n.score-buttons {\n    display: flex;\n    gap: 5px;\n    justify-content: center;\n}\n\n.score-btn {\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    border: 2px solid;\n    background: white;\n    cursor: pointer;\n    font-weight: bold;\n    font-size: 12px;\n    transition: all 0.3s ease;\n}\n\n.score-btn.g {\n    border-color: #28a745;\n    color: #28a745;\n}\n\n.score-btn.g.selected {\n    background: #28a745;\n    color: white;\n}\n\n.score-btn.iyi {\n    border-color: #ffc107;\n    color: #ffc107;\n}\n\n.score-btn.iyi.selected {\n    background: #ffc107;\n    color: white;\n}\n\n.score-btn.ci {\n    border-color: #dc3545;\n    color: #dc3545;\n}\n\n.score-btn.ci.selected {\n    background: #dc3545;\n    color: white;\n}\n\n.score-btn:hover {\n    transform: scale(1.1);\n}\n\n.total-score {\n    font-weight: bold;\n    font-size: 16px;\n    color: #333;\n}\n\n.criteria-with-deadline {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    background: rgba(255, 255, 255, 0.1);\n    padding: 15px;\n    border-radius: 8px;\n    margin-bottom: 15px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.criteria-checkbox-with-date {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 12px;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.criteria-checkbox-with-date:hover {\n    background: rgba(102, 126, 234, 0.1);\n    border-color: #667eea;\n}\n\n.criteria-checkbox-with-date.selected {\n    background: rgba(102, 126, 234, 0.2);\n    border-color: #667eea;\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n.date-input {\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    font-size: 14px;\n    margin-left: auto;\n}\n\n/* Responsive tasarım */\n@media (max-width: 768px) {\n    #app {\n        width: 95%;\n        padding: 10px;\n    }\n    \n    .page {\n        padding: 20px;\n        margin: 10px 0;\n    }\n    \n    .input-group {\n        flex-direction: column;\n        align-items: stretch;\n    }\n    \n    .text-input, .select-input {\n        min-width: auto;\n        margin-bottom: 10px;\n    }\n    \n    .grade-buttons {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .school-header, .action-buttons {\n        flex-direction: column;\n        gap: 10px;\n        align-items: flex-start;\n    }\n    \n    .student-item {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 10px;\n    }\n    \n    .criteria-selection {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Rapor tablosu kompakt stilleri */\n.report-table {\n    width: 100%;\n    border-collapse: collapse;\n    font-family: Arial, sans-serif;\n    font-size: 8px !important;\n}\n\n.report-title {\n    text-align: center;\n    margin-bottom: 10px;\n    font-weight: bold;\n    font-size: 10px !important;\n}\n\n.main-header, .header-cell, .scoring-cell {\n    border: 1px solid #000 !important;\n    padding: 1px !important;\n    text-align: center !important;\n    vertical-align: middle !important;\n    font-size: 7px !important;\n    background-color: #f0f0f0;\n}\n\n.number-cell, .total-cell {\n    border: 1px solid #000 !important;\n    padding: 1px !important;\n    text-align: center !important;\n    font-size: 7px !important;\n}\n\n.name-cell, .score-cell {\n    border: 1px solid #000 !important;\n    padding: 1px !important;\n    font-size: 7px !important;\n}\n\n.name-cell {\n    text-align: left !important;\n    max-width: 80px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.score-marks {\n    display: flex !important;\n    justify-content: space-around !important;\n    font-size: 6px !important;\n}\n\n.score-legend {\n    margin-top: 5px !important;\n    font-size: 6px !important;\n}\n\n/* Küçük ekranlar için */\n@media (max-width: 480px) {\n    .page-title {\n        font-size: 24px;\n    }\n    \n    .button {\n        font-size: 18px;\n        padding: 15px 20px;\n    }\n    \n    .tabs {\n        flex-direction: column;\n    }\n    \n    .tab {\n        padding: 12px;\n        text-align: center;\n    }\n}","size_bytes":18581},"HTML-CSS-JS-Static/sw.js":{"content":"// Service Worker for PWA\nconst CACHE_NAME = 'okul-yonetim-v1';\nconst urlsToCache = [\n  '/',\n  '/style.css',\n  '/script.js',\n  '/manifest.json'\n];\n\n// Install event\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      })\n  );\n});\n\n// Activate event\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});","size_bytes":918},"okul-app/www/script.js":{"content":"// Database API\nclass DatabaseSync {\n    constructor() {\n        this.isOnline = navigator.onLine;\n        this.pendingChanges = [];\n        this.setupOnlineListener();\n    }\n\n    setupOnlineListener() {\n        window.addEventListener('online', () => {\n            this.isOnline = true;\n            this.syncPendingChanges();\n        });\n        window.addEventListener('offline', () => {\n            this.isOnline = false;\n        });\n    }\n\n    async syncToDatabase(dataType, data) {\n        if (!this.isOnline) {\n            this.pendingChanges.push({ dataType, data });\n            return;\n        }\n\n        try {\n            const response = await fetch('https://8d09f432-5eed-4a64-9e74-04c5c4d04ea5-00-38up2j3p1fryf.pike.replit.dev/api/sync', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ dataType, data })\n            });\n            if (!response.ok) throw new Error('Sync failed');\n        } catch (error) {\n            console.log('Database sync failed, saving for later:', error);\n            this.pendingChanges.push({ dataType, data });\n        }\n    }\n\n    async loadFromDatabase() {\n        if (!this.isOnline) return null;\n        \n        try {\n            const response = await fetch('https://8d09f432-5eed-4a64-9e74-04c5c4d04ea5-00-38up2j3p1fryf.pike.replit.dev/api/data');\n            if (!response.ok) throw new Error('Load failed');\n            return await response.json();\n        } catch (error) {\n            console.log('Database load failed, using localStorage:', error);\n            return null;\n        }\n    }\n\n    async syncPendingChanges() {\n        while (this.pendingChanges.length > 0 && this.isOnline) {\n            const change = this.pendingChanges.shift();\n            await this.syncToDatabase(change.dataType, change.data);\n        }\n    }\n}\n\n// Database instance\nconst dbSync = new DatabaseSync();\n\n// Uygulama durumu (state)\nlet appState = {\n    currentPage: 'anasayfa',\n    currentTab: 'schools',\n    selectedSchoolIndex: null,\n    selectedGrade: null,\n    selectedSchoolForClass: null,\n    selectedClassForStudents: null,\n    schools: [],\n    criteriaByGrade: {\n        5: [],\n        6: [],\n        7: [],\n        8: []\n    },\n    exams: [],\n    selectedCriteria: [],\n    selectedCriteriaWithDeadlines: [],\n    currentExamScores: {}\n};\n\n// Veri yükleme (Database + LocalStorage hybrid)\nasync function loadAppState() {\n    // Önce database'den yüklemeyi dene\n    const dbData = await dbSync.loadFromDatabase();\n    \n    if (dbData) {\n        // Database'den yüklendi\n        appState.schools = dbData.schools || [];\n        appState.criteriaByGrade = dbData.criteriaByGrade || {5: [], 6: [], 7: [], 8: []};\n        appState.exams = dbData.exams || [];\n        \n        // LocalStorage'a da backup olarak kaydet\n        localStorage.setItem('okulYonetimSistemi', JSON.stringify({\n            schools: appState.schools,\n            criteriaByGrade: appState.criteriaByGrade,\n            exams: appState.exams\n        }));\n    } else {\n        // Database başarısızsa localStorage'dan yükle\n        const savedState = localStorage.getItem('okulYonetimSistemi');\n        if (savedState) {\n            const parsed = JSON.parse(savedState);\n            appState.schools = parsed.schools || [];\n            appState.criteriaByGrade = parsed.criteriaByGrade || {5: [], 6: [], 7: [], 8: []};\n            appState.exams = parsed.exams || [];\n            \n            // LocalStorage'daki veriyi database'e sync et\n            dbSync.syncToDatabase('schools', appState.schools);\n            dbSync.syncToDatabase('criteria', appState.criteriaByGrade);\n            dbSync.syncToDatabase('exams', appState.exams);\n        }\n    }\n    \n    // Diğer state değerlerini sıfırla\n    appState.selectedCriteria = [];\n    appState.selectedCriteriaWithDeadlines = [];\n    appState.currentExamScores = {};\n}\n\n// Veri kaydetme (Database + LocalStorage hybrid)\nfunction saveAppState() {\n    const stateToSave = {\n        schools: appState.schools,\n        criteriaByGrade: appState.criteriaByGrade,\n        exams: appState.exams\n    };\n    \n    // LocalStorage'a kaydet (offline backup)\n    localStorage.setItem('okulYonetimSistemi', JSON.stringify(stateToSave));\n    \n    // Database'e sync et\n    dbSync.syncToDatabase('schools', appState.schools);\n    dbSync.syncToDatabase('criteria', appState.criteriaByGrade);\n    dbSync.syncToDatabase('exams', appState.exams);\n}\n\n// Sayfa geçişleri\nfunction navigateTo(page) {\n    // Tüm sayfaları gizle ve scrollable sınıfını kaldır\n    document.querySelectorAll('.page').forEach(p => {\n        p.classList.add('hidden');\n        p.classList.remove('scrollable');\n    });\n    \n    // Seçili sayfayı göster\n    document.getElementById(page).classList.remove('hidden');\n    \n    // Compact mode toggle for okul-ekle\n    if (page === 'okul-ekle') {\n        document.body.classList.add('compact');\n        document.body.classList.remove('allow-scroll');\n    } else {\n        document.body.classList.remove('compact');\n    }\n    \n    // Scrollbar gerekli sayfalara scrollable sınıfı ekle\n    if (page === 'sinav-olustur' || page === 'sinif-kriterleri' || page === 'sinavlarim' || page === 'rapor-al' || page === 'sinav-puanlama' || page === 'sinif-yonetimi') {\n        document.getElementById(page).classList.add('scrollable');\n    }\n    \n    appState.currentPage = page;\n    \n    // Sayfa yüklendiğinde güncelleme\n    if (page === 'okul-ekle') {\n        updateSchoolList();\n        updateSchoolSelectForClass();\n    } else if (page === 'sinav-olustur') {\n        updateExamSchools();\n        updateExamsList();\n    } else if (page === 'sinavlarim') {\n        updateMyExamsList();\n    } else if (page === 'rapor-al') {\n        updateReportExamSelect();\n    }\n}\n\n// Tab değiştirme\nfunction switchTab(tabName) {\n    const tabs = document.querySelectorAll('.tab');\n    const tabContents = document.querySelectorAll('.tab-content');\n    \n    tabs.forEach(tab => tab.classList.remove('active'));\n    tabContents.forEach(content => content.classList.add('hidden'));\n    \n    document.querySelector(`[onclick=\"switchTab('${tabName}')\"]`).classList.add('active');\n    \n    if (tabName === 'schools') {\n        document.getElementById('school-management').classList.remove('hidden');\n        updateSchoolList();\n    } else if (tabName === 'classes') {\n        document.getElementById('class-management').classList.remove('hidden');\n        updateSchoolSelectForClass();\n    }\n    \n    appState.currentTab = tabName;\n}\n\n// Okul yönetimi\nfunction addSchool() {\n    const schoolNameInput = document.getElementById('school-name');\n    const schoolName = schoolNameInput.value.trim().toLocaleUpperCase('tr-TR');\n    \n    if (schoolName) {\n        const newSchool = {\n            name: schoolName,\n            classes: [],\n            id: Date.now()\n        };\n        \n        appState.schools.push(newSchool);\n        schoolNameInput.value = '';\n        updateSchoolList();\n        saveAppState();\n    }\n}\n\nfunction deleteSchool(index) {\n    if (confirm('Bu okulu silmek istediğinizden emin misiniz? Tüm sınıfları ve öğrencileri silinecektir.')) {\n        appState.schools.splice(index, 1);\n        updateSchoolList();\n        updateSchoolSelectForClass();\n        saveAppState();\n    }\n}\n\nfunction updateSchoolList() {\n    const schoolsList = document.getElementById('schools-list');\n    const schoolCount = document.getElementById('school-count');\n    \n    schoolCount.textContent = appState.schools.length;\n    \n    if (appState.schools.length === 0) {\n        schoolsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz okul eklenmedi.</div>';\n        return;\n    }\n    \n    schoolsList.innerHTML = appState.schools.map((school, index) => `\n        <div class=\"school-item\">\n            <div class=\"school-header\">\n                <div>\n                    <div class=\"school-name\">${school.name}</div>\n                    <div class=\"class-count\">${school.classes.length} sınıf</div>\n                </div>\n                <div class=\"action-buttons\">\n                    <button class=\"small-button view-button\" onclick=\"selectSchoolForClassManagement(${index})\">\n                        Sınıfları Görüntüle\n                    </button>\n                    <button class=\"small-button delete-button\" onclick=\"deleteSchool(${index})\">\n                        Sil\n                    </button>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\n// Sınıf yönetimi\nfunction selectSchoolForClassManagement(schoolIndex) {\n    switchTab('classes');\n    document.getElementById('selected-school').value = schoolIndex;\n    selectSchoolForClass();\n}\n\nfunction updateSchoolSelectForClass() {\n    const select = document.getElementById('selected-school');\n    select.innerHTML = '<option value=\"\">Okul seçiniz...</option>' +\n        appState.schools.map((school, index) => \n            `<option value=\"${index}\">${school.name}</option>`\n        ).join('');\n}\n\nfunction selectSchoolForClass() {\n    const selectedIndex = document.getElementById('selected-school').value;\n    appState.selectedSchoolForClass = selectedIndex !== '' ? parseInt(selectedIndex) : null;\n    \n    const classManager = document.getElementById('class-manager');\n    \n    if (appState.selectedSchoolForClass !== null) {\n        classManager.classList.remove('hidden');\n        updateClassList();\n    } else {\n        classManager.classList.add('hidden');\n    }\n}\n\nfunction addClass() {\n    const classNameInput = document.getElementById('class-name');\n    const className = classNameInput.value.trim().toLocaleUpperCase('tr-TR');\n    \n    if (className && appState.selectedSchoolForClass !== null) {\n        const newClass = {\n            name: className,\n            students: [],\n            id: Date.now()\n        };\n        \n        appState.schools[appState.selectedSchoolForClass].classes.push(newClass);\n        classNameInput.value = '';\n        updateClassList();\n        updateSchoolList(); // Ana listeyı de güncelle\n        saveAppState();\n    }\n}\n\nfunction deleteClass(classIndex) {\n    if (confirm('Bu sınıfı silmek istediğinizden emin misiniz? Tüm öğrencileri silinecektir.')) {\n        appState.schools[appState.selectedSchoolForClass].classes.splice(classIndex, 1);\n        updateClassList();\n        updateSchoolList();\n        saveAppState();\n    }\n}\n\nfunction updateClassList() {\n    if (appState.selectedSchoolForClass === null) return;\n    \n    const school = appState.schools[appState.selectedSchoolForClass];\n    const classesList = document.getElementById('classes-list');\n    const classCount = document.getElementById('class-count');\n    \n    classCount.textContent = school.classes.length;\n    \n    if (school.classes.length === 0) {\n        classesList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Bu okulda henüz sınıf bulunmuyor.</div>';\n        return;\n    }\n    \n    classesList.innerHTML = school.classes.map((classItem, index) => `\n        <div class=\"class-item\">\n            <div>\n                <span class=\"class-name\">${classItem.name}</span>\n                <div class=\"student-count\">\n                    ${(classItem.students || []).length} öğrenci\n                </div>\n            </div>\n            <div class=\"action-buttons\">\n                <button class=\"small-button view-button\" onclick=\"navigateToStudentManagement(${appState.selectedSchoolForClass}, ${index})\">\n                    Öğrenci Yönet\n                </button>\n                <button class=\"small-button delete-button\" onclick=\"deleteClass(${index})\">\n                    Sınıfı Sil\n                </button>\n            </div>\n        </div>\n    `).join('');\n}\n\n// Kriter yönetimi\nfunction navigateToGradeCriteria(grade) {\n    appState.selectedGrade = grade;\n    document.getElementById('criteria-grade').textContent = grade;\n    document.getElementById('criteria-grade-title').textContent = grade;\n    navigateTo('sinif-kriterleri');\n    updateCriteriaList();\n}\n\nfunction addCriteria() {\n    const criteriaInput = document.getElementById('criteria-text');\n    const criteriaText = criteriaInput.value.trim().toLocaleUpperCase('tr-TR');\n    \n    if (criteriaText && appState.selectedGrade) {\n        appState.criteriaByGrade[appState.selectedGrade].push(criteriaText);\n        criteriaInput.value = '';\n        updateCriteriaList();\n        saveAppState();\n    }\n}\n\nfunction deleteCriteria(index) {\n    if (confirm('Bu kriteri silmek istediğinizden emin misiniz?')) {\n        appState.criteriaByGrade[appState.selectedGrade].splice(index, 1);\n        updateCriteriaList();\n        saveAppState();\n    }\n}\n\nfunction updateCriteriaList() {\n    if (!appState.selectedGrade) return;\n    \n    const criteriaList = document.getElementById('criteria-list');\n    const criteriaCount = document.getElementById('criteria-count');\n    const criteria = appState.criteriaByGrade[appState.selectedGrade];\n    \n    criteriaCount.textContent = criteria.length;\n    \n    if (criteria.length === 0) {\n        criteriaList.innerHTML = `<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz ${appState.selectedGrade}. sınıf için kriter eklenmedi.</div>`;\n        return;\n    }\n    \n    criteriaList.innerHTML = criteria.map((criteriaItem, index) => `\n        <div class=\"list-item\" style=\"display: flex; justify-content: space-between; align-items: center;\">\n            <div>\n                <strong>Kriter ${index + 1}:</strong> ${criteriaItem}\n            </div>\n            <button class=\"small-button delete-button\" onclick=\"deleteCriteria(${index})\" style=\"margin-left: 10px;\">\n                Sil\n            </button>\n        </div>\n    `).join('');\n}\n\n// Öğrenci yönetimi\nfunction navigateToStudentManagement(schoolIndex, classIndex) {\n    appState.selectedSchoolIndex = schoolIndex;\n    appState.selectedClassIndex = classIndex;\n    \n    const school = appState.schools[schoolIndex];\n    const classItem = school.classes[classIndex];\n    \n    document.getElementById('student-school-name').textContent = school.name;\n    document.getElementById('student-class-name').textContent = classItem.name;\n    \n    navigateTo('sinif-yonetimi');\n    updateStudentsList();\n}\n\nfunction addStudent() {\n    const numberInput = document.getElementById('student-number');\n    const nameInput = document.getElementById('student-name');\n    const number = numberInput.value.trim();\n    const name = nameInput.value.trim();\n    \n    if (number && name && appState.selectedSchoolIndex !== null && appState.selectedClassIndex !== null) {\n        const student = {\n            number: number,\n            name: name,\n            id: Date.now()\n        };\n        \n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        if (!classItem.students) classItem.students = [];\n        classItem.students.push(student);\n        \n        numberInput.value = '';\n        nameInput.value = '';\n        updateStudentsList();\n        saveAppState();\n    }\n}\n\nfunction deleteStudent(studentId) {\n    if (confirm('Bu öğrenciyi silmek istediğinizden emin misiniz?')) {\n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        classItem.students = classItem.students.filter(s => s.id !== studentId);\n        updateStudentsList();\n        saveAppState();\n    }\n}\n\nfunction uploadStudentFile() {\n    const fileInput = document.getElementById('student-file');\n    const file = fileInput.files[0];\n    \n    if (file && file.type === 'text/plain') {\n        const reader = new FileReader();\n        reader.onload = function(e) {\n            const content = e.target.result;\n            parseAndAddStudents(content);\n        };\n        reader.readAsText(file, 'UTF-8');\n    } else {\n        alert('Lütfen .txt uzantılı bir dosya seçin.');\n    }\n}\n\nfunction parseAndAddStudents(content) {\n    const lines = content.split('\\n').filter(line => line.trim());\n    const newStudents = [];\n    \n    lines.forEach(line => {\n        const parts = line.trim().split('\\t');\n        if (parts.length >= 2) {\n            const number = parts[0].trim();\n            const name = parts[1].trim();\n            if (number && name) {\n                newStudents.push({\n                    number: number,\n                    name: name,\n                    id: Date.now() + Math.random()\n                });\n            }\n        }\n    });\n    \n    if (newStudents.length > 0) {\n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        if (!classItem.students) classItem.students = [];\n        classItem.students.push(...newStudents);\n        \n        updateStudentsList();\n        saveAppState();\n        alert(`${newStudents.length} öğrenci başarıyla eklendi.`);\n    } else {\n        alert('Dosyada geçerli öğrenci bilgisi bulunamadı. Format: Numara[TAB]Ad Soyad');\n    }\n}\n\nfunction updateStudentsList() {\n    if (appState.selectedSchoolIndex === null || appState.selectedClassIndex === null) return;\n    \n    const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n    const students = classItem.students || [];\n    const studentsList = document.getElementById('students-list');\n    const studentsCount = document.getElementById('students-count');\n    \n    studentsCount.textContent = students.length;\n    \n    if (students.length === 0) {\n        studentsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Bu sınıfta henüz öğrenci bulunmuyor.</div>';\n        return;\n    }\n    \n    studentsList.innerHTML = students.map(student => `\n        <div class=\"student-item\">\n            <div class=\"student-info\">\n                <span class=\"student-number\">#${student.number}</span>\n                <span class=\"student-name\">${student.name}</span>\n            </div>\n            <button class=\"small-button delete-button\" onclick=\"deleteStudent(${student.id})\">\n                Sil\n            </button>\n        </div>\n    `).join('');\n}\n\n// Sınav yönetimi\nfunction updateExamSchools() {\n    const select = document.getElementById('exam-school');\n    select.innerHTML = '<option value=\"\">Okul seçiniz...</option>' +\n        appState.schools.map((school, index) => \n            `<option value=\"${index}\">${school.name}</option>`\n        ).join('');\n}\n\nfunction updateExamClasses() {\n    const schoolIndex = document.getElementById('exam-school').value;\n    const classSelect = document.getElementById('exam-class');\n    \n    if (schoolIndex === '') {\n        classSelect.innerHTML = '<option value=\"\">Sınıf seçiniz...</option>';\n        classSelect.disabled = true;\n        return;\n    }\n    \n    const school = appState.schools[parseInt(schoolIndex)];\n    classSelect.disabled = false;\n    classSelect.innerHTML = '<option value=\"\">Sınıf seçiniz...</option>' +\n        school.classes.map((classItem, index) => \n            `<option value=\"${index}\">${classItem.name}</option>`\n        ).join('');\n}\n\nfunction updateExamCriteria() {\n    const grade = document.getElementById('exam-grade').value;\n    const criteriaSection = document.getElementById('criteria-selection-section');\n    const criteriaDiv = document.getElementById('criteria-selection');\n    \n    if (grade === '') {\n        criteriaSection.classList.add('hidden');\n        return;\n    }\n    \n    const criteria = appState.criteriaByGrade[grade] || [];\n    \n    if (criteria.length === 0) {\n        criteriaSection.classList.add('hidden');\n        alert(`${grade}. sınıf için henüz kriter eklenmemiş. Lütfen önce kriterler bölümünden kriter ekleyiniz.`);\n        return;\n    }\n    \n    criteriaSection.classList.remove('hidden');\n    appState.selectedCriteria = [];\n    appState.selectedCriteriaWithDeadlines = [];\n    \n    criteriaDiv.innerHTML = criteria.map((criteria, index) => `\n        <div class=\"criteria-with-deadline\">\n            <div class=\"criteria-checkbox-with-date\" onclick=\"toggleCriteriaWithDeadline('${criteria}', ${index})\">\n                <input type=\"checkbox\" id=\"criteria-${index}\">\n                <span>${criteria}</span>\n                <input type=\"date\" id=\"deadline-${index}\" class=\"date-input\" onclick=\"event.stopPropagation()\" onchange=\"updateCriteriaDeadline('${criteria}', ${index})\">\n            </div>\n        </div>\n    `).join('');\n    \n    updateSelectedCriteriaCount();\n    updateExamSummary();\n}\n\nfunction toggleCriteriaWithDeadline(criteria, index) {\n    const checkbox = document.getElementById(`criteria-${index}`);\n    const criteriaDiv = checkbox.parentElement;\n    const deadlineInput = document.getElementById(`deadline-${index}`);\n    \n    if (appState.selectedCriteria.includes(criteria)) {\n        // Remove criteria\n        appState.selectedCriteria = appState.selectedCriteria.filter(c => c !== criteria);\n        appState.selectedCriteriaWithDeadlines = appState.selectedCriteriaWithDeadlines.filter(c => c.criteria !== criteria);\n        checkbox.checked = false;\n        criteriaDiv.classList.remove('selected');\n        deadlineInput.value = '';\n    } else {\n        // Add criteria\n        appState.selectedCriteria.push(criteria);\n        appState.selectedCriteriaWithDeadlines.push({\n            criteria: criteria,\n            deadline: deadlineInput.value || ''\n        });\n        checkbox.checked = true;\n        criteriaDiv.classList.add('selected');\n    }\n    \n    updateSelectedCriteriaCount();\n    updateExamSummary();\n}\n\nfunction updateCriteriaDeadline(criteria, index) {\n    const deadlineInput = document.getElementById(`deadline-${index}`);\n    const deadlineValue = deadlineInput.value;\n    \n    // Update the deadline in selectedCriteriaWithDeadlines\n    const criteriaItem = appState.selectedCriteriaWithDeadlines.find(c => c.criteria === criteria);\n    if (criteriaItem) {\n        criteriaItem.deadline = deadlineValue;\n        updateExamSummary();\n    }\n}\n\nfunction updateSelectedCriteriaCount() {\n    document.getElementById('selected-criteria-count').textContent = appState.selectedCriteria.length;\n}\n\nfunction updateExamSummary() {\n    const examName = document.getElementById('exam-name').value;\n    const schoolIndex = document.getElementById('exam-school').value;\n    const semester = document.getElementById('exam-semester').value;\n    const classIndex = document.getElementById('exam-class').value;\n    const grade = document.getElementById('exam-grade').value;\n    \n    const summaryDiv = document.getElementById('exam-summary');\n    const summaryContent = document.getElementById('exam-summary-content');\n    \n    if (examName && schoolIndex !== '' && semester && classIndex !== '' && grade && appState.selectedCriteriaWithDeadlines.length > 0) {\n        const school = appState.schools[parseInt(schoolIndex)];\n        const classItem = school.classes[parseInt(classIndex)];\n        \n        const criteriaList = appState.selectedCriteriaWithDeadlines.map(c => \n            `<li>${c.criteria} ${c.deadline ? `(Son Teslim: ${c.deadline})` : ''}</li>`\n        ).join('');\n        \n        summaryDiv.classList.remove('hidden');\n        summaryContent.innerHTML = `\n            <p><strong>Sınav Adı:</strong> ${examName}</p>\n            <p><strong>Okul:</strong> ${school.name}</p>\n            <p><strong>Dönem:</strong> ${semester}. DÖNEM</p>\n            <p><strong>Sınıf:</strong> ${classItem.name}</p>\n            <p><strong>Seviye:</strong> ${grade}. Sınıf</p>\n            <p><strong>Seçilen Kriterler (${appState.selectedCriteriaWithDeadlines.length}):</strong></p>\n            <ul>${criteriaList}</ul>\n        `;\n    } else {\n        summaryDiv.classList.add('hidden');\n    }\n}\n\nfunction createExam() {\n    const examName = document.getElementById('exam-name').value.trim();\n    const schoolIndex = document.getElementById('exam-school').value;\n    const semester = document.getElementById('exam-semester').value;\n    const classIndex = document.getElementById('exam-class').value;\n    const grade = document.getElementById('exam-grade').value;\n    \n    if (examName && schoolIndex !== '' && semester && classIndex !== '' && grade && appState.selectedCriteriaWithDeadlines.length > 0) {\n        const school = appState.schools[parseInt(schoolIndex)];\n        const classItem = school.classes[parseInt(classIndex)];\n        \n        const newExam = {\n            id: Date.now(),\n            name: examName,\n            school: school.name,\n            schoolIndex: parseInt(schoolIndex),\n            semester: semester,\n            class: classItem.name,\n            classIndex: parseInt(classIndex),\n            grade: grade,\n            criteriaWithDeadlines: [...appState.selectedCriteriaWithDeadlines],\n            students: [...(classItem.students || [])],\n            scores: {},\n            createdAt: new Date().toLocaleDateString('tr-TR')\n        };\n        \n        // Initialize scores for all students\n        newExam.students.forEach(student => {\n            newExam.scores[student.id] = {};\n            newExam.criteriaWithDeadlines.forEach(criteria => {\n                newExam.scores[student.id][criteria.criteria] = null; // null = not scored yet\n            });\n        });\n        \n        appState.exams.push(newExam);\n        \n        // Formu temizle\n        document.getElementById('exam-name').value = '';\n        document.getElementById('exam-school').value = '';\n        document.getElementById('exam-semester').value = '';\n        document.getElementById('exam-class').value = '';\n        document.getElementById('exam-grade').value = '';\n        document.getElementById('exam-class').disabled = true;\n        document.getElementById('criteria-selection-section').classList.add('hidden');\n        document.getElementById('exam-summary').classList.add('hidden');\n        appState.selectedCriteria = [];\n        appState.selectedCriteriaWithDeadlines = [];\n        \n        updateExamsList();\n        saveAppState();\n        alert('Sınav başarıyla oluşturuldu!');\n    } else {\n        alert('Lütfen tüm alanları doldurun, dönem seçin ve en az bir kriter seçin.');\n    }\n}\n\nfunction updateExamsList() {\n    const examsListContainer = document.getElementById('exams-list-container');\n    const examsList = document.getElementById('exams-list');\n    const examsCount = document.getElementById('exams-count');\n    \n    examsCount.textContent = appState.exams.length;\n    \n    if (appState.exams.length === 0) {\n        examsListContainer.classList.add('hidden');\n        return;\n    }\n    \n    examsListContainer.classList.remove('hidden');\n    examsList.innerHTML = appState.exams.map(exam => `\n        <div class=\"list-item\">\n            <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                <div>\n                    <strong>${exam.name}</strong><br/>\n                    <small>${exam.school} - ${exam.class} (${exam.grade}. Sınıf) - ${exam.semester}. DÖNEM - ${exam.criteriaWithDeadlines.length} kriter</small><br/>\n                    <small style=\"color: #666;\">Oluşturulma: ${exam.createdAt}</small>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction updateMyExamsList() {\n    const examsList = document.getElementById('my-exams-list');\n    const examsCount = document.getElementById('my-exams-count');\n    \n    examsCount.textContent = appState.exams.length;\n    \n    if (appState.exams.length === 0) {\n        examsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz sınav oluşturulmamış.</div>';\n        return;\n    }\n    \n    examsList.innerHTML = appState.exams.map(exam => `\n        <div class=\"list-item\" style=\"cursor: pointer;\" onclick=\"openExamScoring(${exam.id})\">\n            <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                <div>\n                    <strong>${exam.class} ${exam.semester}. DÖNEM ${exam.name}</strong><br/>\n                    <small>${exam.school} - ${exam.grade}. Sınıf - ${exam.criteriaWithDeadlines.length} kriter - ${exam.students.length} öğrenci</small><br/>\n                    <small style=\"color: #666;\">Oluşturulma: ${exam.createdAt}</small>\n                </div>\n                <div style=\"color: #667eea;\">\n                    <span style=\"font-size: 24px;\">▶</span>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction updateReportExamSelect() {\n    const select = document.getElementById('report-exam-select');\n    select.innerHTML = '<option value=\"\">Rapor alınacak sınavı seçiniz...</option>' +\n        appState.exams.map((exam, index) => \n            `<option value=\"${index}\">${exam.class} ${exam.semester}. DÖNEM ${exam.name} - ${exam.school}</option>`\n        ).join('');\n}\n\nfunction openExamScoring(examId) {\n    const exam = appState.exams.find(e => e.id === examId);\n    if (!exam) return;\n    \n    appState.currentExam = exam;\n    document.getElementById('scoring-exam-title').textContent = \n        `${exam.class} ${exam.semester}. DÖNEM ${exam.name} - Puanlama`;\n    \n    createScoringTable(exam);\n    navigateTo('sinav-puanlama');\n}\n\nfunction createScoringTable(exam) {\n    const container = document.getElementById('scoring-table-container');\n    \n    if (exam.students.length === 0) {\n        container.innerHTML = '<p style=\"color: white; text-align: center;\">Bu sınıfta öğrenci bulunmuyor.</p>';\n        return;\n    }\n    \n    const headerCells = exam.criteriaWithDeadlines.map(c => \n        `<th style=\"min-width: 120px;\">\n            ${c.criteria}<br/>\n            <small>(${c.deadline || 'Tarih yok'})<br/>(20 puan)</small>\n        </th>`\n    ).join('');\n    \n    const studentRows = exam.students.map(student => {\n        const criteriaCells = exam.criteriaWithDeadlines.map(criteria => {\n            const currentScore = exam.scores[student.id][criteria.criteria];\n            return `\n                <td>\n                    <div class=\"score-buttons\">\n                        <button class=\"score-btn g ${currentScore === 10 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 10)\">G</button>\n                        <button class=\"score-btn iyi ${currentScore === 15 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 15)\">İYİ</button>\n                        <button class=\"score-btn ci ${currentScore === 20 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 20)\">Çİ</button>\n                    </div>\n                </td>\n            `;\n        }).join('');\n        \n        const totalScore = Object.values(exam.scores[student.id]).reduce((sum, score) => {\n            return sum + (score || 0);\n        }, 0);\n        \n        return `\n            <tr>\n                <td class=\"student-number\">${student.number}</td>\n                <td class=\"student-name\">${student.name}</td>\n                ${criteriaCells}\n                <td class=\"total-score\">${totalScore}</td>\n            </tr>\n        `;\n    }).join('');\n    \n    container.innerHTML = `\n        <table class=\"scoring-table\">\n            <thead>\n                <tr>\n                    <th>OKUL NO</th>\n                    <th>AD SOYAD</th>\n                    ${headerCells}\n                    <th>TOPLAM</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${studentRows}\n            </tbody>\n        </table>\n    `;\n}\n\nfunction setStudentScore(studentId, criteria, score) {\n    if (!appState.currentExam) return;\n    \n    // Sanitize criteria to prevent XSS\n    const safeCriteria = criteria.replace(/'/g, \"&#x27;\");\n    \n    // Update score in current exam\n    appState.currentExam.scores[studentId][criteria] = score;\n    \n    // Update score in stored exams\n    const examIndex = appState.exams.findIndex(e => e.id === appState.currentExam.id);\n    if (examIndex !== -1) {\n        appState.exams[examIndex].scores[studentId][criteria] = score;\n    }\n    \n    // Recreate the table to show updated scores\n    createScoringTable(appState.currentExam);\n    saveAppState();\n}\n\nfunction saveExamScores() {\n    saveAppState();\n    alert('Puanlar başarıyla kaydedildi!');\n}\n\nfunction updateReportPreview() {\n    const examIndex = document.getElementById('report-exam-select').value;\n    const previewDiv = document.getElementById('report-preview');\n    const contentDiv = document.getElementById('report-content');\n    \n    if (examIndex === '') {\n        previewDiv.classList.add('hidden');\n        return;\n    }\n    \n    const exam = appState.exams[parseInt(examIndex)];\n    if (!exam) return;\n    \n    const currentYear = new Date().getFullYear();\n    const nextYear = currentYear + 1;\n    \n    const headerCells = exam.criteriaWithDeadlines.map(c => \n        `<th class=\"header-cell\">\n            ${c.criteria}<br/>\n            ${c.deadline || '..../..../....'}\n        </th>`\n    ).join('');\n    \n    const scoringCells = exam.criteriaWithDeadlines.map(() => \n        `<th class=\"scoring-cell\">\n            <div class=\"score-marks\">\n                <span>G</span><span>İYİ</span><span>Çİ</span>\n            </div>\n        </th>`\n    ).join('');\n    \n    const studentRows = exam.students.map(student => {\n        const criteriaCells = exam.criteriaWithDeadlines.map(criteria => {\n            const score = exam.scores[student.id][criteria.criteria];\n            const gMark = score === 10 ? '●' : '○';\n            const iyiMark = score === 15 ? '●' : '○';\n            const ciMark = score === 20 ? '●' : '○';\n            \n            return `\n                <td class=\"score-cell\">\n                    <div class=\"score-marks\">\n                        <span>${gMark}</span><span>${iyiMark}</span><span>${ciMark}</span>\n                    </div>\n                </td>\n            `;\n        }).join('');\n        \n        const totalScore = Object.values(exam.scores[student.id]).reduce((sum, score) => {\n            return sum + (score || 0);\n        }, 0);\n        \n        return `\n            <tr>\n                <td class=\"number-cell\">${student.number}</td>\n                <td class=\"name-cell\">${student.name}</td>\n                ${criteriaCells}\n                <td class=\"total-cell\">${totalScore}</td>\n            </tr>\n        `;\n    }).join('');\n    \n    contentDiv.innerHTML = `\n        <div class=\"report-title\">\n            ${currentYear} – ${nextYear} EĞİTİM ÖĞRETİM YILI ${exam.school} ${exam.class} SINIFI ${exam.semester}. DÖNEM ${exam.name}\n        </div>\n        \n        <table class=\"report-table\">\n            <thead>\n                <tr>\n                    <th rowspan=\"2\" class=\"main-header\">OKUL NO</th>\n                    <th rowspan=\"2\" class=\"main-header\">AD SOYAD</th>\n                    ${headerCells}\n                    <th rowspan=\"2\" class=\"main-header\">TOPLAM</th>\n                </tr>\n                <tr>\n                    ${scoringCells}\n                </tr>\n            </thead>\n            <tbody>\n                ${studentRows}\n            </tbody>\n        </table>\n        \n        <div class=\"score-legend\">\n            <strong>G: 10 PUAN &nbsp;&nbsp; İYİ: 15 PUAN &nbsp;&nbsp; Çİ: 20 PUAN</strong>\n        </div>\n    `;\n    \n    previewDiv.classList.remove('hidden');\n}\n\nfunction exportToWord() {\n    const examIndex = document.getElementById('report-exam-select').value;\n    if (examIndex === '') {\n        alert('Lütfen önce bir sınav seçin.');\n        return;\n    }\n    \n    const exam = appState.exams[parseInt(examIndex)];\n    const content = document.getElementById('report-content').innerHTML;\n    \n    // A4 optimize edilmiş kompakt stil\n    const fullContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>${exam.class} ${exam.semester}. DÖNEM ${exam.name}</title>\n            <style>\n                @page { size: A4; margin: 0.5cm; }\n                body { \n                    font-family: Arial, sans-serif; \n                    margin: 0;\n                    font-size: 9px;\n                    line-height: 1.1;\n                }\n                table { \n                    border-collapse: collapse; \n                    width: 100%; \n                    page-break-inside: avoid;\n                }\n                th, td { \n                    border: 1px solid #000; \n                    padding: 2px; \n                    text-align: center;\n                    font-size: 8px;\n                }\n                th { \n                    background-color: #f0f0f0;\n                    font-weight: bold;\n                }\n                .student-name { text-align: left; }\n                .header-title {\n                    text-align: center;\n                    font-size: 11px;\n                    font-weight: bold;\n                    margin-bottom: 5px;\n                }\n                .score-legend {\n                    font-size: 8px;\n                    margin-top: 5px;\n                }\n            </style>\n        </head>\n        <body>\n            ${content}\n        </body>\n        </html>\n    `;\n    \n    // Cordova/Mobil cihaz kontrolü\n    const isCordova = (typeof window.cordova !== 'undefined');\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    if (isCordova) {\n        // Cordova ortamında gerçek dosya kaydetme\n        const fileName = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.doc`;\n        \n        if (window.cordova && window.cordova.file) {\n            const blob = new Blob([fullContent], { type: 'application/msword' });\n            \n            // Android için Downloads klasörüne kaydet\n            window.resolveLocalFileSystemURL(cordova.file.externalDataDirectory, function(dirEntry) {\n                dirEntry.getFile(fileName, {create: true, exclusive: false}, function(fileEntry) {\n                    fileEntry.createWriter(function(fileWriter) {\n                        fileWriter.onwriteend = function() {\n                            alert('Rapor başarıyla kaydedildi!');\n                            // Dosyayı aç\n                            if (window.cordova.plugins && window.cordova.plugins.fileOpener2) {\n                                cordova.plugins.fileOpener2.open(\n                                    fileEntry.toURL(),\n                                    'application/msword',\n                                    {\n                                        error: function(e) {\n                                            alert('Dosya açılamadı. İndirilenler klasöründen bulabilirsiniz.');\n                                        },\n                                        success: function() {\n                                            // Dosya başarıyla açıldı\n                                        }\n                                    }\n                                );\n                            }\n                        };\n                        fileWriter.onerror = function(e) {\n                            alert('Dosya kaydedilemedi: ' + e.toString());\n                        };\n                        fileWriter.write(blob);\n                    });\n                }, function(e) {\n                    alert('Dosya oluşturulamadı: ' + e.toString());\n                });\n            }, function(e) {\n                alert('Klasöre erişilemedi: ' + e.toString());\n            });\n        } else {\n            // Cordova file plugin'i mevcut değilse fallback\n            const blob = new Blob([fullContent], { type: 'text/html' });\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.html`;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            setTimeout(() => {\n                document.body.removeChild(a);\n                window.URL.revokeObjectURL(url);\n            }, 100);\n            alert('Rapor HTML formatında indirildi!');\n        }\n    } else if (isMobile) {\n        // Mobil tarayıcı için HTML dosyası\n        const blob = new Blob([fullContent], { type: 'text/html' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.html`;\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        \n        try {\n            a.click();\n            setTimeout(() => {\n                document.body.removeChild(a);\n                window.URL.revokeObjectURL(url);\n            }, 100);\n            alert('Rapor HTML formatında indirildi!');\n        } catch (e) {\n            window.open(url, '_blank');\n            alert('Rapor yeni pencerede açıldı.');\n        }\n    } else {\n        // Masaüstünde Word dosyası olarak indir\n        const blob = new Blob([fullContent], { type: 'application/msword' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.doc`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n        alert('Rapor başarıyla indirildi!');\n    }\n}\n\n// Enter tuşu ile form gönderme\ndocument.addEventListener('DOMContentLoaded', async function() {\n    // Database + Local Storage'dan veriyi yükle\n    await loadAppState();\n    \n    // Enter tuşu event listeners\n    document.getElementById('school-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addSchool();\n    });\n    \n    document.getElementById('class-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addClass();\n    });\n    \n    document.getElementById('criteria-text').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addCriteria();\n    });\n    \n    document.getElementById('student-number').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            document.getElementById('student-name').focus();\n        }\n    });\n    \n    document.getElementById('student-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addStudent();\n    });\n    \n    // Sınav formu değişiklik dinleyicileri\n    document.getElementById('exam-name').addEventListener('input', updateExamSummary);\n    document.getElementById('exam-school').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-semester').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-class').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-grade').addEventListener('change', updateExamSummary);\n    \n    // İlk sayfa yüklemesi\n    navigateTo('anasayfa');\n});","size_bytes":43446},"okul-app/www/server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst port = process.env.PORT || 5000;\n\n// JSON file based storage (secure path outside public access)\nconst DATA_FILE = path.join(__dirname, '..', 'private_data.json');\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Only serve specific safe files (not the entire directory)\napp.use('/style.css', express.static(path.join(__dirname, 'style.css')));\napp.use('/script.js', express.static(path.join(__dirname, 'script.js')));\napp.use('/attached_assets', express.static(path.join(__dirname, 'attached_assets')));\n\n// Helper functions for JSON file operations\nfunction readSyncData() {\n  try {\n    if (fs.existsSync(DATA_FILE)) {\n      const data = fs.readFileSync(DATA_FILE, 'utf8');\n      return JSON.parse(data);\n    }\n    return {\n      schools: [],\n      criteriaByGrade: {5: [], 6: [], 7: [], 8: []},\n      exams: []\n    };\n  } catch (error) {\n    console.error('Error reading sync data:', error);\n    return {\n      schools: [],\n      criteriaByGrade: {5: [], 6: [], 7: [], 8: []},\n      exams: []\n    };\n  }\n}\n\nfunction writeSyncData(data) {\n  try {\n    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error writing sync data:', error);\n    return false;\n  }\n}\n\n// Sync API endpoints (JSON file based)\napp.post('/api/sync', async (req, res) => {\n  try {\n    const { dataType, data } = req.body;\n    \n    // Read current data\n    let currentData = readSyncData();\n    \n    // Update specific data type\n    if (dataType === 'schools') {\n      currentData.schools = data;\n    } else if (dataType === 'criteria') {\n      currentData.criteriaByGrade = data;\n    } else if (dataType === 'exams') {\n      currentData.exams = data;\n    }\n    \n    // Write updated data back\n    const success = writeSyncData(currentData);\n    \n    if (success) {\n      res.json({ success: true });\n      console.log(`Synced ${dataType} data successfully`);\n    } else {\n      res.status(500).json({ error: 'Write failed' });\n    }\n  } catch (error) {\n    console.error('Sync error:', error);\n    res.status(500).json({ error: 'Sync failed' });\n  }\n});\n\napp.get('/api/data', async (req, res) => {\n  try {\n    // Read data from JSON file\n    const data = readSyncData();\n    res.json(data);\n    console.log('Data loaded successfully');\n  } catch (error) {\n    console.error('Data load error:', error);\n    res.status(500).json({ error: 'Load failed' });\n  }\n});\n\n// Health check\napp.get('/api/health', async (req, res) => {\n  try {\n    // Check if we can read/write the sync file\n    const testData = readSyncData();\n    res.json({ status: 'healthy', storage: 'json-file' });\n  } catch (error) {\n    res.status(500).json({ status: 'unhealthy', storage: 'error' });\n  }\n});\n\n// Serve static files\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n\napp.listen(port, '0.0.0.0', () => {\n  console.log(`Server running on port ${port}`);\n});","size_bytes":3074},"okul-app/www/style.css":{"content":"/* Genel ayarlar */\n* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n    width: 100%;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n        sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    \n    /* Arkaplan resmi */\n    background-image: url('arkaplan.jpg');\n    background-size: cover;\n    background-position: center;\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n    \n    /* Şeffaf siyah overlay */\n    background-color: rgba(0, 0, 0, 0.4);\n    background-blend-mode: multiply;\n    \n    min-height: 100vh;\n    overflow: hidden;\n}\n\n/* Ana container - ekranın %80'ini kullan */\n#app {\n    width: 80%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n    min-height: 100vh;\n}\n\n/* Sayfa stilleri */\n.page {\n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(10px);\n    border-radius: 12px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\n    padding: 40px;\n    min-height: 600px;\n    margin: 20px 0;\n    color: white;\n}\n\n.page-title {\n    font-size: 22px;\n    font-weight: bold;\n    margin-bottom: 30px;\n    text-align: center;\n    color: white;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);\n}\n\n/* Görünürlük kontrolleri */\n.hidden {\n    display: none !important;\n}\n\n/* Buton stilleri */\n.button {\n    display: block;\n    width: 100%;\n    max-width: 350px;\n    margin: 20px auto;\n    padding: 18px 24px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border: none;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-align: center;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n}\n\n.button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n.button:active {\n    transform: translateY(-1px);\n}\n\n.back-button {\n    margin-bottom: 20px;\n    padding: 12px 24px;\n    font-size: 16px;\n    color: #667eea;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #667eea;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(5px);\n}\n\n.back-button:hover {\n    background: #667eea;\n    color: white;\n}\n\n/* Tab sistemi */\n.tabs {\n    display: flex;\n    margin-bottom: 30px;\n    border-bottom: 2px solid #ddd;\n    background: rgba(248, 249, 250, 0.8);\n    border-radius: 8px 8px 0 0;\n}\n\n.tab {\n    flex: 1;\n    padding: 15px 24px;\n    cursor: pointer;\n    border: none;\n    background: transparent;\n    font-size: 16px;\n    font-weight: bold;\n    color: #667eea;\n    border-bottom: 3px solid transparent;\n    transition: all 0.3s ease;\n}\n\n.tab.active {\n    color: #333;\n    border-bottom-color: #667eea;\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.tab:hover {\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.tab-content {\n    animation: fadeIn 0.3s ease;\n}\n\n/* Form stilleri */\n.form-container, .form-section {\n    background: rgba(0, 0, 0, 0.4);\n    padding: 25px;\n    border-radius: 10px;\n    margin: 25px 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.form-section h3 {\n    margin-top: 0;\n    margin-bottom: 20px;\n    color: white;\n    font-size: 15px;\n}\n\n.input-group {\n    display: flex;\n    gap: 12px;\n    margin-bottom: 20px;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n.text-input, .select-input {\n    flex: 1;\n    min-width: 200px;\n    padding: 14px;\n    font-size: 16px;\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n    background: rgba(255, 255, 255, 0.9);\n}\n\n.text-input:focus, .select-input:focus {\n    outline: none;\n    border-color: #667eea;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.add-button {\n    padding: 14px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: #28a745;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);\n}\n\n.add-button:hover {\n    background: #218838;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);\n}\n\n/* Liste stilleri */\n.list-container {\n    margin-top: 30px;\n}\n\n.list-title {\n    font-size: 18px;\n    font-weight: bold;\n    margin-bottom: 20px;\n    color: white;\n    padding: 10px 0;\n    border-bottom: 2px solid #667eea;\n}\n\n.item-list {\n    list-style: none;\n    padding: 0;\n}\n\n.list-item, .school-item, .class-item, .student-item {\n    background: rgba(255, 255, 255, 0.08);\n    margin: 12px 0;\n    padding: 18px;\n    border-radius: 8px;\n    border-left: 4px solid #667eea;\n    font-size: 16px;\n    color: white;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n    transition: all 0.3s ease;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.list-item:hover, .school-item:hover, .class-item:hover, .student-item:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n/* Okul ve sınıf özel stilleri */\n.school-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 15px;\n}\n\n.school-name {\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n}\n\n.class-count, .student-count {\n    color: rgba(255, 255, 255, 0.7);\n    font-size: 14px;\n    margin-top: 5px;\n}\n\n.classes-container {\n    margin-top: 15px;\n    padding-left: 20px;\n    border-left: 2px solid #e9ecef;\n}\n\n.class-item {\n    background: rgba(255, 255, 255, 0.15);\n    margin: 8px 0;\n    padding: 12px 15px;\n    border-radius: 6px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-left: 3px solid #6c757d;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.class-name {\n    font-weight: bold;\n    color: white;\n}\n\n/* Aksiyon butonları */\n.action-buttons {\n    display: flex;\n    gap: 8px;\n    flex-wrap: wrap;\n}\n\n.small-button {\n    padding: 6px 12px;\n    font-size: 12px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n\n.view-button {\n    background: #17a2b8;\n    color: white;\n}\n\n.view-button:hover {\n    background: #138496;\n    transform: translateY(-1px);\n}\n\n.delete-button {\n    background: #dc3545;\n    color: white;\n}\n\n.delete-button:hover {\n    background: #c82333;\n    transform: translateY(-1px);\n}\n\n/* Sınıf seviyeleri butonları */\n.grade-buttons {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.grade-button {\n    padding: 25px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);\n    border: none;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);\n}\n\n.grade-button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);\n}\n\n/* Dosya yükleme */\n.file-upload {\n    margin: 15px 0;\n    padding: 20px;\n    border: 2px dashed #ddd;\n    border-radius: 8px;\n    text-align: center;\n    background: rgba(248, 249, 250, 0.5);\n    transition: all 0.3s ease;\n}\n\n.file-upload:hover {\n    border-color: #667eea;\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.file-input {\n    margin: 10px 0;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n    background: white;\n    width: 100%;\n    max-width: 300px;\n}\n\n/* Öğrenci özel stilleri */\n.student-item {\n    background: rgba(255, 193, 7, 0.2);\n    border-left: 4px solid #ffc107;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid rgba(255, 193, 7, 0.3);\n}\n\n.student-info {\n    display: flex;\n    gap: 20px;\n    align-items: center;\n}\n\n.student-number {\n    font-weight: bold;\n    color: #ffc107;\n    background: rgba(255, 193, 7, 0.3);\n    padding: 4px 8px;\n    border-radius: 4px;\n}\n\n.student-name {\n    color: white;\n    font-size: 16px;\n}\n\n/* Kriter seçimi */\n.criteria-selection {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 12px;\n    margin: 15px 0;\n}\n\n.criteria-checkbox {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 12px 16px;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.criteria-checkbox:hover {\n    background: rgba(102, 126, 234, 0.1);\n    border-color: #667eea;\n}\n\n.criteria-checkbox.selected {\n    background: rgba(102, 126, 234, 0.2);\n    border-color: #667eea;\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n/* Sınav özeti */\n.exam-summary {\n    background: rgba(40, 167, 69, 0.2);\n    border: 2px solid rgba(40, 167, 69, 0.5);\n    border-radius: 8px;\n    padding: 25px;\n    margin: 25px 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n}\n\n.exam-summary h3 {\n    color: #28a745;\n    margin-bottom: 15px;\n}\n\n.exam-summary p {\n    margin: 8px 0;\n    color: white;\n}\n\n/* Animasyonlar */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.page {\n    animation: fadeIn 0.5s ease;\n}\n\n/* Scrollbar özel ayarları */\n.page.scrollable {\n    overflow-y: auto;\n    max-height: calc(100vh - 40px);\n}\n\n/* Compact mode - okul-ekle ve sinif-yonetimi için */\nbody.compact #app {\n    padding: 4px;\n}\n\nbody.compact .page {\n    margin: 0;\n    padding: 8px;\n    min-height: unset;\n    height: calc(100vh - 8px);\n    overflow: hidden;\n}\n\nbody.compact .form-container,\nbody.compact .form-section {\n    padding: 8px;\n    margin: 4px 0;\n}\n\nbody.compact .list-title {\n    font-size: 14px;\n    margin: 4px 0 6px;\n    padding: 4px 0;\n}\n\nbody.compact .school-item,\nbody.compact .class-item,\nbody.compact .student-item {\n    margin: 3px 0;\n    padding: 6px 10px;\n    font-size: 13px;\n    line-height: 1.2;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    border-width: 1px;\n}\n\n/* Sınıf listesi grid layout - 3 sıra yan yana - Güçlü selector */\n#classes-list {\n    display: grid !important;\n    grid-template-columns: repeat(3, 1fr) !important;\n    gap: 6px !important;\n    margin-top: 8px !important;\n}\n\n#classes-list .class-item {\n    margin: 0 !important;\n    padding: 4px 6px !important;\n    font-size: 11px !important;\n    display: flex !important;\n    flex-direction: column !important;\n    min-height: 45px !important;\n    max-width: none !important;\n    width: 100% !important;\n    line-height: 1.1 !important;\n}\n\n/* Üst satır: Sınıf adı + Butonlar yan yana */\n#classes-list .class-item > div:first-child {\n    display: flex !important;\n    justify-content: space-between !important;\n    align-items: center !important;\n    margin-bottom: 3px !important;\n}\n\n#classes-list .class-name {\n    font-size: 11px !important;\n    font-weight: bold !important;\n    margin: 0 !important;\n    line-height: 1.1 !important;\n    color: white !important;\n    flex-shrink: 0 !important;\n}\n\n#classes-list .action-buttons {\n    gap: 2px !important;\n    flex-direction: row !important;\n    align-items: center !important;\n    flex-shrink: 0 !important;\n}\n\n#classes-list .small-button {\n    padding: 1px 4px !important;\n    font-size: 8px !important;\n    line-height: 1 !important;\n    margin: 0 !important;\n    white-space: nowrap !important;\n    min-width: auto !important;\n}\n\n/* Alt satır: Öğrenci sayısı */\n#classes-list .student-count {\n    font-size: 9px !important;\n    margin: 0 !important;\n    padding: 0 !important;\n    color: rgba(255, 255, 255, 0.6) !important;\n    text-align: left !important;\n    line-height: 1 !important;\n}\n\nbody.compact .school-header {\n    margin-bottom: 8px;\n}\n\nbody.compact .school-name {\n    font-size: 14px;\n}\n\nbody.compact .class-count,\nbody.compact .student-count {\n    font-size: 12px;\n    margin-top: 2px;\n}\n\nbody.compact .action-buttons {\n    gap: 3px;\n}\n\nbody.compact .small-button {\n    padding: 2px 6px;\n    font-size: 10px;\n    line-height: 1.2;\n}\n\n/* Okul listesi için butonlar normal boyutta kalsın */\nbody.compact #schools-list .small-button {\n    padding: 3px 8px;\n    font-size: 10px;\n}\n\n/* Sınıf yönetimi sayfası için ek optimizasyonlar */\n#sinif-yonetimi .form-section {\n    padding: 6px !important;\n    margin: 4px 0 !important;\n}\n\n#sinif-yonetimi .list-title {\n    font-size: 13px !important;\n    margin: 4px 0 6px !important;\n    padding: 2px 0 !important;\n}\n\n/* Yeni Sınıf Ekle alanını daralt */\n#sinif-yonetimi .form-section h3 {\n    margin: 0 0 8px 0 !important;\n    font-size: 13px !important;\n}\n\n#sinif-yonetimi .input-group {\n    margin-bottom: 6px !important;\n    gap: 4px !important;\n}\n\n#sinif-yonetimi .text-input {\n    padding: 4px 6px !important;\n    font-size: 11px !important;\n}\n\n#sinif-yonetimi .primary-button {\n    padding: 4px 8px !important;\n    font-size: 11px !important;\n}\n\nbody.compact .input-group {\n    gap: 6px;\n    margin-bottom: 8px;\n}\n\nbody.compact .text-input,\nbody.compact .select-input {\n    font-size: 13px;\n    padding: 6px;\n}\n\nbody.compact .primary-button {\n    padding: 6px 12px;\n    font-size: 12px;\n}\n\n.page.scrollable::-webkit-scrollbar {\n    width: 8px;\n}\n\n.page.scrollable::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 4px;\n}\n\n.page.scrollable::-webkit-scrollbar-thumb {\n    background: rgba(102, 126, 234, 0.6);\n    border-radius: 4px;\n}\n\n.page.scrollable::-webkit-scrollbar-thumb:hover {\n    background: rgba(102, 126, 234, 0.8);\n}\n\n/* Compact mode'da scrollbar tamamen gizle */\nbody.compact .page {\n    overflow: hidden !important;\n}\n\nbody.compact {\n    overflow: hidden;\n}\n\n/* Genel sayfalarda scrollbar gizleme */\nbody:not(.allow-scroll) {\n    overflow: hidden;\n}\n\n/* Puanlama tablosu stilleri */\n.scoring-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 20px 0;\n    background: rgba(255, 255, 255, 0.95);\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.scoring-table th,\n.scoring-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n    color: #333;\n}\n\n.scoring-table th {\n    background: #667eea;\n    color: white;\n    font-weight: bold;\n    font-size: 14px;\n}\n\n.scoring-table .student-name {\n    text-align: left;\n    font-weight: bold;\n}\n\n.scoring-table .student-number {\n    font-weight: bold;\n    color: #667eea;\n}\n\n.score-buttons {\n    display: flex;\n    gap: 5px;\n    justify-content: center;\n}\n\n.score-btn {\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    border: 2px solid;\n    background: white;\n    cursor: pointer;\n    font-weight: bold;\n    font-size: 12px;\n    transition: all 0.3s ease;\n}\n\n.score-btn.g {\n    border-color: #28a745;\n    color: #28a745;\n}\n\n.score-btn.g.selected {\n    background: #28a745;\n    color: white;\n}\n\n.score-btn.iyi {\n    border-color: #ffc107;\n    color: #ffc107;\n}\n\n.score-btn.iyi.selected {\n    background: #ffc107;\n    color: white;\n}\n\n.score-btn.ci {\n    border-color: #dc3545;\n    color: #dc3545;\n}\n\n.score-btn.ci.selected {\n    background: #dc3545;\n    color: white;\n}\n\n.score-btn:hover {\n    transform: scale(1.1);\n}\n\n.total-score {\n    font-weight: bold;\n    font-size: 16px;\n    color: #333;\n}\n\n.criteria-with-deadline {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    background: rgba(255, 255, 255, 0.1);\n    padding: 15px;\n    border-radius: 8px;\n    margin-bottom: 15px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.criteria-checkbox-with-date {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 12px;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.criteria-checkbox-with-date:hover {\n    background: rgba(102, 126, 234, 0.1);\n    border-color: #667eea;\n}\n\n.criteria-checkbox-with-date.selected {\n    background: rgba(102, 126, 234, 0.2);\n    border-color: #667eea;\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n.date-input {\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    font-size: 14px;\n    margin-left: auto;\n}\n\n/* Responsive tasarım */\n@media (max-width: 768px) {\n    #app {\n        width: 95%;\n        padding: 10px;\n    }\n    \n    .page {\n        padding: 20px;\n        margin: 10px 0;\n    }\n    \n    .input-group {\n        flex-direction: column;\n        align-items: stretch;\n    }\n    \n    .text-input, .select-input {\n        min-width: auto;\n        margin-bottom: 10px;\n    }\n    \n    .grade-buttons {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .school-header, .action-buttons {\n        flex-direction: column;\n        gap: 10px;\n        align-items: flex-start;\n    }\n    \n    .student-item {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 10px;\n    }\n    \n    .criteria-selection {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Rapor tablosu kompakt stilleri */\n.report-table {\n    width: 100%;\n    border-collapse: collapse;\n    font-family: Arial, sans-serif;\n    font-size: 8px !important;\n}\n\n.report-title {\n    text-align: center;\n    margin-bottom: 10px;\n    font-weight: bold;\n    font-size: 10px !important;\n}\n\n.main-header, .header-cell, .scoring-cell {\n    border: 1px solid #000 !important;\n    padding: 1px !important;\n    text-align: center !important;\n    vertical-align: middle !important;\n    font-size: 7px !important;\n    background-color: #f0f0f0;\n}\n\n.number-cell, .total-cell {\n    border: 1px solid #000 !important;\n    padding: 1px !important;\n    text-align: center !important;\n    font-size: 7px !important;\n}\n\n.name-cell, .score-cell {\n    border: 1px solid #000 !important;\n    padding: 1px !important;\n    font-size: 7px !important;\n}\n\n.name-cell {\n    text-align: left !important;\n    max-width: 80px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.score-marks {\n    display: flex !important;\n    justify-content: space-around !important;\n    font-size: 6px !important;\n}\n\n.score-legend {\n    margin-top: 5px !important;\n    font-size: 6px !important;\n}\n\n/* Küçük ekranlar için */\n@media (max-width: 480px) {\n    .page-title {\n        font-size: 24px;\n    }\n    \n    .button {\n        font-size: 18px;\n        padding: 15px 20px;\n    }\n    \n    .tabs {\n        flex-direction: column;\n    }\n    \n    .tab {\n        padding: 12px;\n        text-align: center;\n    }\n}","size_bytes":18581},"okul-app/plugins/cordova-plugin-network-information/CONTRIBUTING.md":{"content":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n\n# Contributing to Apache Cordova\n\nAnyone can contribute to Cordova. And we need your contributions.\n\nThere are multiple ways to contribute: report bugs, improve the docs, and\ncontribute code.\n\nFor instructions on this, start with the \n[contribution overview](http://cordova.apache.org/contribute/).\n\nThe details are explained there, but the important items are:\n - Sign and submit an Apache ICLA (Contributor License Agreement).\n - Have a Jira issue open that corresponds to your contribution.\n - Run the tests so your patch doesn't break existing functionality.\n\nWe look forward to your contributions!\n","size_bytes":1401},"okul-app/plugins/cordova-plugin-network-information/README.md":{"content":"---\ntitle: Network Information\ndescription: Get information about wireless connectivity.\n---\n<!--\n# license: Licensed to the Apache Software Foundation (ASF) under one\n#         or more contributor license agreements.  See the NOTICE file\n#         distributed with this work for additional information\n#         regarding copyright ownership.  The ASF licenses this file\n#         to you under the Apache License, Version 2.0 (the\n#         \"License\"); you may not use this file except in compliance\n#         with the License.  You may obtain a copy of the License at\n#\n#           http://www.apache.org/licenses/LICENSE-2.0\n#\n#         Unless required by applicable law or agreed to in writing,\n#         software distributed under the License is distributed on an\n#         \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#         KIND, either express or implied.  See the License for the\n#         specific language governing permissions and limitations\n#         under the License.\n-->\n\n|AppVeyor|Travis CI|\n|:-:|:-:|\n|[![Build status](https://ci.appveyor.com/api/projects/status/github/apache/cordova-plugin-network-information?branch=master)](https://ci.appveyor.com/project/ApacheSoftwareFoundation/cordova-plugin-network-information)|[![Build Status](https://travis-ci.org/apache/cordova-plugin-network-information.svg?branch=master)](https://travis-ci.org/apache/cordova-plugin-network-information)|\n\n# cordova-plugin-network-information\n\n\nThis plugin provides an implementation of an old version of the\n[Network Information API](http://www.w3.org/TR/2011/WD-netinfo-api-20110607/).\nIt provides information about the device's cellular and\nwifi connection, and whether the device has an internet connection.\n\n> To get a few ideas how to use the plugin, check out the [sample](#sample) at the bottom of this page or go straight to the [reference](#reference) content.\n\n## Installation\n\n    cordova plugin add cordova-plugin-network-information\n\n## Supported Platforms\n\n- Android\n- Browser\n- iOS\n- Windows\n\n# Connection\n\n> The `connection` object, exposed via `navigator.connection`,  provides information about the device's cellular and wifi connection.\n\n## Properties\n\n- connection.type\n\n## Constants\n\n- Connection.UNKNOWN\n- Connection.ETHERNET\n- Connection.WIFI\n- Connection.CELL_2G\n- Connection.CELL_3G\n- Connection.CELL_4G\n- Connection.CELL\n- Connection.NONE\n\n## connection.type\n\nThis property offers a fast way to determine the device's network\nconnection state, and type of connection.\n\n### Quick Example\n\n```js\nfunction checkConnection() {\n    var networkState = navigator.connection.type;\n\n    var states = {};\n    states[Connection.UNKNOWN]  = 'Unknown connection';\n    states[Connection.ETHERNET] = 'Ethernet connection';\n    states[Connection.WIFI]     = 'WiFi connection';\n    states[Connection.CELL_2G]  = 'Cell 2G connection';\n    states[Connection.CELL_3G]  = 'Cell 3G connection';\n    states[Connection.CELL_4G]  = 'Cell 4G connection';\n    states[Connection.CELL]     = 'Cell generic connection';\n    states[Connection.NONE]     = 'No network connection';\n\n    alert('Connection type: ' + states[networkState]);\n}\n\ncheckConnection();\n```\n\n### API Change\n\nUntil Cordova 2.3.0, the `Connection` object was accessed via\n`navigator.network.connection`, after which it was changed to\n`navigator.connection` to match the W3C specification.  It's still\navailable at its original location, but is deprecated and will\neventually be removed.\n\n### iOS Quirks\n\n- <iOS7 can't detect the type of cellular network connection.\n    - `navigator.connection.type` is set to `Connection.CELL` for all cellular data.\n\n### Windows Quirks\n\n- When running in the Phone 8.1 emulator, always detects `navigator.connection.type` as `Connection.ETHERNET`.\n\n### Browser Quirks\n\n- Browser can't detect the type of network connection.\n`navigator.connection.type` is always set to `Connection.UNKNOWN` when online.\n\n# Network-related Events\n\n## offline\n\nThe event fires when an application goes offline, and the device is\nnot connected to the Internet.\n\n    document.addEventListener(\"offline\", yourCallbackFunction, false);\n\n### Details\n\nThe `offline` event fires when a previously connected device loses a\nnetwork connection so that an application can no longer access the\nInternet.  It relies on the same information as the Connection API,\nand fires when the value of `connection.type` becomes `NONE`.\n\nApplications typically should use `document.addEventListener` to\nattach an event listener once the `deviceready` event fires.\n\n### Quick Example\n\n```js\ndocument.addEventListener(\"offline\", onOffline, false);\n\nfunction onOffline() {\n    // Handle the offline event\n}\n```\n\n### iOS Quirks\n\nDuring initial startup, the first offline event (if applicable) takes at least a second to fire.\n\n## online\n\nThis event fires when an application goes online, and the device\nbecomes connected to the Internet.\n\n    document.addEventListener(\"online\", yourCallbackFunction, false);\n\n### Details\n\nThe `online` event fires when a previously unconnected device receives\na network connection to allow an application access to the Internet.\nIt relies on the same information as the Connection API,\nand fires when the `connection.type` changes from `NONE` to any other\nvalue.\n\nApplications typically should use `document.addEventListener` to\nattach an event listener once the `deviceready` event fires.\n\n### Quick Example\n\n```js\ndocument.addEventListener(\"online\", onOnline, false);\n\nfunction onOnline() {\n    // Handle the online event\n}\n```\n\n### iOS Quirks\n\nDuring initial startup, the first `online` event (if applicable) takes\nat least a second to fire, prior to which `connection.type` is\n`UNKNOWN`.\n\n## Sample: Upload a File Depending on your Network State <a name=\"sample\"></a>\n\nThe code examples in this section show examples of changing app behavior using the online and offline events and your network connection status.\n\nTo start with, create a new FileEntry object (data.txt) to use for sample data. Call this function from the `deviceready` handler.\n\n>*Note* This code example requires the File plugin.\n\n```js\nvar dataFileEntry;\n\nfunction createSomeData() {\n\n    window.requestFileSystem(window.TEMPORARY, 5 * 1024 * 1024, function (fs) {\n\n        console.log('file system open: ' + fs.name);\n        // Creates a new file or returns an existing file.\n        fs.root.getFile(\"data.txt\", { create: true, exclusive: false }, function (fileEntry) {\n\n          dataFileEntry = fileEntry;\n\n        }, onErrorCreateFile);\n\n    }, onErrorLoadFs);\n}\n```\n\nNext, add listeners for the online and offline events in the `deviceready` handler.\n\n```js\ndocument.addEventListener(\"offline\", onOffline, false);\ndocument.addEventListener(\"online\", onOnline, false);\n```\n\nThe app's `onOnline` function handles the online event. In the event handler, check the current network state. In this app, treat any connection type as good except Connection.NONE. If you have a connection, you try to upload a file.\n\n```js\nfunction onOnline() {\n    // Handle the online event\n    var networkState = navigator.connection.type;\n\n    if (networkState !== Connection.NONE) {\n        if (dataFileEntry) {\n            tryToUploadFile();\n        }\n    }\n    display('Connection type: ' + networkState);\n}\n```\n\nWhen the online event fires in the preceding code, call the app's `tryToUploadFile` function.\n\nIf the FileTransfer object's upload function fails, call the app's `offlineWrite` function to save the current data somewhere.\n\n>*Note* This example requires the FileTransfer plugin.\n\n```js\nfunction tryToUploadFile() {\n    // !! Assumes variable fileURL contains a valid URL to a text file on the device,\n    var fileURL = getDataFileEntry().toURL();\n\n    var success = function (r) {\n        console.log(\"Response = \" + r.response);\n        display(\"Uploaded. Response: \" + r.response);\n    }\n\n    var fail = function (error) {\n        console.log(\"An error has occurred: Code = \" + error.code);\n        offlineWrite(\"Failed to upload: some offline data\");\n    }\n\n    var options = new FileUploadOptions();\n    options.fileKey = \"file\";\n    options.fileName = fileURL.substr(fileURL.lastIndexOf('/') + 1);\n    options.mimeType = \"text/plain\";\n\n    var ft = new FileTransfer();\n    // Make sure you add the domain of your server URL to the\n    // Content-Security-Policy <meta> element in index.html.\n    ft.upload(fileURL, encodeURI(SERVER), success, fail, options);\n};\n```\n\nHere is the code for the `offlineWrite` function.\n\n>*Note* This code examples requires the File plugin.\n\n```js\nfunction offlineWrite(offlineData) {\n    // Create a FileWriter object for our FileEntry.\n    dataFileEntry.createWriter(function (fileWriter) {\n\n        fileWriter.onwriteend = function () {\n            console.log(\"Successful file write...\");\n            display(offlineData);\n        };\n\n        fileWriter.onerror = function (e) {\n            console.log(\"Failed file write: \" + e.toString());\n        };\n\n        fileWriter.write(offlineData);\n    });\n}\n```\n\nIf the offline event occurs, just do something like notify the user (for this example, just log it).\n\n```js\nfunction onOffline() {\n    // Handle the offline event\n    console.log(\"lost connection\");\n}\n```\n \n[Apache Cordova issue tracker]: https://issues.apache.org/jira/issues/?jql=project%20%3D%20CB%20AND%20status%20in%20%28Open%2C%20%22In%20Progress%22%2C%20Reopened%29%20AND%20resolution%20%3D%20Unresolved%20AND%20component%20%3D%20%22Plugin%20Network%20Information%22%20ORDER%20BY%20priority%20DESC%2C%20summary%20ASC%2C%20updatedDate%20DESC\n","size_bytes":9569},"okul-app/plugins/cordova-plugin-network-information/RELEASENOTES.md":{"content":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n# \n# http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# Release Notes\n\n### 2.0.2 (Jun 19, 2019)\n\n-   fix(android): Fix bug [cordova-plugin-network-information] connection info is not reliable on Android 6 ([#74](https://github.com/apache/cordova-plugin-network-information/issues/74)) ([`db0d4b5`](https://github.com/apache/cordova-plugin-network-information/commit/db0d4b5), [`9a45d63`](https://github.com/apache/cordova-plugin-network-information/commit/9a45d63), [`60ab69f`](https://github.com/apache/cordova-plugin-network-information/commit/60ab69f), [`acc02f2`](https://github.com/apache/cordova-plugin-network-information/commit/acc02f2), [`0869800`](https://github.com/apache/cordova-plugin-network-information/commit/0869800), [`394452a`](https://github.com/apache/cordova-plugin-network-information/commit/394452a), [`cafdd67`](https://github.com/apache/cordova-plugin-network-information/commit/cafdd67))\n-   chore(release): fix repo and issue link ([`9ec1e21`](https://github.com/apache/cordova-plugin-network-information/commit/9ec1e21))\n-   docs: remove outdated translations ([`24e50f8`](https://github.com/apache/cordova-plugin-network-information/commit/24e50f8))\n-   build: add .npmignore to remove unneeded files from npm package ([`d31e135`](https://github.com/apache/cordova-plugin-network-information/commit/d31e135))\n-   build: add .gitattributes to force LF (instead of possible CRLF on Windows) ([`f35341e`](https://github.com/apache/cordova-plugin-network-information/commit/f35341e))\n-   ci(travis): Update Travis CI configuration for new paramedic ([#89](https://github.com/apache/cordova-plugin-network-information/issues/89)) ([`102f757`](https://github.com/apache/cordova-plugin-network-information/commit/102f757))\n-   ci(travis): add android-28 ([`27b0e39`](https://github.com/apache/cordova-plugin-network-information/commit/27b0e39))\n-   ci: drop Node.js v4 support ([#87](https://github.com/apache/cordova-plugin-network-information/issues/87)) ([`5158556`](https://github.com/apache/cordova-plugin-network-information/commit/5158556))\n-   chore(github): Add or update GitHub pull request and issue template ([`0cd2771`](https://github.com/apache/cordova-plugin-network-information/commit/0cd2771))\n-   docs: remove JIRA link ([`0796cf9`](https://github.com/apache/cordova-plugin-network-information/commit/0796cf9))\n-   ci: also accept terms for android sdk `android-27` ([`2cde33a`](https://github.com/apache/cordova-plugin-network-information/commit/2cde33a))\n-   ci(travis): CB-13757: Add build-tools-26.0.2 to travis ([`5b0933d`](https://github.com/apache/cordova-plugin-network-information/commit/5b0933d), [`e816db4`](https://github.com/apache/cordova-plugin-network-information/commit/e816db4))\n-   chore: Fix release notes ([#61](https://github.com/apache/cordova-plugin-network-information/issues/61)) ([`629a6ab`](https://github.com/apache/cordova-plugin-network-information/commit/629a6ab))\n\n### 2.0.1 (Dec 27, 2017)\n* [CB-13708](https://issues.apache.org/jira/browse/CB-13708) Fix to allow 2.0.0 version install (#60)\n\n### 2.0.0 (Dec 15, 2017)\n* [CB-13663](https://issues.apache.org/jira/browse/CB-13663) : Removed deprecated platforms\n\n### 1.3.4 (Nov 06, 2017)\n* [CB-12751](https://issues.apache.org/jira/browse/CB-12751) (ios) Fix connection type when airplane mode is on\n* [CB-13299](https://issues.apache.org/jira/browse/CB-13299) (CI) Fix **Android** builds\n* [CB-12895](https://issues.apache.org/jira/browse/CB-12895) added `eslint` and removed `jshint`\n* [CB-13028](https://issues.apache.org/jira/browse/CB-13028) (CI) **Browser** builds on Travis and AppVeyor\n* [CB-12847](https://issues.apache.org/jira/browse/CB-12847) added `bugs` entry to `package.json`.\n\n### 1.3.3 (Apr 27, 2017)\n* [CB-12622](https://issues.apache.org/jira/browse/CB-12622) Add **Android 6.0** build badge to `README`\n* [CB-12685](https://issues.apache.org/jira/browse/CB-12685) added `package.json` to tests folder\n\n### 1.3.2 (Feb 28, 2017)\n* [CB-12369](https://issues.apache.org/jira/browse/CB-12369) Add plugin typings from `DefinitelyTyped` \n* [CB-12363](https://issues.apache.org/jira/browse/CB-12363) Added build badges for **iOS 9.3** and **iOS 10.0** \n* [CB-11838](https://issues.apache.org/jira/browse/CB-11838) **iOS:** Unregister callback function at the right timing.\n* [CB-12230](https://issues.apache.org/jira/browse/CB-12230) Removed **Windows 8.1** build badges\n\n### 1.3.1 (Dec 07, 2016)\n* [CB-12224](https://issues.apache.org/jira/browse/CB-12224) Updated version and RELEASENOTES.md for release 1.3.1\n* [CB-11230](https://issues.apache.org/jira/browse/CB-11230) [CB-11505](https://issues.apache.org/jira/browse/CB-11505) iOS: Add compatibility with IPv6\n* [CB-11917](https://issues.apache.org/jira/browse/CB-11917) - Remove pull request template checklist item: \"iCLA has been submitted…\"\n* [CB-11832](https://issues.apache.org/jira/browse/CB-11832) Incremented plugin version.\n\n### 1.3.0 (Sep 08, 2016)\n* [CB-11795](https://issues.apache.org/jira/browse/CB-11795) Add 'protective' entry to cordovaDependencies\n* [CB-11734](https://issues.apache.org/jira/browse/CB-11734) Network Plugin uses `Android Log class` and not `Cordova LOG class`\n* [CB-11300](https://issues.apache.org/jira/browse/CB-11300) (**android**) Recognize `2G`, `3G` and `4G` network connection subtype names\n* Update `NetworkManager.java`\n* Detection of Ethernet Network Type on **Android**\n* fixed two potential memory leaks when doing Analyze on **iOS 9**\n* [CB-11384](https://issues.apache.org/jira/browse/CB-11384) **android**: Does not pass sonarqube scan\n* Add badges for paramedic builds on Jenkins\n* Add pull request template.\n* Readme: Add fenced code blocks with langauage hints\n* [CB-10996](https://issues.apache.org/jira/browse/CB-10996) Adding front matter to README.md\n\n### 1.2.1 (Apr 15, 2016)\n* [CB-10763](https://issues.apache.org/jira/browse/CB-10763) Remove emoji in `cordova-plugin-network-information`\n* [CB-10636](https://issues.apache.org/jira/browse/CB-10636) Add `JSHint` for plugins\n\n### 1.2.0 (Jan 15, 2016)\n* Adding `CoreTelephony` to `plugin.xml`\n* Adding notification for `CT radio` information\n* Adding `CT radio` information\n* [CB-10160](https://issues.apache.org/jira/browse/CB-10160) Fixed the case mismatch issue\n\n### 1.1.0 (Nov 18, 2015)\n* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) Updated `RELEASENOTES` to be newest to oldest\n* Fixing contribute link.\n* These notifications are objects so their address always evaluates to true.\n* Update `NetworkManager.java`\n* [CB-9542](https://issues.apache.org/jira/browse/CB-9542) `Browser Proxy` not defined correctly\n* Solved `toLowerCase` issue with `Locale.US`\n\n### 1.0.1 (Jun 17, 2015)\n* Adding .ratignore file.\n* [CB-9128](https://issues.apache.org/jira/browse/CB-9128) cordova-plugin-network-information documentation translation: cordova-plugin-network-information\n* fix npm md issue\n\n### 1.0.0 (Apr 15, 2015)\n* [CB-8746](https://issues.apache.org/jira/browse/CB-8746) gave plugin major version bump\n* [CB-8683](https://issues.apache.org/jira/browse/CB-8683) changed plugin-id to pacakge-name\n* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) properly updated translated docs to use new id\n* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) updated translated docs to use new id\n* [CB-8185](https://issues.apache.org/jira/browse/CB-8185) Fixes typo in `cordova.platformId`\n* Use TRAVIS_BUILD_DIR, install paramedic by npm\n* [CB-8185](https://issues.apache.org/jira/browse/CB-8185) Use `navigator.onLine` as connection information source on browser platform\n* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) Updated Readme\n* [CB-8659](https://issues.apache.org/jira/browse/CB-8659): ios: 4.0.x Compatibility: Remove use of initWebView method\n* [CB-8573](https://issues.apache.org/jira/browse/CB-8573) Integrate TravisCI\n* [CB-8438](https://issues.apache.org/jira/browse/CB-8438) cordova-plugin-network-information documentation translation: cordova-plugin-network-information\n* [CB-8538](https://issues.apache.org/jira/browse/CB-8538) Added package.json file\n\n### 0.2.15 (Feb 04, 2015)\n* [CB-8384](https://issues.apache.org/jira/browse/CB-8384) Network status change support on Windows\n* [CB-8384](https://issues.apache.org/jira/browse/CB-8384) Fixes the way we detect online status on Windows\n* [CB-8384](https://issues.apache.org/jira/browse/CB-8384) Add Windows platform quirks\n* [CB-8384](https://issues.apache.org/jira/browse/CB-8384) Add Windows section to Network Information plugin\n\n### 0.2.14 (Dec 02, 2014)\n* [CB-7976](https://issues.apache.org/jira/browse/CB-7976) **Android**: Use webView's context rather than Activity's context for intent receiver\n* [CB-7700](https://issues.apache.org/jira/browse/CB-7700) cordova-plugin-network-information documentation translation: cordova-plugin-network-information\n\n### 0.2.13 (Oct 03, 2014)\n* [CB-7595](https://issues.apache.org/jira/browse/CB-7595): Android L changes the type from Mobile to Cellular, I'm pretty sure this isn't documented\n\n### 0.2.12 (Sep 17, 2014)\n* [CB-7471](https://issues.apache.org/jira/browse/CB-7471) cordova-plugin-network-information documentation translation\n* Fix network information type exception on fxos 2\n* Added support for the browser\n* [CB-6724](https://issues.apache.org/jira/browse/CB-6724) added documentation for manual tests\n* remove reference to test assets, they are optional\n* Renamed test dir and added nested plugin.xml\n* [CB-6964](https://issues.apache.org/jira/browse/CB-6964) ported manual tests\n* Port network tests to plugin-test-framework\n* Fix naviagtor typo\n\n### 0.2.11 (Aug 06, 2014)\n* **FFOS** update NetworkProxy.js\n* [CB-6127](https://issues.apache.org/jira/browse/CB-6127) Updated translations for docs\n* [CB-7019](https://issues.apache.org/jira/browse/CB-7019) Updated version and RELEASENOTES.md for release 0.2.10\n* Fixed docs for online/offline event being backwards\n\n### 0.2.10 (Jun 24, 2014)\n* [CB-6907](https://issues.apache.org/jira/browse/CB-6907): [android] Don't crash on startup if no networks available\n\n### 0.2.9 (Jun 05, 2014)\n* updated notice file to include missing license\n* Cached extra info to better detect changes.\n* [CB-6809](https://issues.apache.org/jira/browse/CB-6809) Add license to CONTRIBUTING.md\n* [CB-6491](https://issues.apache.org/jira/browse/CB-6491) add CONTRIBUTING.md\n* [CB-6350](https://issues.apache.org/jira/browse/CB-6350) - Fix networkStatusForFlags return value type to work with 64-bit iOS (closes #8)\n* Initial version of firefox os network information plugin\n* there was an error in the object definition\n\n### 0.2.8 (Apr 17, 2014)\n* [CB-6342](https://issues.apache.org/jira/browse/CB-6342): [iOS] iOS reports a cellular connection even when in Airplane mode\n* [CB-6422](https://issues.apache.org/jira/browse/CB-6422): [windows8] use cordova/exec/proxy\n* [CB-6460](https://issues.apache.org/jira/browse/CB-6460): Update license headers\n* [CB-6465](https://issues.apache.org/jira/browse/CB-6465): Add license headers to Tizen code\n* Add NOTICE file\n\n### 0.2.7 (Feb 05, 2014)\n* Initial implementation of Tizen plugin.\n\n### 0.2.6 (Jan 02, 2014)\n* [CB-5658](https://issues.apache.org/jira/browse/CB-5658) Add doc/index.md for netinfo plugin\n\n### 0.2.5 (Dec 4, 2013)\n* [ubuntu] specify policy_group\n* add ubuntu platform\n* Added amazon-fireos platform. Change to use amazon-fireos as the platform if user agent string contains 'cordova-amazon-fireos'\n\n### 0.2.4 (Oct 28, 2013)\n* [CB-5128](https://issues.apache.org/jira/browse/CB-5128): add repo + issue tag to plugin.xml for network information plugin\n* [CB-4915](https://issues.apache.org/jira/browse/CB-4915) Incremented plugin version on dev branch.\n\n### 0.2.3 (Sept 25, 2013)\n* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) bumping&resetting version\n* [windows8] commandProxy was moved\n* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) renaming org.apache.cordova.core.network-information to org.apache.cordova.network-information\n* removed duplicate comment line from plugin.xml\n* added Network APIs for FirefoxOS\n* Rename CHANGELOG.md -> RELEASENOTES.md\n* [CB-4752](https://issues.apache.org/jira/browse/CB-4752) Incremented plugin version on dev branch.\n\n### 0.2.1 (Sept 5, 2013)\n* [CB-4432](https://issues.apache.org/jira/browse/CB-4432) copyright notice change\n","size_bytes":13086},"okul-app/plugins/cordova-plugin-splashscreen/CONTRIBUTING.md":{"content":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n\n# Contributing to Apache Cordova\n\nAnyone can contribute to Cordova. And we need your contributions.\n\nThere are multiple ways to contribute: report bugs, improve the docs, and\ncontribute code.\n  \nFor instructions on this, start with the\n[contribution overview](http://cordova.apache.org/contribute/).\n\nThe details are explained there, but the important items are:\n - Check for Github issues that corresponds to your contribution and link or create them if necessary.\n - Run the tests so your patch doesn't break existing functionality.\n\nWe look forward to your contributions!\n\n","size_bytes":1374},"okul-app/plugins/cordova-plugin-splashscreen/README.md":{"content":"---\ntitle: Splashscreen\ndescription: Control the splash screen for your app.\n---\n<!--\n# license: Licensed to the Apache Software Foundation (ASF) under one\n#         or more contributor license agreements.  See the NOTICE file\n#         distributed with this work for additional information\n#         regarding copyright ownership.  The ASF licenses this file\n#         to you under the Apache License, Version 2.0 (the\n#         \"License\"); you may not use this file except in compliance\n#         with the License.  You may obtain a copy of the License at\n#\n#           http://www.apache.org/licenses/LICENSE-2.0\n#\n#         Unless required by applicable law or agreed to in writing,\n#         software distributed under the License is distributed on an\n#         \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#         KIND, either express or implied.  See the License for the\n#         specific language governing permissions and limitations\n#         under the License.\n-->\n\n|AppVeyor|Travis CI|\n|:-:|:-:|\n|[![Build status](https://ci.appveyor.com/api/projects/status/github/apache/cordova-plugin-splashscreen?branch=master)](https://ci.appveyor.com/project/ApacheSoftwareFoundation/cordova-plugin-splashscreen)|[![Build Status](https://travis-ci.org/apache/cordova-plugin-splashscreen.svg?branch=master)](https://travis-ci.org/apache/cordova-plugin-splashscreen)|\n\n# cordova-plugin-splashscreen\n\nThis plugin displays and hides a splash screen while your web application is launching. Using its methods you can also show and hide the splash screen manually.\n\n- [Installation](#installation)\n- [Supported Platforms](#supported-platforms)\n- [Platform Splash Screen Image Configuration](#platform-splash-screen-image-configuration)\n  * [Example Configuration](#example-configuration)\n  * [iOS-specific Information](#ios-specific-information)\n  * [Windows-specific Information](#windows-specific-information)\n- [Preferences](#preferences)\n  * [config.xml](#configxml)\n  * [Quirks](#quirks)\n    + [Android Quirks](#android-quirks)\n    + [Browser Quirks](#browser-quirks)\n    + [iOS Quirks](#ios-quirks)\n    + [Windows Quirks](#windows-quirks)\n- [Methods](#methods)\n  * [splashscreen.hide](#splashscreenhide)\n  * [splashscreen.show](#splashscreenshow)\n\n## Installation\n\n    // npm hosted (new) id\n    cordova plugin add cordova-plugin-splashscreen\n\n    // you may also install directly from this repo\n    cordova plugin add https://github.com/apache/cordova-plugin-splashscreen.git\n\n## Supported Platforms\n\n- Android\n- iOS\n- Windows (`cordova-windows` version >= 4.4.0 is required)  \n  __Note__: Extended splashscreen does not require the plugin on Windows (as opposed to Android and iOS) in case you don't use the plugin API, i.e. programmatic hide/show.\n- Browser\n\n## Platform Splash Screen Image Configuration\n\n### Example Configuration\n\nIn the top-level `config.xml` file (not the one in `platforms`), add configuration elements like those specified here.\n\nThe value of the \"src\" attribute is relative to the project root directory and NOT to the `www` directory (see `Directory structure` below). You can name the source image file whatever you like. The internal name in the application is automatically determined by Cordova.\n\nDirectory structure:\n\n```\nprojectRoot\n    hooks\n    platforms\n    plugins\n    www\n        css\n        img\n        js\n    res\n        screen\n            android\n            ios\n            windows\n```\n\n```xml\n<platform name=\"android\">\n    <!-- you can use any density that exists in the Android project -->\n    <splash src=\"res/screen/android/splash-land-hdpi.png\" density=\"land-hdpi\" />\n    <splash src=\"res/screen/android/splash-land-ldpi.png\" density=\"land-ldpi\" />\n    <splash src=\"res/screen/android/splash-land-mdpi.png\" density=\"land-mdpi\" />\n    <splash src=\"res/screen/android/splash-land-xhdpi.png\" density=\"land-xhdpi\" />\n    <splash src=\"res/screen/android/splash-land-xxhdpi.png\" density=\"land-xxhdpi\" />\n    <splash src=\"res/screen/android/splash-land-xxxhdpi.png\" density=\"land-xxxhdpi\" />\n\n    <splash src=\"res/screen/android/splash-port-hdpi.png\" density=\"port-hdpi\" />\n    <splash src=\"res/screen/android/splash-port-ldpi.png\" density=\"port-ldpi\" />\n    <splash src=\"res/screen/android/splash-port-mdpi.png\" density=\"port-mdpi\" />\n    <splash src=\"res/screen/android/splash-port-xhdpi.png\" density=\"port-xhdpi\" />\n    <splash src=\"res/screen/android/splash-port-xxhdpi.png\" density=\"port-xxhdpi\" />\n    <splash src=\"res/screen/android/splash-port-xxxhdpi.png\" density=\"port-xxxhdpi\" /> \n</platform>\n\n<platform name=\"ios\">\n    <!-- There are two mechanisms for showing launch images.\n      -- Legacy method (supports all devices except iPad Pro 12.9):\n      -- Note: Images are determined by width and height. The following are supported -->\n    <splash src=\"res/screen/ios/Default~iphone.png\" width=\"320\" height=\"480\"/>\n    <splash src=\"res/screen/ios/Default@2x~iphone.png\" width=\"640\" height=\"960\"/>\n    <splash src=\"res/screen/ios/Default-Portrait~ipad.png\" width=\"768\" height=\"1024\"/>\n    <splash src=\"res/screen/ios/Default-Portrait@2x~ipad.png\" width=\"1536\" height=\"2048\"/>\n    <splash src=\"res/screen/ios/Default-Landscape~ipad.png\" width=\"1024\" height=\"768\"/>\n    <splash src=\"res/screen/ios/Default-Landscape@2x~ipad.png\" width=\"2048\" height=\"1536\"/>\n    <splash src=\"res/screen/ios/Default-568h@2x~iphone.png\" width=\"640\" height=\"1136\"/>\n    <splash src=\"res/screen/ios/Default-667h.png\" width=\"750\" height=\"1334\"/>\n    <splash src=\"res/screen/ios/Default-736h.png\" width=\"1242\" height=\"2208\"/>\n    <splash src=\"res/screen/ios/Default-Landscape-736h.png\" width=\"2208\" height=\"1242\"/>\n    <!-- Storyboard method (supports all devices):\n      -- Important: If you use the storyboard method, legacy images are \n      -- copied but ignored.\n      -- Note: images are determined by scale, idiom, and size traits. The following\n      -- are suggested based on current device form factors -->\n    <splash src=\"res/screen/ios/Default@2x~universal~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~universal~comany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~universal~comcom.png\" />\n    <splash src=\"res/screen/ios/Default@3x~universal~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@3x~universal~anycom.png\" />\n    <splash src=\"res/screen/ios/Default@3x~universal~comany.png\" />\n    \n</platform>\n\n<!-- Configuration using MRT concept (Recommended, see \"Windows-specific information\" section for details): -->\n<platform name=\"windows\">\n    <splash src=\"res/screen/windows/splashscreen.png\" target=\"SplashScreen\"/>\n    <splash src=\"res/screen/windows/splashscreenphone.png\" target=\"SplashScreenPhone\"/>\n</platform>\n\n<!-- Configuration using image size: -->\n<!--<platform name=\"windows\">\n    <splash src=\"res/screen/windows/splashscreen.png\" width=\"620\" height=\"300\"/>\n    <splash src=\"res/screen/windows/splashscreenphone.png\" width=\"1152\" height=\"1920\"/>\n</platform>-->\n\n<preference name=\"SplashScreenDelay\" value=\"10000\" />\n```\n\n### iOS-specific Information\n\nThere are two mechanisms for displaying a launch screen on iOS:\n\n1. Legacy launch images: images are sized exactly for the device's screen size. Does not support the iPad Pro 12.9's native resolution or split-screen/slide-over multitasking.\n\n2. Launch storyboard images: Images are sized based on scale, idiom, and size classes. Supports all devices, and can be used with split-screen/slide-over multitasking.\n\nApple is moving away from legacy launch images. There is no official support for providing a native-resolution launch image for the iPad Pro 12.9 or for providing launch images that work with split-screen multitasking or slide-over. If your app doesn't need to support these contexts, then you can continue to use legacy launch images for as long as you like. \n\nThe preferred method of providing launch images is to use a launch storyboard. For native app developers, the ideal launch storyboard is an unpopulated version of the app's user interface at launch. For non-native app developers who don't wish to learn Interface Builder, however, this plugin simulates the legacy launch image method as much as is feasible.\n\n**Note:** Since iOS 11, for iPhone X devices and greater (with notch screen), you should switch to the new storyboard splash screens, taking into account to add `viewport-fit=cover` to the viewport meta tag in your `index.html` file to display the app correctly like so: `<meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1, width=device-width, viewport-fit=cover\">` and make some modification to your app style by adding: `padding: env(safe-area-inset-top)` to your `index.css` file to avoid the unsafe areas behind notches in the screen.\n\n#### Legacy launch images\n\nIf you choose to use legacy launch images, you will use the following syntax in `config.xml`:\n\n```\n    <splash src=\"res/screen/ios/Default~iphone.png\" width=\"320\" height=\"480\"/>\n    <splash src=\"res/screen/ios/Default@2x~iphone.png\" width=\"640\" height=\"960\"/>\n    <splash src=\"res/screen/ios/Default-Portrait~ipad.png\" width=\"768\" height=\"1024\"/>\n    <splash src=\"res/screen/ios/Default-Portrait@2x~ipad.png\" width=\"1536\" height=\"2048\"/>\n    <splash src=\"res/screen/ios/Default-Landscape~ipad.png\" width=\"1024\" height=\"768\"/>\n    <splash src=\"res/screen/ios/Default-Landscape@2x~ipad.png\" width=\"2048\" height=\"1536\"/>\n    <splash src=\"res/screen/ios/Default-568h@2x~iphone.png\" width=\"640\" height=\"1136\"/>\n    <splash src=\"res/screen/ios/Default-667h.png\" width=\"750\" height=\"1334\"/>\n    <splash src=\"res/screen/ios/Default-736h.png\" width=\"1242\" height=\"2208\"/>\n```\n\nTechnically the filename for the `src` attribute can be anything you want; the filenames are used because they match what will be used when your project is compiled. The width and height attributes determine which launch images are displayed on which devices as follows:\n\n|    width    |    height    |    device (orientation)          |\n|:-----------:|:------------:|:--------------------------------:|\n|     320     |      480     | All non-retina iPhones and iPods |\n|     640     |      960     | iPhone 4/4s (portrait)           |\n|     640     |     1136     | iPhone 5/5s/SE (portrait)        |\n|     750     |     1334     | iPhone 6/6s/7 (portrait)         |\n|    1242     |     2208     | iPhone 6+/6s+/7+ (portrait)      |\n|    2208     |     1242     | iPhone 6+/6s+/7+ (landscape)     |\n|     768     |     1024     | All non-retina iPads (portrait)  |\n|    1024     |      768     | All non-retina iPads (landscape) |\n|    1536     |     2048     | All retina iPads (portrait)      |\n|    2048     |     1536     | All retina iPads (landscape)     |\n\nNote: It is vitally important that the source image actually matches the size specified in the `width` and `height` attributes. If it does not, the device may fail to render it properly, if at all.\n\n#### Launch storyboard images\n\nIn order to support newer form factors and split-screen/slide-over multitasking, you should use launch storyboard images. These are similar to the legacy launch images above, but there are crucial differences:\n\n - images are not specific to a given device.\n\n - images are scaled to fill the available viewport (while maintaining the aspect ratio).\n\n - the outer edges of the images will be cropped, and the amount will vary based on device an viewport.\n\n - there is no need to provide an image for each possible device, viewport, and orientation; iOS will choose the best image for the situation automatically.\n\n##### Designing launch storyboard images\n\nThe key to designing a launch storyboard image is understanding that the edges of the image will almost certainly be cropped. Therefore, one should not place any important information near the edges of any images provided to the launch storyboard. Only the center is a safe area, and this all but guarantees that following Apple's advice of presenting an unpopulated user interface will not work well.\n\nInstead, the following tips should enable you to create a launch image that works across a multitude of form factors, viewports, and orientations:\n\n - Important graphics (logos, icons, titles) should be centered. The safe bounding region will vary, so you will need to test to ensure that the important graphics are never cropped. Better yet, don't supply any important graphics in the first place.\n\n     - You _can_ fine-tune the placement and size of these graphics, but you don't have the same fine-grained control as you did with legacy launch images.\n\n - Use a simple color wash. If you use two colors, you'll want one color to fill the top half of the image, and the second to fill the bottom half.  If you use a gradient, you'll probably want to ensure that the middle of the gradient lines up with the center of the image. \n\n - Don't worry about pixel perfection -- because the images are scaled, there's almost no chance the images will be perfectly fit to the pixel grid. Since all supported iOS devices use retina screens, users will be hard pressed to notice it anyway.\n\nIt is important to understand the concept of scale, idiom, and size class traits in order to use launch storyboard images effectively. Of the images supplied to the launch storyboard, iOS will choose the image that best matches the device and viewport and render that image. It is possible to supply only one launch image if so desired, but it is also possible to fine-tune the displayed launch image based on traits. When fine-tuning, one can ignore traits that aren't targeted or supported by the app.\n\n> Note: If you are using launch storyboard images, there is no need to include legacy images. If you do, the legacy images will be copied, but not used.\n\n##### Scale\n\n|    scale    |    devices             |\n|:-----------:|:----------------------:|\n|     1x      | All non-retina devices |\n|     2x      | Most retina devices    |\n|     3x      | iPhone 6+/6s+,7s+      |\n\nIn general, you'll want to supply 2x and 3x images. Cordova only supports retina devices now, so there's no point in supplying 1x images.\n\n##### Idioms\n\n|    idiom    |    devices    |\n|:-----------:|:-------------:|\n|    ipad     | All iPads     |\n|   iphone    | All iPhones and iPod Touches    |\n|  universal  | All devices   |\n\nYou only need to provide universal images unless you need to fine-tune for a specific device idiom.\n\n##### Size classes\n\nThere are two size classes applies to both screen axes. Narrow viewports are considered to be the \"compact\" size class, and remaining viewports are considered \"regular\". When supplying images to Xcode, however, one must choose between \"any & compact\" and \"any & regular\". To stay consistent with the native terminology, this feature will match based on \"any\" and \"compact\". `any` will match regular-sized viewports. \n\nNote: this feature uses `com` as an abbreviation for \"compact\" classes.\n\nThe following classes are supported by this feature:\n\n|    width    |    height    |    orientation    |\n|:-----------:|:------------:|:-----------------:|\n|     any     |     any      |        any        |\n|     com     |     any      |     portrait      |\n|     any     |     com      |  landscape (wide) |\n|     com     |     com      | landscape (narrow)|\n\nTo see the complete list of size classes associated with devices and viewports, see <http://www.sizeclasses.com>.\n\n##### Single-image launch screen\n\nIf your launch image is simple, you may be able to avoid creating a lot of different launch images and supply only one. The launch image needs to meet the following requirements:\n\n - the image should be square\n\n - the image should be large enough to fit on an iPad Pro 12.9\": 2732x2732\n\n - anything important should fit within the center\n\n Keep in mind that the image will be cropped, possibly quite severely, depending upon the viewport. \n\nOnce the image is created, you can include it in your project by adding the following to `config.xml`:\n\n```\n    <splash src=\"res/screen/ios/Default@2x~universal~anyany.png\" />\n```\n\nBecause only one image is provided, iOS will utilize it in every context.\n\n##### Multi-image launch screen\n\nIf a single launch image won't meet your needs, you will probably need to supply at least six images, if not more. Furthermore, keep in mind that it will not be possible to fine tune the image to a specific device, but only to a device class, display factor, and viewport size.\n\nIf you don't need to target images to a specific idiom, you should create six images, as follows:\n\n|    scale    |    idiom    |    width    |    height    |    size    |    filename    |\n|:-----------:|:-----------:|:-----------:|:------------:|:----------:|:--------------:|\n|     2x*     |  universal  |     any     |     any      | 2732x2732  | `Default@2x~universal~anyany.png` |\n|     2x      |  universal  |     com     |     any      | 1278x2732  | `Default@2x~universal~comany.png` |\n|     2x      |  universal  |     com     |     com      | 1334x750   | `Default@2x~universal~comcom.png` |\n|     3x*     |  universal  |     any     |     any      | 2208x2208  | `Default@3x~universal~anyany.png` |\n|     3x      |  universal  |     any     |     com      | 2208x1242  | `Default@3x~universal~anycom.png` |\n|     3x      |  universal  |     com     |     any      | 1242x2208  | `Default@3x~universal~comany.png` |\n\n\\* this image is required in order for iOS utilize the other images within this scale and idiom.\n\n> Note: If the 3x sizes look small too you, that's because there's only one device class that currently has a 3x density: the iPhone 6+/6s+/7+.\n\nThe above looks like the following snippet when present in `config.xml`:\n\n```\n    <splash src=\"res/screen/ios/Default@2x~universal~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~universal~comany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~universal~comcom.png\" />\n    <splash src=\"res/screen/ios/Default@3x~universal~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@3x~universal~anycom.png\" />\n    <splash src=\"res/screen/ios/Default@3x~universal~comany.png\" />\n```\n\nShould one need to further fine tune based upon device idiom, one can do so. This might look like so:\n\n|    scale    |    idiom    |    width    |    height    |    size    |    filename    |\n|:-----------:|:-----------:|:-----------:|:------------:|:----------:|:--------------:|\n|     2x*     |    iphone   |     any     |     any      | 1334x1334  | `Default@2x~iphone~anyany.png` |\n|     2x      |    iphone   |     com     |     any      | 750x1334   | `Default@2x~iphone~comany.png` |\n|     2x      |    iphone   |     com     |     com      | 1334x750   | `Default@2x~iphone~comcom.png` |\n|     3x*     |    iphone   |     any     |     any      | 2208x2208  | `Default@3x~iphone~anyany.png` |\n|     3x      |    iphone   |     any     |     com      | 2208x1242  | `Default@3x~iphone~anycom.png` |\n|     3x      |    iphone   |     com     |     any      | 1242x2208  | `Default@3x~iphone~comany.png` |\n|     2x*     |     ipad    |     any     |     any      | 2732x2732  | `Default@2x~ipad~anyany.png`   |\n|     2x      |     ipad    |     com     |     any      | 1278x2732  | `Default@2x~ipad~comany.png`   |\n\n\\* this image is required in order for iOS utilize the other images within this scale and idiom.\n\nThe above looks like the following in `config.xml`:\n\n```\n    <splash src=\"res/screen/ios/Default@2x~iphone~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~iphone~comcom.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~anycom.png\" />\n    <splash src=\"res/screen/ios/Default@3x~iphone~comany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~anyany.png\" />\n    <splash src=\"res/screen/ios/Default@2x~ipad~comany.png\" />\n```\n\n##### Quirks and Known Issues\n\n1. **App on target may not reflect changes to images**\n   Once you run the app on a target, iOS caches the launch image. Unfortunately, when you change the image, iOS does _not_ invalidate the cache, which means you'll still see the old launch image. You should either: delete the app, or reset content & settings (simulator).\n\n2. **Simulator may not show expected images when launched from CLI**\n   When Xcode deploys to a specific simulator, it only copies the assets that match the simulator's characteristics. For example, if you try to run an app on the iPhone 6s Plus simulator, only @3x launch images are copied. When compiling from the CLI, however, the default is to assume an iPhone 5s, which means only @2x launch images are copied. Unless your launch images are markedly different, chances are good the difference would go unnoticed, but this does mean that the only accurate method of testing is to test on a physical device.\n\n3. **`anyany` must be provided for other variations to be used**\n   If you don't provide an `anyany` version of the launch image for a specific scale and idiom, the other variations (like `anycom`, `comany`, and `comcom`) will ignored. \n\n### Windows-specific Information\n\nSplash screen images can be defined using the [MRT](https://cordova.apache.org/docs/en/dev/config_ref/images.html#windows) concept.  \nIf you specify `src=\"res/windows/splashscreen.png\"` the following files will be copied into the application's images folder:  \n`res/windows/splashscreen.png` | `res/windows/splashscreen.scale-100.png`, `res/windows/splashscreen.scale-125.png`, etc.  \n\nThe following are supported:\n\n|   Scale, %   |       Project       |    Width    |    Height    |             Filename              |\n|:------------:|:-------------------:|:-----------:|:------------:|:---------------------------------:|\n|     100      |  Windows 10/8.1     |     620     |     300      | `splashscreen.png` \\| `splashscreen.scale-100.png`              |\n|     125      |  Windows 10         |     775     |     375      | `splashscreen.scale-125.png`      |\n|     150      |  Windows 10         |     930     |     450      | `splashscreen.scale-150.png`      |\n|     200      |  Windows 10         |     1240    |     600      | `splashscreen.scale-200.png`      |\n|     400      |  Windows 10         |     2480    |     1200     | `splashscreen.scale-400.png`      |\n|     140      |  Windows 8.1        |     868     |     420      | `splashscreen.scale-140.png`      |\n|     180      |  Windows 8.1        |     1116    |     540      | `splashscreen.scale-180.png`      |\n|     100      |  Windows Phone 8.1  |     480     |     800      | `splashscreenphone.png` \\| `splashscreenphone.scale-100.png`         |\n|     140      |  Windows Phone 8.1  |     672     |     1120     | `splashscreenphone.scale-140.png` |\n|     240      |  Windows Phone 8.1  |     1152    |     1920     | `splashscreenphone.scale-240.png` |\n\n__Note__: SplashScreens size for Windows 10 project should not exceed 200 KBytes.  \n__Note__: Supported formats are `.png`, `.jpg`, `.jpeg`. Mixing of the extensions within a target is not supported. I.e. you can have `splashscreen.jpg` and `splashscreenphone.png` but not `splashscreen.scale-100.png`, `splashscreen.scale-400.jpg`.  \n__Note__: You may need to reopen Visual Studio solution after changing the images and doing a `cordova prepare` for the changes to take effect.\n\n## Preferences\n\n### config.xml\n\n- `AutoHideSplashScreen` (boolean, default to `true`). Indicates whether to hide splash screen automatically or not. The splash screen is hidden after the amount of time specified in the `SplashScreenDelay` preference.\n\n    ```xml\n    <preference name=\"AutoHideSplashScreen\" value=\"true\" />\n    ```\n\n- `SplashScreenDelay` (number, default to 3000). Amount of time in milliseconds to wait before automatically hide splash screen.\n\n    ```xml\n    <preference name=\"SplashScreenDelay\" value=\"3000\" />\n    ```\n\n    This value used to be in seconds (but is now milliseconds) so values less than 30 will continue to be treated as seconds. (Consider this a deprecated patch that will disapear in some future version.)\n\n    To disable the splashscreen add the following preference to `config.xml`:\n    ```xml\n    <preference name=\"SplashScreenDelay\" value=\"0\"/>\n    ```\n\n    **Windows Quirk**: You should disable the splashscreen in case you are updating the entire document body dynamically (f.e. with a SPA router) to avoid affecting UI/controls.  \n    Note that you should also directly reference `WinJS/base.js` in the page HTML in this case to avoid the issues with activation context ([CB-11658](https://issues.apache.org/jira/browse/CB-11658)).\n\n    **iOS Quirk**: to disable the splashscreen on `ios` platform you should also add `<preference name=\"FadeSplashScreenDuration\" value=\"0\"/>` to `config.xml`.\n\n- `FadeSplashScreen` (boolean, defaults to `true`): Set to `false` to\n  prevent the splash screen from fading in and out when its display\n  state changes.\n\n    ```xml\n    <preference name=\"FadeSplashScreen\" value=\"false\"/>\n    ```\n\n- `FadeSplashScreenDuration` (float, defaults to `500`): Specifies the\n  number of milliseconds for the splash screen fade effect to execute.\n\n    ```xml\n    <preference name=\"FadeSplashScreenDuration\" value=\"750\"/>\n    ```\n\n    _Note_: `FadeSplashScreenDuration` is included into `SplashScreenDelay`, for example if you have `<preference name=\"SplashScreenDelay\" value=\"3000\" />` and `<preference name=\"FadeSplashScreenDuration\" value=\"1000\"/>` defined in `config.xml`:\n\n    - 00:00 - splashscreen is shown\n    - 00:02 - fading has started\n    - 00:03 - splashscreen is hidden\n\n    Turning the fading off via `<preference name=\"FadeSplashScreen\" value=\"false\"/>` technically means fading duration to be `0` so that in this example the overall splash screen delay will still be 3 seconds.\n\n    _Note_: This only applies to the application startup - you need to take the fading timeout into account when manually showing/hiding the splash screen in your application's code:\n\n    ```javascript\n    navigator.splashscreen.show();\n    window.setTimeout(function () {\n        navigator.splashscreen.hide();\n    }, splashDuration - fadeDuration);\n    ```\n\n- `ShowSplashScreenSpinner` (boolean, defaults to `true`): Set to `false`\n  to hide the splash screen spinner.\n\n    ```xml\n    <preference name=\"ShowSplashScreenSpinner\" value=\"false\"/>\n    ```\n    \n    _Note_: Does not work on Browser or Windows platforms.\n\n### Quirks\n\n#### Android Quirks\n\nIn your `config.xml`, you can add the following preferences:\n\n```xml\n<preference name=\"SplashMaintainAspectRatio\" value=\"true|false\" />\n<preference name=\"SplashShowOnlyFirstTime\" value=\"true|false\" />\n<preference name=\"SplashScreenSpinnerColor\" value=\"white\" />\n```\n\n`SplashMaintainAspectRatio` preference is optional. If set to `true`, the splash screen drawable is not stretched to fit the full screen, but instead simply \"covers\" the screen, like CSS \"background-size:cover\". This is very useful when splash screen images cannot be distorted in any way, for example when they contain scenery or text. This setting works best with images that have large margins (safe areas) that can be safely cropped on screens with different aspect ratios.\n\nThe splash screen plugin reloads the splash screen whenever the orientation changes so that you can specify different splash screen images for portrait and landscape orientations.\n\n`SplashShowOnlyFirstTime` preference is  optional and defaults to `true`. When set to `true` the splash screen will only appear on application launch. However, if you plan to use `navigator.app.exitApp()` to close the application and force the splash screen appear on the application's next launch, you should set this property to `false` (this also applies to closing the application with the Back button).\n\n`SplashScreenSpinnerColor` preference is also optional and is ignored when not set. Setting it to a valid color name or HEX color code will change the color of the spinner on Android 5.0+ devices.\n\n#### Browser Quirks\n\nYou can use the following preferences in your `config.xml`:\n\n```xml\n<platform name=\"browser\">\n    <preference name=\"SplashScreen\" value=\"/images/browser/splashscreen.jpg\" /> <!-- defaults to \"/img/logo.png\" -->\n    <preference name=\"AutoHideSplashScreen\" value=\"true\" /> <!-- defaults to \"true\" -->\n    <preference name=\"SplashScreenDelay\" value=\"3000\" /> <!-- defaults to \"3000\" -->\n    <preference name=\"SplashScreenBackgroundColor\" value=\"green\" /> <!-- defaults to \"#464646\" -->\n    <preference name=\"ShowSplashScreen\" value=\"false\" /> <!-- defaults to \"true\" -->\n    <preference name=\"SplashScreenWidth\" value=\"600\" /> <!-- defaults to \"170\" -->\n    <preference name=\"SplashScreenHeight\" value=\"300\" /> <!-- defaults to \"200\" -->\n</platform>\n```\n\n__Note__: `SplashScreen` value should be absolute in order to work in a sub-page. The `SplashScreen` value is used only for the browser platform. The value will be ignored for other platforms.\n\n#### iOS Quirks\n\n- In iOS, the splash screen images are called launch images. These images are mandatory on iOS.\n\n#### Windows Quirks\n\n- `SplashScreenSpinnerColor` (string, defaults to system accent color): hash, rgb notation or CSS color name.\n\n    ```xml\n    <preference name=\"SplashScreenSpinnerColor\" value=\"#242424\"/>\n    <preference name=\"SplashScreenSpinnerColor\" value=\"DarkRed\"/>\n    <preference name=\"SplashScreenSpinnerColor\" value=\"rgb(50,128,128)\"/>\n    ```\n\n- `SplashScreenBackgroundColor` (string, defaults to #464646): hex notation.\n\n    ```xml\n    <preference name=\"SplashScreenBackgroundColor\" value=\"0xFFFFFFFF\"/>\n    ```\n\n## Methods\n\n- splashscreen.show\n- splashscreen.hide\n\n### splashscreen.hide\n\nDismiss the splash screen.\n\n```js\nnavigator.splashscreen.hide();\n```\n\n\n#### iOS Quirk\n\nThe `config.xml` file's `AutoHideSplashScreen` setting must be\n`false`. To delay hiding the splash screen for two seconds, add a\ntimer such as the following in the `deviceready` event handler:\n\n```js\nsetTimeout(function() {\n    navigator.splashscreen.hide();\n}, 2000);\n```\n\n### splashscreen.show\n\nDisplays the splash screen.\n\n```js\nnavigator.splashscreen.show();\n```\n\nYour application cannot call `navigator.splashscreen.show()` until the application has\nstarted and the `deviceready` event has fired. But since typically the splash\nscreen is meant to be visible before your application has started, that would seem to\ndefeat the purpose of the splash screen.  Providing any parameters in\n`config.xml` will automatically `show` the splash screen immediately after your\napplication is launched and before it has fully started and received the `deviceready`\nevent. For this reason, it is unlikely you will need to call `navigator.splashscreen.show()` to make the splash\nscreen visible for application startup.\n","size_bytes":30737},"okul-app/plugins/cordova-plugin-splashscreen/RELEASENOTES.md":{"content":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n# \n# http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# Release Notes\n\n### 5.0.4 (Jun 03, 2020)\n* [GH-261](https://github.com/apache/cordova-plugin-splashscreen/pull/261) chore: add `cordova-ios` requirement <6.0.0\n* chore(asf): update git notification settings\n* update CONTRIBUTING.md\n* [GH-251](https://github.com/apache/cordova-plugin-splashscreen/pull/251) chore(npm): adds ignore list\n* [GH-252](https://github.com/apache/cordova-plugin-splashscreen/pull/252) ci: updates Node.js versions\n* [GH-236](https://github.com/apache/cordova-plugin-splashscreen/pull/236) update homepage to github `README` page\n* [GH-239](https://github.com/apache/cordova-plugin-splashscreen/pull/239) update `README`.md by adding missing info\n* ci(travis): Upgrade node from 6 to 8\n* ci(travis): Remove **Android 4.4**, Add **Android** 9.0\n* [GH-212](https://github.com/apache/cordova-plugin-splashscreen/pull/212) ci(travis): Add ADDITIONAL_TESTS_DIR=./tests/ios\n\n### 5.0.3 (May 09, 2019)\n* Update CI configuration and README ([#210](https://github.com/apache/cordova-plugin-splashscreen/pull/210), [#208](https://github.com/apache/cordova-plugin-splashscreen/pull/208), [#198](https://github.com/apache/cordova-plugin-splashscreen/pull/198), [#194](https://github.com/apache/cordova-plugin-splashscreen/pull/194))\n* Add or update GitHub pull request and issue template\n* [CB-13826](https://issues.apache.org/jira/browse/CB-13826) Incremented plugin version.\n* [CB-12277](https://issues.apache.org/jira/browse/CB-12277) (android) avoid NullPointerException on splashImageView when removing splashscreen\n\n### 5.0.2 (Jan 24, 2018)\n* [CB-13750](https://issues.apache.org/jira/browse/CB-13750) Add build-tools-26.0.2 to travis\n* [CB-13737](https://issues.apache.org/jira/browse/CB-13737) (iOS): fix Splash screen images for iPhone X\n\n### 5.0.1 (Dec 27, 2017)\n* [CB-13709](https://issues.apache.org/jira/browse/CB-13709) Fix to allow 5.0.0 version install (#144)\n\n### 5.0.0 (Dec 15, 2017)\n* [CB-13677](https://issues.apache.org/jira/browse/CB-13677) Remove deprecated platforms\n\n### 4.1.0 (Nov 06, 2017)\n* [CB-13473](https://issues.apache.org/jira/browse/CB-13473) (CI) Removed **Browser** builds from AppVeyor\n* [CB-12011](https://issues.apache.org/jira/browse/CB-12011) (android) added the possibility to change the spinner color on **Android 5.0**+ apps\n* [CB-13028](https://issues.apache.org/jira/browse/CB-13028) (CI) **Browser** builds on Travis and AppVeyor\n* [CB-13094](https://issues.apache.org/jira/browse/CB-13094) (android) Don't show splash when activity being finished\n* [CB-11487](https://issues.apache.org/jira/browse/CB-11487) (browser) Documented `AutoHideSplashScreen` for **Browser**\n* [CB-11488](https://issues.apache.org/jira/browse/CB-11488) (browser) The `hide()` call became non re-entrant after the addition of fade out. This fixes the issue.\n* [CB-11487](https://issues.apache.org/jira/browse/CB-11487) (browser) The standard `AutoHideSplashScreen` `config.xml` property is now supported by the **Browser** platform.\n* [CB-11486](https://issues.apache.org/jira/browse/CB-11486) (browser) `splashScreenDelay` now feed through `parseInt` to ensure it is an integer by the time it's value is passed in to `setTimeout()` in `hide()`.\n* [CB-12847](https://issues.apache.org/jira/browse/CB-12847) added `bugs` entry to `package.json`.\n\n### 4.0.3 (Apr 27, 2017)\n* [CB-12622](https://issues.apache.org/jira/browse/CB-12622) Added **Android 6.0** build badge to `README`\n* [CB-12685](https://issues.apache.org/jira/browse/CB-12685) added `package.json` to tests folder\n\n### 4.0.2 (Feb 28, 2017)\n* [CB-12353](https://issues.apache.org/jira/browse/CB-12353) Corrected merges usage in `plugin.xml`\n* [CB-12369](https://issues.apache.org/jira/browse/CB-12369) Add plugin typings from `DefinitelyTyped` \n* [CB-12363](https://issues.apache.org/jira/browse/CB-12363) Added build badges for **iOS 9.3** and **iOS 10.0** \n* [CB-12230](https://issues.apache.org/jira/browse/CB-12230) Removed **Windows 8.1** build badges\n\n### 4.0.1 (Dec 07, 2016)\n* [CB-12224](https://issues.apache.org/jira/browse/CB-12224) Updated version and RELEASENOTES.md for release 4.0.1\n* [CB-11751](https://issues.apache.org/jira/browse/CB-11751) 'extendedSplashScreen' is undefined Document that splashscreen needs to be disabled on Windows in case of updating entire document body\n* [CB-9287](https://issues.apache.org/jira/browse/CB-9287) Not enough Icons and Splashscreens for **Windows 8.1** and Windows Phone 8.1\n* [CB-11917](https://issues.apache.org/jira/browse/CB-11917) - Remove pull request template checklist item: \"iCLA has been submitted…\"\n* [CB-11830](https://issues.apache.org/jira/browse/CB-11830) (iOS) Fix doc typos in PR#114\n* [CB-11829](https://issues.apache.org/jira/browse/CB-11829) (iOS) Support for CB-9762; docs (CB-11830)\n* [CB-11832](https://issues.apache.org/jira/browse/CB-11832) Incremented plugin version.\n\n### 4.0.0 (Sep 08, 2016)\n* [CB-11795](https://issues.apache.org/jira/browse/CB-11795) Add 'protective' entry to cordovaDependencies\n* [CB-11326](https://issues.apache.org/jira/browse/CB-11326) Prevent crash when initializing plugin after navigating to another URL\n* Fix crash on **iOS** when reloading page from remote **Safari**\n* Add badges for paramedic builds on Jenkins\n* Add pull request template.\n* [CB-11179](https://issues.apache.org/jira/browse/CB-11179) Extend the windows-splashscreen docs\n* [CB-11159](https://issues.apache.org/jira/browse/CB-11159) Fix flaky splashscreen native tests\n* [CB-11156](https://issues.apache.org/jira/browse/CB-11156) Change default `FadeSplashScreenDuration` value\n* [CB-8056](https://issues.apache.org/jira/browse/CB-8056) Updated the dependency version, added it to the docs\n* [CB-10996](https://issues.apache.org/jira/browse/CB-10996) Adding front matter to README.md\n* [CB-8056](https://issues.apache.org/jira/browse/CB-8056) Implement splashscreen for **Windows** platform\n* [CB-6498](https://issues.apache.org/jira/browse/CB-6498) Misleading documentation in **Android** Quirks\n\n### 3.2.2 (Apr 15, 2016)\n* [CB-10979](https://issues.apache.org/jira/browse/CB-10979) Fix splashscreen **iOS** native tests. Added `jshintignore` for tests/ios\n* [CB-10895](https://issues.apache.org/jira/browse/CB-10895) Transparent Splashscreen view sometimes remains\n* [CB-10562](https://issues.apache.org/jira/browse/CB-10562) `hide()` not working in latest splashscreen plug in 3.1.0 in **iOS**\n* [CB-10688](https://issues.apache.org/jira/browse/CB-10688) Plugin Splashscreen Readme must have examples.\n* [CB-10864](https://issues.apache.org/jira/browse/CB-10864) Run **iOS** native tests on Travis\n\n### 3.2.1 (Mar 09, 2016)\n* [CB-10764](https://issues.apache.org/jira/browse/CB-10764) Remove emoji in cordova-plugin-splashscreen\n* [CB-10650](https://issues.apache.org/jira/browse/CB-10650) Non-index content.src causes Splashscreen to be not displayed on **Browser**\n* [CB-10636](https://issues.apache.org/jira/browse/CB-10636) Add JSHint for plugins\n* [CB-10606](https://issues.apache.org/jira/browse/CB-10606) fix deprecation warning for interfaceOrientation on **iOS**\n* chore: edit package.json license to match SPDX id\n\n### 3.2.0 (Feb 09, 2016)\n* [CB-10422](https://issues.apache.org/jira/browse/CB-10422) Splashscreen displays black screen with no image on Android\n* [CB-10412](https://issues.apache.org/jira/browse/CB-10412) AutoHideSplashScreen \"false\" isn't taken in account on iOS\n* [CB-9516](https://issues.apache.org/jira/browse/CB-9516) Android SplashScreen - Spinner Does Not Display\n* [CB-9094](https://issues.apache.org/jira/browse/CB-9094) Smarter autohide logic on Android\n* [CB-8396](https://issues.apache.org/jira/browse/CB-8396) Add AutoHideSplashScreen logic to Android's Splashscreen\n\n### 3.1.0 (Jan 15, 2016)\n* [CB-9538](https://issues.apache.org/jira/browse/CB-9538) Implementing `FadeSplashScreen` feature for **Android**\n* [CB-9240](https://issues.apache.org/jira/browse/CB-9240) Cordova splash screen plugin **iPad** landscape mode issue\n* [CB-10263](https://issues.apache.org/jira/browse/CB-10263) Fix splashscreen plugin filenames for Asset Catalog\n* [CB-9374](https://issues.apache.org/jira/browse/CB-9374) **Android** add `SplashShowOnlyFirstTime` as preference\n* [CB-10244](https://issues.apache.org/jira/browse/CB-10244) Don't rotate the **iPhone 6 Plus** splash\n* [CB-9043](https://issues.apache.org/jira/browse/CB-9043) Fix the **ios** splashscreen being deformed on orientation change\n* [CB-10079](https://issues.apache.org/jira/browse/CB-10079) Splashscreen plugin does not honor `SplashScreenDelay` on **iOS**\n* [CB-10231](https://issues.apache.org/jira/browse/CB-10231) Fix `FadeSplashScreen` to default to true on **iOS**\n\n### 3.0.0 (Nov 18, 2015)\n* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) Updated `RELEASENOTES` to be newest to oldest\n* Fixing contribute link.\n* [CB-9750](https://issues.apache.org/jira/browse/CB-9750) `FadeSplashDuration` is now in `msecs`\n* [CB-8875](https://issues.apache.org/jira/browse/CB-8875) `FadeSplashScreen` was not fading\n* [CB-9467](https://issues.apache.org/jira/browse/CB-9467) SplashScreen does not show any image in hosted app on **Windows 10**\n* [CB-7282](https://issues.apache.org/jira/browse/CB-7282) Document `AutoHideSplashScreenpreference`\n* [CB-9327](https://issues.apache.org/jira/browse/CB-9327) - Splashscreen not receiving `CDVPageLoadNotification`\n* WP8: Avoid config `value` of a wrong element.\n\n### 2.1.0 (Jun 17, 2015)\n* added missing license headers\n* [CB-9128](https://issues.apache.org/jira/browse/CB-9128) cordova-plugin-splashscreen documentation translation: cordova-plugin-splashscreen\n* fix npm md issue\n* Fixed iOS unit tests.\n* [CB-3562](https://issues.apache.org/jira/browse/CB-3562): Disable screen rotation for iPhone when splash screen is shown. (closes #47)\n* [CB-8988](https://issues.apache.org/jira/browse/CB-8988): Fix rotation on iOS/iPad (closes #46)\n* [CB-8904](https://issues.apache.org/jira/browse/CB-8904): Don't reset the static variable when it's destroyed, otherwise we might as well just have a member variable\n* Removed wp7 from `plugin.xml` and package.json\n* [CB-8750](https://issues.apache.org/jira/browse/CB-8750) [wp8]: Rewrite resoultion helper\n* [CB-8750](https://issues.apache.org/jira/browse/CB-8750) [wp8]: Allow resolution-specific splashscreen images\n* [CB-8758](https://issues.apache.org/jira/browse/CB-8758) [wp8]: UnauthorizedAccessException on hide()\n\n### 2.0.0 (Apr 15, 2015)\n* give users a way to install the bleeding edge.\n* [CB-8746](https://issues.apache.org/jira/browse/CB-8746) gave plugin major version bump\n* [CB-8797](https://issues.apache.org/jira/browse/CB-8797) - Splashscreen preferences FadeSplashScreenDuration and FadeSplashScreen (iOS) are missing\n* [CB-8836](https://issues.apache.org/jira/browse/CB-8836) - Crashes after animating splashscreen\n* [CB-8753](https://issues.apache.org/jira/browse/CB-8753) android: Fix missing import in previous commit\n* [CB-8753](https://issues.apache.org/jira/browse/CB-8753) android: Adds `SplashMaintainAspectRatio` preference (close #43)\n* [CB-8683](https://issues.apache.org/jira/browse/CB-8683) changed plugin-id to pacakge-name\n* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) properly updated translated docs to use new id\n* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) updated translated docs to use new id\n* [CB-8345](https://issues.apache.org/jira/browse/CB-8345) Make default for splashscreen resource \"screen\" (which is what template and CLI assume it to be)\n* Revert \"CB-8345 android: Make \"splash\" the default resource ID instead of null\"\n* Use TRAVIS_BUILD_DIR, install paramedic by npm\n* [CB-8345](https://issues.apache.org/jira/browse/CB-8345) android: Make \"splash\" the default resource ID instead of null\n* docs: added Windows to supported platforms\n* [CB-7964](https://issues.apache.org/jira/browse/CB-7964) Add cordova-plugin-splashscreen support for browser platform\n* [CB-8653](https://issues.apache.org/jira/browse/CB-8653) Updated Readme\n* [wp8] oops, Added back config parse result checks\n* [WP8] code cleanup, minor refactors, comments to clarify some stuff.\n* Extend WP8 Splash Screen to respect SplashScreen and SplashScreenDelay preferences from config file\n* [CB-8574](https://issues.apache.org/jira/browse/CB-8574) Integrate TravisCI\n* [CB-8438](https://issues.apache.org/jira/browse/CB-8438) cordova-plugin-splashscreen documentation translation: cordova-plugin-splashscreen\n* [CB-8538](https://issues.apache.org/jira/browse/CB-8538) Added package.json file\n* [CB-8397](https://issues.apache.org/jira/browse/CB-8397) Add support to 'windows' for showing the Windows Phone splashscreen\n\n### 1.0.0 (Feb 04, 2015)\n* [CB-8351](https://issues.apache.org/jira/browse/CB-8351) ios: Stop using deprecated IsIpad macro\n* [CB-3679](https://issues.apache.org/jira/browse/CB-3679) Add engine tag for Android >= 3.6.0 due to use of `preferences`\n* [CB-3679](https://issues.apache.org/jira/browse/CB-3679) Make SplashScreen plugin compatible with cordova-android@4.0.x\n\n### 0.3.5 (Dec 02, 2014)\n* [CB-7204](https://issues.apache.org/jira/browse/CB-7204) - Race condition when hiding and showing spinner (closes #21)\n* [CB-7700](https://issues.apache.org/jira/browse/CB-7700) cordova-plugin-splashscreen documentation translation: cordova-plugin-splashscreen\n\n### 0.3.4 (Oct 03, 2014)\n* Finalized iOS splash screen (image name) tests. 176 tests in all, 44 for each type of device (iPad, iPhone, iPhone5, iPhone6, iPhone 6 Plus).\n* [CB-7633](https://issues.apache.org/jira/browse/CB-7633) - (Re-fix based on updated unit tests) iPhone 6 Plus support\n* Updated iOS tests for locked orientations\n* Added more iOS splash screen tests.\n* [CB-7633](https://issues.apache.org/jira/browse/CB-7633) - Add support for iPhone 6/6+\n* Added failing iPhone 6/6 Plus tests.\n* Added 'npm test'\n* [CB-7663](https://issues.apache.org/jira/browse/CB-7663) - iOS unit tests for splash screen\n* Properly formatted splashscreen preference docs.\n\n### 0.3.3 (Sep 17, 2014)\n* [CB-7249](https://issues.apache.org/jira/browse/CB-7249) cordova-plugin-splashscreen documentation translation\n* Renamed test dir, added nested `plugin.xml`\n* added documentation for manual tests\n* [CB-7196](https://issues.apache.org/jira/browse/CB-7196) port splashscreen tests to framework\n\n### 0.3.2 (Aug 06, 2014)\n* [CB-6127](https://issues.apache.org/jira/browse/CB-6127) Updated translations for docs\n* [CB-7041](https://issues.apache.org/jira/browse/CB-7041) ios: Fix image filename logic when setting the iPad splash screen\n* fixes Splashscreen crash on WP8\n* Remove outdated doc\n\n### 0.3.1 (Jun 05, 2014)\n* documentation translation: cordova-plugin-splashscreen\n* Lisa testing pulling in plugins for plugin: cordova-plugin-splashscreen\n* Lisa testing pulling in plugins for plugin: cordova-plugin-splashscreen\n* Lisa testing pulling in plugins for plugin: cordova-plugin-splashscreen\n* Lisa testing pulling in plugins for plugin: cordova-plugin-splashscreen\n* [CB-6810](https://issues.apache.org/jira/browse/CB-6810) Add license to CONTRIBUTING.md\n* [wp8] updated quirk for  and combined iOS,WP8,BB10 quirks as they are all the same\n* [wp] implemented OnInit so splash screen can be shown before cordova page is loaded\n* [wp] plugin must be autoloaded for AutoHideSplashScreen preference to work\n* [CB-6483](https://issues.apache.org/jira/browse/CB-6483) Use splash screen image from manifest on Windows8\n* [CB-6491](https://issues.apache.org/jira/browse/CB-6491) add CONTRIBUTING.md\n* Revert \"Merge branch 'tizen' of http://github.com/siovene/cordova-plugin-splashscreen\"\n\n### 0.3.0 (Apr 17, 2014)\n* Add Tizen support to plugin\n* [CB-6422](https://issues.apache.org/jira/browse/CB-6422): [windows8] use cordova/exec/proxy\n* [CB-4051](https://issues.apache.org/jira/browse/CB-4051): [ios] - Re-fix - Splashscreen rotation problem (closes #13)\n* [CB-6460](https://issues.apache.org/jira/browse/CB-6460): Update license headers\n* [CB-6465](https://issues.apache.org/jira/browse/CB-6465): Add license headers to Tizen code\n* Add NOTICE file\n\n### 0.2.7 (Feb 05, 2014)\n* [CB-3562](https://issues.apache.org/jira/browse/CB-3562) Fix aspect ratio on landscape-only iPhone applications\n* [CB-4051](https://issues.apache.org/jira/browse/CB-4051) fix for splashscreen rotation problem\n\n### 0.2.6 (Jan 02, 2014)\n* [CB-5658](https://issues.apache.org/jira/browse/CB-5658) Add doc/index.md for Splashscreen plugin\n* Handle error when splash image is missing.\n\n### 0.2.5 (Dec 4, 2013)\n* add ubuntu platform\n* Added amazon-fireos platform. Change to use amazon-fireos as a platform if the user agent string contains 'cordova-amazon-fireos'\n* [CB-5124](https://issues.apache.org/jira/browse/CB-5124) - Remove splashscreen config.xml values from iOS Configuration Docs, move to plugin docs\n\n### 0.2.4 (Oct 28, 2013)\n* [CB-5128](https://issues.apache.org/jira/browse/CB-5128): add repo + issue tag to `plugin.xml` for splashscreen plugin\n* [CB-5010](https://issues.apache.org/jira/browse/CB-5010) Incremented plugin version on dev branch.\n\n### 0.2.3 (Oct 9, 2013)\n* [CB-4806](https://issues.apache.org/jira/browse/CB-4806) Re-fix Update splashscreen image bounds for iOS 7\n* [CB-4934](https://issues.apache.org/jira/browse/CB-4934) plugin-splashscreen should not show by default on Windows8\n* [CB-4929](https://issues.apache.org/jira/browse/CB-4929) plugin-splashscreen not loading proxy windows8\n* [CB-4915](https://issues.apache.org/jira/browse/CB-4915) Incremented plugin version on dev branch.\n\n### 0.2.2 (Sept 25, 2013)\n* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) bumping&resetting version\n* [CB-4889](https://issues.apache.org/jira/browse/CB-4889) renaming org.apache.cordova.core.splashscreen to org.apache.cordova.splashscreen\n* Rename CHANGELOG.md -> RELEASENOTES.md\n* [CB-4806](https://issues.apache.org/jira/browse/CB-4806) Update splashscreen image bounds for iOS 7\n* [CB-4752](https://issues.apache.org/jira/browse/CB-4752) Incremented plugin version on dev branch.\n","size_bytes":18768},"okul-app/plugins/cordova-plugin-whitelist/CONTRIBUTING.md":{"content":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n\n# Contributing to Apache Cordova\n\nAnyone can contribute to Cordova. And we need your contributions.\n\nThere are multiple ways to contribute: report bugs, improve the docs, and\ncontribute code.\n  \nFor instructions on this, start with the\n[contribution overview](http://cordova.apache.org/contribute/).\n\nThe details are explained there, but the important items are:\n - Check for Github issues that corresponds to your contribution and link or create them if necessary.\n - Run the tests so your patch doesn't break existing functionality.\n\nWe look forward to your contributions!\n\n","size_bytes":1374},"okul-app/plugins/cordova-plugin-whitelist/README.md":{"content":"---\ntitle: Whitelist\ndescription: Whitelist external content accessible by your app.\n---\n<!--\n# license: Licensed to the Apache Software Foundation (ASF) under one\n#         or more contributor license agreements.  See the NOTICE file\n#         distributed with this work for additional information\n#         regarding copyright ownership.  The ASF licenses this file\n#         to you under the Apache License, Version 2.0 (the\n#         \"License\"); you may not use this file except in compliance\n#         with the License.  You may obtain a copy of the License at\n#\n#           http://www.apache.org/licenses/LICENSE-2.0\n#\n#         Unless required by applicable law or agreed to in writing,\n#         software distributed under the License is distributed on an\n#         \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#         KIND, either express or implied.  See the License for the\n#         specific language governing permissions and limitations\n#         under the License.\n-->\n\n# cordova-plugin-whitelist\n\nThis plugin implements a whitelist policy for navigating the application webview on Cordova 4.0\n\n### Deprecation Notice\n\nWith the Allow List functionality now integrated into the core of Cordova Android (10.x and greater), this plugin is no longer required.\n\nExisting projects using Cordova Android 10 or greater should remove this plugin with the following command:\n\n```bash\ncordova plugin rm cordova-plugin-whitelist\n```\n\n## Installation\n\nYou can install whitelist plugin with Cordova CLI, from npm:\n\n```\n$ cordova plugin add cordova-plugin-whitelist\n$ cordova prepare\n```\n\n## Supported Cordova Platforms\n\n* Android 4.0.0 or above\n\n## Navigation Whitelist\n\nControls which URLs the WebView itself can be navigated to. Applies to\ntop-level navigations only.\n\nBy default navigations are only allowed to `file://` URLs. To allow others URLs, you must add `<allow-navigation>` tags to your `config.xml`:\n\n```xml\n<!-- Allow links to example.com -->\n<allow-navigation href=\"http://example.com/*\" />\n\n<!-- Wildcards are allowed for the protocol, as a prefix\n     to the host, or as a suffix to the path -->\n<allow-navigation href=\"*://*.example.com/*\" />\n\n<!-- A wildcard can be used to whitelist the entire network,\n     over HTTP and HTTPS.\n     *NOT RECOMMENDED* -->\n<allow-navigation href=\"*\" />\n\n<!-- The above is equivalent to these three declarations -->\n<allow-navigation href=\"http://*/*\" />\n<allow-navigation href=\"https://*/*\" />\n<allow-navigation href=\"data:*\" />\n```\n\nQuirks: on Android it also applies to iframes for non-http(s) schemes.\n\n## Intent Whitelist\n\nControls which URLs the app is allowed to ask the system to open.\n\nIn `config.xml`, add `<allow-intent>` tags, like this:\n\n```xml\n<!-- Allow links to web pages to open in a browser -->\n<allow-intent href=\"http://*/*\" />\n<allow-intent href=\"https://*/*\" />\n\n<!-- Allow links to example.com to open in a browser -->\n<allow-intent href=\"http://example.com/*\" />\n\n<!-- Wildcards are allowed for the protocol, as a prefix\n     to the host, or as a suffix to the path -->\n<allow-intent href=\"*://*.example.com/*\" />\n\n<!-- Allow SMS links to open messaging app -->\n<allow-intent href=\"sms:*\" />\n\n<!-- Allow tel: links to open the dialer -->\n<allow-intent href=\"tel:*\" />\n\n<!-- Allow geo: links to open maps -->\n<allow-intent href=\"geo:*\" />\n\n<!-- Allow all unrecognized URLs to open installed apps\n     *NOT RECOMMENDED* -->\n<allow-intent href=\"*\" />\n```\n\nWithout any `<allow-intent>` tags, no requests to external URLs are allowed. However, the default Cordova application includes a quite liberal set of `allow-intent` entries by default. It is advised to narrow this down based on each app's needs.\n\nOn Android, this equates to sending an intent of type BROWSEABLE.\n\nThis whitelist does not apply to plugins, only hyperlinks and calls to `window.open()`.\n\nNote: `allow-navigation` takes precedence over `allow-intent`. Allowing navigation to all URLs with `<allow-navigation href=\"*\" />` for example has the side effect of \"capturing\" all intents, so the webview navigates to them instead of triggering e.g. external apps.\n\n## Network Request Whitelist\n\nControls which network requests (images, XHRs, etc) are allowed to be made (via cordova native hooks).\n\nNote: We suggest you use a Content Security Policy (see below), which is more secure.  This whitelist is mostly historical for webviews which do not support CSP.\n\nIn `config.xml`, add `<access>` tags, like this:\n\n```xml\n<!-- Allow images, xhrs, etc. to google.com -->\n<access origin=\"http://google.com\" />\n<access origin=\"https://google.com\" />\n\n<!-- Access to the subdomain maps.google.com -->\n<access origin=\"http://maps.google.com\" />\n\n<!-- Access to all the subdomains on google.com -->\n<access origin=\"http://*.google.com\" />\n\n<!-- Enable requests to content: URLs -->\n<access origin=\"content:///*\" />\n\n<!-- Don't block any requests -->\n<access origin=\"*\" />\n```\n\nWithout any `<access>` tags, only requests to `file://` URLs are allowed. However, the default Cordova application includes `<access origin=\"*\">` by default.\n\nNote: Whitelist cannot block network redirects from a whitelisted remote website (i.e. http or https) to a non-whitelisted website. Use CSP rules to mitigate redirects to non-whitelisted websites for webviews that support CSP.\n\nQuirk: Android also allows requests to https://ssl.gstatic.com/accessibility/javascript/android/ by default, since this is required for TalkBack to function properly.\n\n### Content Security Policy\n\nControls which network requests (images, XHRs, etc) are allowed to be made (via webview directly).\n\nOn Android and iOS, the network request whitelist (see above) is not able to filter all types of requests (e.g. `<video>` & WebSockets are not blocked). So, in addition to the whitelist, you should use a [Content Security Policy](http://content-security-policy.com/) `<meta>` tag on all of your pages.\n\nOn Android, support for CSP within the system webview starts with KitKat (but is available on all versions using Crosswalk WebView).\n\nHere are some example CSP declarations for your `.html` pages:\n\n```html\n<!-- Good default declaration:\n    * gap: is required only on iOS (when using UIWebView) and is needed for JS->native communication\n    * https://ssl.gstatic.com is required only on Android and is needed for TalkBack to function properly\n    * Disables use of eval() and inline scripts in order to mitigate risk of XSS vulnerabilities. To change this:\n        * Enable inline JS: add 'unsafe-inline' to default-src\n        * Enable eval(): add 'unsafe-eval' to default-src\n-->\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' data: gap: https://ssl.gstatic.com; style-src 'self' 'unsafe-inline'; media-src *\">\n\n<!-- Allow everything but only from the same origin and foo.com -->\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' foo.com\">\n\n<!-- This policy allows everything (eg CSS, AJAX, object, frame, media, etc) except that \n    * CSS only from the same origin and inline styles,\n    * scripts only from the same origin and inline styles, and eval()\n-->\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src *; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'\">\n\n<!-- Allows XHRs only over HTTPS on the same domain. -->\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' https:\">\n\n<!-- Allow iframe to https://cordova.apache.org/ -->\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; frame-src 'self' https://cordova.apache.org\">\n```\n","size_bytes":7576},"okul-app/plugins/cordova-plugin-whitelist/RELEASENOTES.md":{"content":"<!--\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n#  KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n-->\n# Release Notes\n\n### 1.3.5 (Jun 26, 2021)\n-   fix: lock next patch release to `cordova-android` <10 (#62)\n-   breaking: deprecate plugin (#59)\n-   ci: add node-14.x to workflow (#58)\n-   chore: clean up `package.json` (#56)\n-   ci(travis): update osx xcode image (#55)\n-   ci(travis): updates **Android*- API level (#54)\n-   chore(asf): update git notification settings\n-   Update CONTRIBUTING.md\n-   ci: updates Node.js version (#52)\n-   chore(npm): improve ignore list (#51)\n-   docs: apply syntax highlighting to code samples (#48)\n-   ci: upgrade to node 8\n\n### 1.3.4 (Jun 19, 2019)\n\n-   chore: manually fix lines breaks to LF ([`d804ef2`](https://github.com/apache/cordova-plugin-whitelist/commit/d804ef2))\n-   build: add `.gitattributes` to force LF (instead of possible CRLF on Windows) ([`ed0206b`](https://github.com/apache/cordova-plugin-whitelist/commit/ed0206b))\n-   build: add `.npmignore` to remove unneeded files from npm package ([`bf8fea5`](https://github.com/apache/cordova-plugin-whitelist/commit/bf8fea5))\n-   test,ci(travis): Tests (extracted from cordova-mobile-spec) ([#38](https://github.com/apache/cordova-plugin-whitelist/issues/38)) ([`e4f17b0`](https://github.com/apache/cordova-plugin-whitelist/commit/e4f17b0))\n-   docs: Added information on allow-navigation preceding allow-intent ([#41](https://github.com/apache/cordova-plugin-whitelist/issues/41)) ([`7725fed`](https://github.com/apache/cordova-plugin-whitelist/commit/7725fed))\n-   chore(github): Add or update GitHub pull request and issue template ([`86b3ee1`](https://github.com/apache/cordova-plugin-whitelist/commit/86b3ee1))\n-   fix: Remove information about cordova-android ([#27](https://github.com/apache/cordova-plugin-whitelist/issues/27)) ([`34ed9d0`](https://github.com/apache/cordova-plugin-whitelist/commit/34ed9d0))\n-   docs: remove JIRA link ([`fa78675`](https://github.com/apache/cordova-plugin-whitelist/commit/fa78675))\n-   docs: Clarify unconfigured Intent Whitelist behaviour ([#26](https://github.com/apache/cordova-plugin-whitelist/issues/26)) ([`8d3f86b`](https://github.com/apache/cordova-plugin-whitelist/commit/8d3f86b))\n\n### 1.3.3 (Nov 06, 2017)\n* [CB-12847](https://issues.apache.org/jira/browse/CB-12847) added `bugs` entry to `package.json`.\n\n### 1.3.2 (Feb 28, 2017)\n* [CB-12236](https://issues.apache.org/jira/browse/CB-12236) Fixed `RELEASENOTES` for `cordova-plugin-whitelist`\n\n### 1.3.1 (Dec 07, 2016)\n* [CB-12224](https://issues.apache.org/jira/browse/CB-12224) Updated version and RELEASENOTES.md for release 1.3.1\n* [CB-11917](https://issues.apache.org/jira/browse/CB-11917) - Remove pull request template checklist item: \"iCLA has been submitted…\"\n* Edit package.json license to match SPDX id\n* [CB-11832](https://issues.apache.org/jira/browse/CB-11832) Incremented plugin version.\n\n### 1.3.0 (Sep 08, 2016)\n* [CB-11795](https://issues.apache.org/jira/browse/CB-11795) Add 'protective' entry to cordovaDependencies\n* Updated installation section\n* Plugin uses `Android Log class` and not `Cordova LOG class`\n* Add pull request template.\n* [CB-10866](https://issues.apache.org/jira/browse/CB-10866) Adding engine info to `package.json`\n* [CB-10996](https://issues.apache.org/jira/browse/CB-10996) Adding front matter to README.md\n\n### 1.2.2 (Apr 15, 2016)\n* add note about redirects\n* [CB-10624](https://issues.apache.org/jira/browse/CB-10624) remove error message from `whitelist.js`, which leaves it empty\n\n### 1.2.1 (Jan 15, 2016)\n* [CB-10194](https://issues.apache.org/jira/browse/CB-10194) info tag prints for ios when not applicable\n\n### 1.2.0 (Nov 18, 2015)\n* removed **iOS** engine check from `plugin.xml`\n* [CB-10035](https://issues.apache.org/jira/browse/CB-10035) Updated `RELEASENOTES` to be newest to oldest\n* [CB-9972](https://issues.apache.org/jira/browse/CB-9972) - Remove **iOS** whitelist\n* Updated the text, it should read 4.0.x and greater, since this plugin will be required for `cordova-android 5.0`\n* Fixing contribute link.\n* Updated `plugin.xml <info>` tag to remove warning about not needing this plugin if you are using the **iOS 9 SDK**\n* [CB-9738](https://issues.apache.org/jira/browse/CB-9738) - Disable whitelist use when runtime environment is **iOS 9**\n* [CB-9740](https://issues.apache.org/jira/browse/CB-9740) - Add `<info>` tag describing whitelist plugin not needed on `cordova-ios` and cordova-android 3.x`\n* [CB-9568](https://issues.apache.org/jira/browse/CB-9568) - Update whitelist plugin to allow all network access by default\n* [CB-9337](https://issues.apache.org/jira/browse/CB-9337) - enable use of `<access>` tags for native code network requests\n\n### 1.1.0 (Jun 17, 2015)\n* [CB-9128](https://issues.apache.org/jira/browse/CB-9128) cordova-plugin-whitelist documentation translation: cordova-plugin-whitelist\n* fix npm md issue\n* Usage of CDVURLRequestFilter protocol.\n* [CB-9089](https://issues.apache.org/jira/browse/CB-9089) - iOS whitelist plugin does not compile\n* [CB-9090](https://issues.apache.org/jira/browse/CB-9090) - Enable whitelist plugin for cordova-ios 4.0.0\n* Fixed error in Content-Security-Policy example\n\n### 1.0.0 (Mar 25, 2015)\n* [CB-8739](https://issues.apache.org/jira/browse/CB-8739) added missing license headers\n* Add @Override to CustomConfigXmlParser methods\n* Change ID to cordova-plugin-whitelist rather than reverse-DNS-style\n* Tweak CSP examples in README\n* [CB-8660](https://issues.apache.org/jira/browse/CB-8660) remove extra commas from package.json\n","size_bytes":6256},"okul-app/platforms/android/cordova/Api.js":{"content":"/**\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n*/\n\nmodule.exports = require('cordova-android');\n","size_bytes":862},"okul-app/platforms/android/platform_www/cordova.js":{"content":"// Platform: cordova-android\n// cordova-js 6.1.0\n/*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n*/\n;(function() {\nvar PLATFORM_VERSION_BUILD_LABEL = '14.0.1';\n// file: src/scripts/require.js\nvar require;\nvar define;\n\n(function () {\n    var modules = {};\n    // Stack of moduleIds currently being built.\n    var requireStack = [];\n    // Map of module ID -> index into requireStack of modules currently being built.\n    var inProgressModules = {};\n    var SEPARATOR = '.';\n\n    function build (module) {\n        var factory = module.factory;\n        var localRequire = function (id) {\n            var resultantId = id;\n            // Its a relative path, so lop off the last portion and add the id (minus \"./\")\n            if (id.charAt(0) === '.') {\n                resultantId = module.id.slice(0, module.id.lastIndexOf(SEPARATOR)) + SEPARATOR + id.slice(2);\n            }\n            return require(resultantId);\n        };\n        module.exports = {};\n        delete module.factory;\n        factory(localRequire, module.exports, module);\n        return module.exports;\n    }\n\n    require = function (id) {\n        if (!modules[id]) {\n            throw new Error('module ' + id + ' not found');\n        } else if (id in inProgressModules) {\n            var cycle = requireStack.slice(inProgressModules[id]).join('->') + '->' + id;\n            throw new Error('Cycle in require graph: ' + cycle);\n        }\n        if (modules[id].factory) {\n            try {\n                inProgressModules[id] = requireStack.length;\n                requireStack.push(id);\n                return build(modules[id]);\n            } finally {\n                delete inProgressModules[id];\n                requireStack.pop();\n            }\n        }\n        return modules[id].exports;\n    };\n\n    define = function (id, factory) {\n        if (Object.prototype.hasOwnProperty.call(modules, id)) {\n            throw new Error('module ' + id + ' already defined');\n        }\n\n        modules[id] = {\n            id: id,\n            factory: factory\n        };\n    };\n\n    define.remove = function (id) {\n        delete modules[id];\n    };\n\n    define.moduleMap = modules;\n})();\n\n// Export for use in node\nif (typeof module === 'object' && typeof require === 'function') {\n    module.exports.require = require;\n    module.exports.define = define;\n}\n\n// file: src/cordova.js\ndefine(\"cordova\", function(require, exports, module) {\n\n// Workaround for Windows 10 in hosted environment case\n// http://www.w3.org/html/wg/drafts/html/master/browsers.html#named-access-on-the-window-object\nif (window.cordova && !(window.cordova instanceof HTMLElement)) {\n    throw new Error('cordova already defined');\n}\n\nvar channel = require('cordova/channel');\nvar platform = require('cordova/platform');\n\n/**\n * Intercept calls to addEventListener + removeEventListener and handle deviceready,\n * resume, and pause events.\n */\nvar m_document_addEventListener = document.addEventListener;\nvar m_document_removeEventListener = document.removeEventListener;\nvar m_window_addEventListener = window.addEventListener;\nvar m_window_removeEventListener = window.removeEventListener;\n\n/**\n * Houses custom event handlers to intercept on document + window event listeners.\n */\nvar documentEventHandlers = {};\nvar windowEventHandlers = {};\n\ndocument.addEventListener = function (evt, handler, capture) {\n    var e = evt.toLowerCase();\n    if (typeof documentEventHandlers[e] !== 'undefined') {\n        documentEventHandlers[e].subscribe(handler);\n    } else {\n        m_document_addEventListener.call(document, evt, handler, capture);\n    }\n};\n\nwindow.addEventListener = function (evt, handler, capture) {\n    var e = evt.toLowerCase();\n    if (typeof windowEventHandlers[e] !== 'undefined') {\n        windowEventHandlers[e].subscribe(handler);\n    } else {\n        m_window_addEventListener.call(window, evt, handler, capture);\n    }\n};\n\ndocument.removeEventListener = function (evt, handler, capture) {\n    var e = evt.toLowerCase();\n    // If unsubscribing from an event that is handled by a plugin\n    if (typeof documentEventHandlers[e] !== 'undefined') {\n        documentEventHandlers[e].unsubscribe(handler);\n    } else {\n        m_document_removeEventListener.call(document, evt, handler, capture);\n    }\n};\n\nwindow.removeEventListener = function (evt, handler, capture) {\n    var e = evt.toLowerCase();\n    // If unsubscribing from an event that is handled by a plugin\n    if (typeof windowEventHandlers[e] !== 'undefined') {\n        windowEventHandlers[e].unsubscribe(handler);\n    } else {\n        m_window_removeEventListener.call(window, evt, handler, capture);\n    }\n};\n\nfunction createEvent (type, data) {\n    var event = document.createEvent('Events');\n    event.initEvent(type, false, false);\n    if (data) {\n        for (var i in data) {\n            if (Object.prototype.hasOwnProperty.call(data, i)) {\n                event[i] = data[i];\n            }\n        }\n    }\n    return event;\n}\n\nvar cordova = {\n    define: define,\n    require: require,\n    version: PLATFORM_VERSION_BUILD_LABEL,\n    platformVersion: PLATFORM_VERSION_BUILD_LABEL,\n    platformId: platform.id,\n\n    /**\n     * Methods to add/remove your own addEventListener hijacking on document + window.\n     */\n    addWindowEventHandler: function (event) {\n        return (windowEventHandlers[event] = channel.create(event));\n    },\n    addStickyDocumentEventHandler: function (event) {\n        return (documentEventHandlers[event] = channel.createSticky(event));\n    },\n    addDocumentEventHandler: function (event) {\n        return (documentEventHandlers[event] = channel.create(event));\n    },\n    removeWindowEventHandler: function (event) {\n        delete windowEventHandlers[event];\n    },\n    removeDocumentEventHandler: function (event) {\n        delete documentEventHandlers[event];\n    },\n\n    /**\n     * Retrieve original event handlers that were replaced by Cordova\n     *\n     * @return object\n     */\n    getOriginalHandlers: function () {\n        return {\n            document: {\n                addEventListener: m_document_addEventListener,\n                removeEventListener: m_document_removeEventListener\n            },\n            window: {\n                addEventListener: m_window_addEventListener,\n                removeEventListener: m_window_removeEventListener\n            }\n        };\n    },\n\n    /**\n     * Method to fire event from native code\n     * bNoDetach is required for events which cause an exception which needs to be caught in native code\n     */\n    fireDocumentEvent: function (type, data, bNoDetach) {\n        var evt = createEvent(type, data);\n        if (typeof documentEventHandlers[type] !== 'undefined') {\n            if (bNoDetach) {\n                documentEventHandlers[type].fire(evt);\n            } else {\n                setTimeout(function () {\n                    // Fire deviceready on listeners that were registered before cordova.js was loaded.\n                    if (type === 'deviceready') {\n                        document.dispatchEvent(evt);\n                    }\n                    documentEventHandlers[type].fire(evt);\n                }, 0);\n            }\n        } else {\n            document.dispatchEvent(evt);\n        }\n    },\n\n    fireWindowEvent: function (type, data) {\n        var evt = createEvent(type, data);\n        if (typeof windowEventHandlers[type] !== 'undefined') {\n            setTimeout(function () {\n                windowEventHandlers[type].fire(evt);\n            }, 0);\n        } else {\n            window.dispatchEvent(evt);\n        }\n    },\n\n    /**\n     * Plugin callback mechanism.\n     */\n    // Randomize the starting callbackId to avoid collisions after refreshing or navigating.\n    // This way, it's very unlikely that any new callback would get the same callbackId as an old callback.\n    callbackId: Math.floor(Math.random() * 2000000000),\n    callbacks: {},\n    callbackStatus: {\n        NO_RESULT: 0,\n        OK: 1,\n        CLASS_NOT_FOUND_EXCEPTION: 2,\n        ILLEGAL_ACCESS_EXCEPTION: 3,\n        INSTANTIATION_EXCEPTION: 4,\n        MALFORMED_URL_EXCEPTION: 5,\n        IO_EXCEPTION: 6,\n        INVALID_ACTION: 7,\n        JSON_EXCEPTION: 8,\n        ERROR: 9\n    },\n\n    /**\n     * Called by native code when returning successful result from an action.\n     */\n    callbackSuccess: function (callbackId, args) {\n        cordova.callbackFromNative(callbackId, true, args.status, [args.message], args.keepCallback);\n    },\n\n    /**\n     * Called by native code when returning error result from an action.\n     */\n    callbackError: function (callbackId, args) {\n        // TODO: Deprecate callbackSuccess and callbackError in favour of callbackFromNative.\n        // Derive success from status.\n        cordova.callbackFromNative(callbackId, false, args.status, [args.message], args.keepCallback);\n    },\n\n    /**\n     * Called by native code when returning the result from an action.\n     */\n    callbackFromNative: function (callbackId, isSuccess, status, args, keepCallback) {\n        try {\n            var callback = cordova.callbacks[callbackId];\n            if (callback) {\n                if (isSuccess && status === cordova.callbackStatus.OK) {\n                    callback.success && callback.success.apply(null, args);\n                } else if (!isSuccess) {\n                    callback.fail && callback.fail.apply(null, args);\n                }\n                /*\n                else\n                    Note, this case is intentionally not caught.\n                    this can happen if isSuccess is true, but callbackStatus is NO_RESULT\n                    which is used to remove a callback from the list without calling the callbacks\n                    typically keepCallback is false in this case\n                */\n                // Clear callback if not expecting any more results\n                if (!keepCallback) {\n                    delete cordova.callbacks[callbackId];\n                }\n            }\n        } catch (err) {\n            var msg = 'Error in ' + (isSuccess ? 'Success' : 'Error') + ' callbackId: ' + callbackId + ' : ' + err;\n            cordova.fireWindowEvent('cordovacallbackerror', { message: msg, error: err });\n            throw err;\n        }\n    },\n\n    addConstructor: function (func) {\n        channel.onCordovaReady.subscribe(function () {\n            try {\n                func();\n            } catch (e) {\n                console.log('Failed to run constructor: ' + e);\n            }\n        });\n    }\n};\n\nmodule.exports = cordova;\n\n});\n\n// file: ../../cordova-js-src/android/nativeapiprovider.js\ndefine(\"cordova/android/nativeapiprovider\", function(require, exports, module) {\n\n/**\n * Exports the ExposedJsApi.java object if available, otherwise exports the PromptBasedNativeApi.\n */\n\nvar nativeApi = this._cordovaNative || require('cordova/android/promptbasednativeapi');\nvar currentApi = nativeApi;\n\nmodule.exports = {\n    get: function () { return currentApi; },\n    setPreferPrompt: function (value) {\n        currentApi = value ? require('cordova/android/promptbasednativeapi') : nativeApi;\n    },\n    // Used only by tests.\n    set: function (value) {\n        currentApi = value;\n    }\n};\n\n});\n\n// file: ../../cordova-js-src/android/promptbasednativeapi.js\ndefine(\"cordova/android/promptbasednativeapi\", function(require, exports, module) {\n\n/**\n * Implements the API of ExposedJsApi.java, but uses prompt() to communicate.\n * This is used pre-JellyBean, where addJavascriptInterface() is disabled.\n */\n\nmodule.exports = {\n    exec: function (bridgeSecret, service, action, callbackId, argsJson) {\n        return prompt(argsJson, 'gap:' + JSON.stringify([bridgeSecret, service, action, callbackId]));\n    },\n    setNativeToJsBridgeMode: function (bridgeSecret, value) {\n        prompt(value, 'gap_bridge_mode:' + bridgeSecret);\n    },\n    retrieveJsMessages: function (bridgeSecret, fromOnlineEvent) {\n        return prompt(+fromOnlineEvent, 'gap_poll:' + bridgeSecret);\n    }\n};\n\n});\n\n// file: src/common/argscheck.js\ndefine(\"cordova/argscheck\", function(require, exports, module) {\n\nvar utils = require('cordova/utils');\n\nvar moduleExports = module.exports;\n\nvar typeMap = {\n    A: 'Array',\n    D: 'Date',\n    N: 'Number',\n    S: 'String',\n    F: 'Function',\n    O: 'Object'\n};\n\nfunction extractParamName (callee, argIndex) {\n    return (/\\(\\s*([^)]*?)\\s*\\)/).exec(callee)[1].split(/\\s*,\\s*/)[argIndex];\n}\n\n/**\n * Checks the given arguments' types and throws if they are not as expected.\n *\n * `spec` is a string where each character stands for the required type of the\n * argument at the same position. In other words: the character at `spec[i]`\n * specifies the required type for `args[i]`. The characters in `spec` are the\n * first letter of the required type's name. The supported types are:\n *\n *     Array, Date, Number, String, Function, Object\n *\n * Lowercase characters specify arguments that must not be `null` or `undefined`\n * while uppercase characters allow those values to be passed.\n *\n * Finally, `*` can be used to allow any type at the corresponding position.\n *\n * @example\n * function foo (arr, opts) {\n *     // require `arr` to be an Array and `opts` an Object, null or undefined\n *     checkArgs('aO', 'my.package.foo', arguments);\n *     // ...\n * }\n * @param {String} spec - the type specification for `args` as described above\n * @param {String} functionName - full name of the callee.\n * Used in the error message\n * @param {Array|arguments} args - the arguments to be checked against `spec`\n * @param {Function} [opt_callee=args.callee] - the recipient of `args`.\n * Used to extract parameter names for the error message\n * @throws {TypeError} if args do not satisfy spec\n */\nfunction checkArgs (spec, functionName, args, opt_callee) {\n    if (!moduleExports.enableChecks) {\n        return;\n    }\n    var errMsg = null;\n    var typeName;\n    for (var i = 0; i < spec.length; ++i) {\n        var c = spec.charAt(i);\n        var cUpper = c.toUpperCase();\n        var arg = args[i];\n        // Asterix means allow anything.\n        if (c === '*') {\n            continue;\n        }\n        typeName = utils.typeName(arg);\n        if ((arg === null || arg === undefined) && c === cUpper) {\n            continue;\n        }\n        if (typeName !== typeMap[cUpper]) {\n            errMsg = 'Expected ' + typeMap[cUpper];\n            break;\n        }\n    }\n    if (errMsg) {\n        errMsg += ', but got ' + typeName + '.';\n        errMsg = 'Wrong type for parameter \"' + extractParamName(opt_callee || args.callee, i) + '\" of ' + functionName + ': ' + errMsg;\n        // Don't log when running unit tests.\n        if (typeof jasmine === 'undefined') {\n            console.error(errMsg);\n        }\n        throw TypeError(errMsg);\n    }\n}\n\nfunction getValue (value, defaultValue) {\n    return value === undefined ? defaultValue : value;\n}\n\nmoduleExports.checkArgs = checkArgs;\nmoduleExports.getValue = getValue;\nmoduleExports.enableChecks = true;\n\n});\n\n// file: src/common/base64.js\ndefine(\"cordova/base64\", function(require, exports, module) {\n\nvar base64 = exports;\n\nbase64.fromArrayBuffer = function (arrayBuffer) {\n    var array = new Uint8Array(arrayBuffer);\n    return uint8ToBase64(array);\n};\n\nbase64.toArrayBuffer = function (str) {\n    var decodedStr = atob(str);\n    var arrayBuffer = new ArrayBuffer(decodedStr.length);\n    var array = new Uint8Array(arrayBuffer);\n    for (var i = 0, len = decodedStr.length; i < len; i++) {\n        array[i] = decodedStr.charCodeAt(i);\n    }\n    return arrayBuffer;\n};\n\n// ------------------------------------------------------------------------------\n\n/* This code is based on the performance tests at http://jsperf.com/b64tests\n * This 12-bit-at-a-time algorithm was the best performing version on all\n * platforms tested.\n */\n\nvar b64_6bit = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nvar b64_12bit;\n\nvar b64_12bitTable = function () {\n    b64_12bit = [];\n    for (var i = 0; i < 64; i++) {\n        for (var j = 0; j < 64; j++) {\n            b64_12bit[i * 64 + j] = b64_6bit[i] + b64_6bit[j];\n        }\n    }\n    b64_12bitTable = function () { return b64_12bit; };\n    return b64_12bit;\n};\n\nfunction uint8ToBase64 (rawData) {\n    var numBytes = rawData.byteLength;\n    var output = '';\n    var segment;\n    var table = b64_12bitTable();\n    for (var i = 0; i < numBytes - 2; i += 3) {\n        segment = (rawData[i] << 16) + (rawData[i + 1] << 8) + rawData[i + 2];\n        output += table[segment >> 12];\n        output += table[segment & 0xfff];\n    }\n    if (numBytes - i === 2) {\n        segment = (rawData[i] << 16) + (rawData[i + 1] << 8);\n        output += table[segment >> 12];\n        output += b64_6bit[(segment & 0xfff) >> 6];\n        output += '=';\n    } else if (numBytes - i === 1) {\n        segment = (rawData[i] << 16);\n        output += table[segment >> 12];\n        output += '==';\n    }\n    return output;\n}\n\n});\n\n// file: src/common/builder.js\ndefine(\"cordova/builder\", function(require, exports, module) {\n\nvar utils = require('cordova/utils');\n\nfunction each (objects, func, context) {\n    for (var prop in objects) {\n        if (Object.prototype.hasOwnProperty.call(objects, prop)) {\n            func.apply(context, [objects[prop], prop]);\n        }\n    }\n}\n\nfunction clobber (obj, key, value) {\n    var needsProperty = false;\n    try {\n        obj[key] = value;\n    } catch (e) {\n        needsProperty = true;\n    }\n    // Getters can only be overridden by getters.\n    if (needsProperty || obj[key] !== value) {\n        utils.defineGetter(obj, key, function () {\n            return value;\n        });\n    }\n}\n\nfunction assignOrWrapInDeprecateGetter (obj, key, value, message) {\n    if (message) {\n        utils.defineGetter(obj, key, function () {\n            console.log(message);\n            delete obj[key];\n            clobber(obj, key, value);\n            return value;\n        });\n    } else {\n        clobber(obj, key, value);\n    }\n}\n\nfunction include (parent, objects, clobber, merge) {\n    each(objects, function (obj, key) {\n        try {\n            var result = obj.path ? require(obj.path) : {};\n\n            if (clobber) {\n                // Clobber if it doesn't exist.\n                if (typeof parent[key] === 'undefined') {\n                    assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                } else if (typeof obj.path !== 'undefined') {\n                    // If merging, merge properties onto parent, otherwise, clobber.\n                    if (merge) {\n                        recursiveMerge(parent[key], result);\n                    } else {\n                        assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                    }\n                }\n                result = parent[key];\n            } else {\n                // Overwrite if not currently defined.\n                if (typeof parent[key] === 'undefined') {\n                    assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                } else {\n                    // Set result to what already exists, so we can build children into it if they exist.\n                    result = parent[key];\n                }\n            }\n\n            if (obj.children) {\n                include(result, obj.children, clobber, merge);\n            }\n        } catch (e) {\n            utils.alert('Exception building Cordova JS globals: ' + e + ' for key \"' + key + '\"');\n        }\n    });\n}\n\n/**\n * Merge properties from one object onto another recursively.  Properties from\n * the src object will overwrite existing target property.\n *\n * @param target Object to merge properties into.\n * @param src Object to merge properties from.\n */\nfunction recursiveMerge (target, src) {\n    for (var prop in src) {\n        if (Object.prototype.hasOwnProperty.call(src, prop)) {\n            if (target.prototype && target.prototype.constructor === target) {\n                // If the target object is a constructor override off prototype.\n                clobber(target.prototype, prop, src[prop]);\n            } else {\n                if (typeof src[prop] === 'object' && typeof target[prop] === 'object') {\n                    recursiveMerge(target[prop], src[prop]);\n                } else {\n                    clobber(target, prop, src[prop]);\n                }\n            }\n        }\n    }\n}\n\nexports.buildIntoButDoNotClobber = function (objects, target) {\n    include(target, objects, false, false);\n};\nexports.buildIntoAndClobber = function (objects, target) {\n    include(target, objects, true, false);\n};\nexports.buildIntoAndMerge = function (objects, target) {\n    include(target, objects, true, true);\n};\nexports.recursiveMerge = recursiveMerge;\nexports.assignOrWrapInDeprecateGetter = assignOrWrapInDeprecateGetter;\n\n});\n\n// file: src/common/channel.js\ndefine(\"cordova/channel\", function(require, exports, module) {\n\nvar utils = require('cordova/utils');\nvar nextGuid = 1;\n\n/**\n * Custom pub-sub \"channel\" that can have functions subscribed to it\n * This object is used to define and control firing of events for\n * cordova initialization, as well as for custom events thereafter.\n *\n * The order of events during page load and Cordova startup is as follows:\n *\n * onDOMContentLoaded*         Internal event that is received when the web page is loaded and parsed.\n * onNativeReady*              Internal event that indicates the Cordova native side is ready.\n * onCordovaReady*             Internal event fired when all Cordova JavaScript objects have been created.\n * onDeviceReady*              User event fired to indicate that Cordova is ready\n * onResume                    User event fired to indicate a start/resume lifecycle event\n * onPause                     User event fired to indicate a pause lifecycle event\n *\n * The events marked with an * are sticky. Once they have fired, they will stay in the fired state.\n * All listeners that subscribe after the event is fired will be executed right away.\n *\n * The only Cordova events that user code should register for are:\n *      deviceready           Cordova native code is initialized and Cordova APIs can be called from JavaScript\n *      pause                 App has moved to background\n *      resume                App has returned to foreground\n *\n * Listeners can be registered as:\n *      document.addEventListener(\"deviceready\", myDeviceReadyListener, false);\n *      document.addEventListener(\"resume\", myResumeListener, false);\n *      document.addEventListener(\"pause\", myPauseListener, false);\n *\n * The DOM lifecycle events should be used for saving and restoring state\n *      window.onload\n *      window.onunload\n *\n */\n\n/**\n * Channel\n * @constructor\n * @param type  String the channel name\n */\nvar Channel = function (type, sticky) {\n    this.type = type;\n    // Map of guid -> function.\n    this.handlers = {};\n    // 0 = Non-sticky, 1 = Sticky non-fired, 2 = Sticky fired.\n    this.state = sticky ? 1 : 0;\n    // Used in sticky mode to remember args passed to fire().\n    this.fireArgs = null;\n    // Used by onHasSubscribersChange to know if there are any listeners.\n    this.numHandlers = 0;\n    // Function that is called when the first listener is subscribed, or when\n    // the last listener is unsubscribed.\n    this.onHasSubscribersChange = null;\n};\nvar channel = {\n    /**\n     * Calls the provided function only after all of the channels specified\n     * have been fired. All channels must be sticky channels.\n     */\n    join: function (h, c) {\n        var len = c.length;\n        var i = len;\n        var f = function () {\n            if (!(--i)) h();\n        };\n        for (var j = 0; j < len; j++) {\n            if (c[j].state === 0) {\n                throw Error('Can only use join with sticky channels.');\n            }\n            c[j].subscribe(f);\n        }\n        if (!len) h();\n    },\n\n    create: function (type) {\n        return (channel[type] = new Channel(type, false));\n    },\n    createSticky: function (type) {\n        return (channel[type] = new Channel(type, true));\n    },\n\n    /**\n     * cordova Channels that must fire before \"deviceready\" is fired.\n     */\n    deviceReadyChannelsArray: [],\n    deviceReadyChannelsMap: {},\n\n    /**\n     * Indicate that a feature needs to be initialized before it is ready to be used.\n     * This holds up Cordova's \"deviceready\" event until the feature has been initialized\n     * and Cordova.initComplete(feature) is called.\n     *\n     * @param feature {String}     The unique feature name\n     */\n    waitForInitialization: function (feature) {\n        if (feature) {\n            var c = channel[feature] || this.createSticky(feature);\n            this.deviceReadyChannelsMap[feature] = c;\n            this.deviceReadyChannelsArray.push(c);\n        }\n    },\n\n    /**\n     * Indicate that initialization code has completed and the feature is ready to be used.\n     *\n     * @param feature {String}     The unique feature name\n     */\n    initializationComplete: function (feature) {\n        var c = this.deviceReadyChannelsMap[feature];\n        if (c) {\n            c.fire();\n        }\n    }\n};\n\nfunction checkSubscriptionArgument (argument) {\n    if (typeof argument !== 'function' && typeof argument.handleEvent !== 'function') {\n        throw new Error(\n            'Must provide a function or an EventListener object ' +\n                'implementing the handleEvent interface.'\n        );\n    }\n}\n\n/**\n * Subscribes the given function to the channel. Any time that\n * Channel.fire is called so too will the function.\n * Optionally specify an execution context for the function\n * and a guid that can be used to stop subscribing to the channel.\n * Returns the guid.\n */\nChannel.prototype.subscribe = function (eventListenerOrFunction, eventListener) {\n    checkSubscriptionArgument(eventListenerOrFunction);\n    var handleEvent, guid;\n\n    if (eventListenerOrFunction && typeof eventListenerOrFunction === 'object') {\n        // Received an EventListener object implementing the handleEvent interface\n        handleEvent = eventListenerOrFunction.handleEvent;\n        eventListener = eventListenerOrFunction;\n    } else {\n        // Received a function to handle event\n        handleEvent = eventListenerOrFunction;\n    }\n\n    if (this.state === 2) {\n        handleEvent.apply(eventListener || this, this.fireArgs);\n        return;\n    }\n\n    guid = eventListenerOrFunction.observer_guid;\n    if (typeof eventListener === 'object') {\n        handleEvent = utils.close(eventListener, handleEvent);\n    }\n\n    if (!guid) {\n        // First time any channel has seen this subscriber\n        guid = '' + nextGuid++;\n    }\n    handleEvent.observer_guid = guid;\n    eventListenerOrFunction.observer_guid = guid;\n\n    // Don't add the same handler more than once.\n    if (!this.handlers[guid]) {\n        this.handlers[guid] = handleEvent;\n        this.numHandlers++;\n        if (this.numHandlers === 1) {\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n/**\n * Unsubscribes the function with the given guid from the channel.\n */\nChannel.prototype.unsubscribe = function (eventListenerOrFunction) {\n    checkSubscriptionArgument(eventListenerOrFunction);\n    var handleEvent, guid, handler;\n\n    if (eventListenerOrFunction && typeof eventListenerOrFunction === 'object') {\n        // Received an EventListener object implementing the handleEvent interface\n        handleEvent = eventListenerOrFunction.handleEvent;\n    } else {\n        // Received a function to handle event\n        handleEvent = eventListenerOrFunction;\n    }\n\n    guid = handleEvent.observer_guid;\n    handler = this.handlers[guid];\n    if (handler) {\n        delete this.handlers[guid];\n        this.numHandlers--;\n        if (this.numHandlers === 0) {\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n/**\n * Calls all functions subscribed to this channel.\n */\nChannel.prototype.fire = function (e) {\n    var fireArgs = Array.prototype.slice.call(arguments);\n    // Apply stickiness.\n    if (this.state === 1) {\n        this.state = 2;\n        this.fireArgs = fireArgs;\n    }\n    if (this.numHandlers) {\n        // Copy the values first so that it is safe to modify it from within\n        // callbacks.\n        var toCall = [];\n        for (var item in this.handlers) {\n            toCall.push(this.handlers[item]);\n        }\n        for (var i = 0; i < toCall.length; ++i) {\n            toCall[i].apply(this, fireArgs);\n        }\n        if (this.state === 2 && this.numHandlers) {\n            this.numHandlers = 0;\n            this.handlers = {};\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n// defining them here so they are ready super fast!\n// DOM event that is received when the web page is loaded and parsed.\nchannel.createSticky('onDOMContentLoaded');\n\n// Event to indicate the Cordova native side is ready.\nchannel.createSticky('onNativeReady');\n\n// Event to indicate that all Cordova JavaScript objects have been created\n// and it's time to run plugin constructors.\nchannel.createSticky('onCordovaReady');\n\n// Event to indicate that all automatically loaded JS plugins are loaded and ready.\n// FIXME remove this\nchannel.createSticky('onPluginsReady');\n\n// Event to indicate that Cordova is ready\nchannel.createSticky('onDeviceReady');\n\n// Event to indicate a resume lifecycle event\nchannel.create('onResume');\n\n// Event to indicate a pause lifecycle event\nchannel.create('onPause');\n\n// Channels that must fire before \"deviceready\" is fired.\nchannel.waitForInitialization('onCordovaReady');\nchannel.waitForInitialization('onDOMContentLoaded');\n\nmodule.exports = channel;\n\n});\n\n// file: ../../cordova-js-src/exec.js\ndefine(\"cordova/exec\", function(require, exports, module) {\n\n/**\n * Execute a cordova command.  It is up to the native side whether this action\n * is synchronous or asynchronous.  The native side can return:\n *      Synchronous: PluginResult object as a JSON string\n *      Asynchronous: Empty string \"\"\n * If async, the native side will cordova.callbackSuccess or cordova.callbackError,\n * depending upon the result of the action.\n *\n * @param {Function} success    The success callback\n * @param {Function} fail       The fail callback\n * @param {String} service      The name of the service to use\n * @param {String} action       Action to be run in cordova\n * @param {String[]} [args]     Zero or more arguments to pass to the method\n */\nvar cordova = require('cordova');\nvar nativeApiProvider = require('cordova/android/nativeapiprovider');\nvar utils = require('cordova/utils');\nvar base64 = require('cordova/base64');\nvar channel = require('cordova/channel');\nvar jsToNativeModes = {\n    PROMPT: 0,\n    JS_OBJECT: 1\n};\nvar nativeToJsModes = {\n    // Polls for messages using the JS->Native bridge.\n    POLLING: 0,\n    // For LOAD_URL to be viable, it would need to have a work-around for\n    // the bug where the soft-keyboard gets dismissed when a message is sent.\n    LOAD_URL: 1,\n    // For the ONLINE_EVENT to be viable, it would need to intercept all event\n    // listeners (both through addEventListener and window.ononline) as well\n    // as set the navigator property itself.\n    ONLINE_EVENT: 2,\n    EVAL_BRIDGE: 3\n};\nvar jsToNativeBridgeMode; // Set lazily.\nvar nativeToJsBridgeMode = nativeToJsModes.EVAL_BRIDGE;\nvar pollEnabled = false;\nvar bridgeSecret = -1;\n\nvar messagesFromNative = [];\nvar isProcessing = false;\nvar resolvedPromise = typeof Promise === 'undefined' ? null : Promise.resolve();\nvar nextTick = resolvedPromise ? function (fn) { resolvedPromise.then(fn); } : function (fn) { setTimeout(fn); };\n\nfunction androidExec (success, fail, service, action, args) {\n    if (bridgeSecret < 0) {\n        // If we ever catch this firing, we'll need to queue up exec()s\n        // and fire them once we get a secret. For now, I don't think\n        // it's possible for exec() to be called since plugins are parsed but\n        // not run until until after onNativeReady.\n        throw new Error('exec() called without bridgeSecret');\n    }\n    // Set default bridge modes if they have not already been set.\n    // By default, we use the failsafe, since addJavascriptInterface breaks too often\n    if (jsToNativeBridgeMode === undefined) {\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT);\n    }\n\n    // If args is not provided, default to an empty array\n    args = args || [];\n\n    // Process any ArrayBuffers in the args into a string.\n    for (var i = 0; i < args.length; i++) {\n        if (utils.typeName(args[i]) === 'ArrayBuffer') {\n            args[i] = base64.fromArrayBuffer(args[i]);\n        }\n    }\n\n    var callbackId = service + cordova.callbackId++;\n    var argsJson = JSON.stringify(args);\n    if (success || fail) {\n        cordova.callbacks[callbackId] = { success: success, fail: fail };\n    }\n\n    var msgs = nativeApiProvider.get().exec(bridgeSecret, service, action, callbackId, argsJson);\n    // If argsJson was received by Java as null, try again with the PROMPT bridge mode.\n    // This happens in rare circumstances, such as when certain Unicode characters are passed over the bridge on a Galaxy S2.  See CB-2666.\n    if (jsToNativeBridgeMode === jsToNativeModes.JS_OBJECT && msgs === '@Null arguments.') {\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.PROMPT);\n        androidExec(success, fail, service, action, args);\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT);\n    } else if (msgs) {\n        messagesFromNative.push(msgs);\n        // Always process async to avoid exceptions messing up stack.\n        nextTick(processMessages);\n    }\n}\n\nandroidExec.init = function () {\n    bridgeSecret = +prompt('', 'gap_init:' + nativeToJsBridgeMode);\n    channel.onNativeReady.fire();\n};\n\nfunction pollOnceFromOnlineEvent () {\n    pollOnce(true);\n}\n\nfunction pollOnce (opt_fromOnlineEvent) {\n    if (bridgeSecret < 0) {\n        // This can happen when the NativeToJsMessageQueue resets the online state on page transitions.\n        // We know there's nothing to retrieve, so no need to poll.\n        return;\n    }\n    var msgs = nativeApiProvider.get().retrieveJsMessages(bridgeSecret, !!opt_fromOnlineEvent);\n    if (msgs) {\n        messagesFromNative.push(msgs);\n        // Process sync since we know we're already top-of-stack.\n        processMessages();\n    }\n}\n\nfunction pollingTimerFunc () {\n    if (pollEnabled) {\n        pollOnce();\n        setTimeout(pollingTimerFunc, 50);\n    }\n}\n\nfunction hookOnlineApis () {\n    function proxyEvent (e) {\n        cordova.fireWindowEvent(e.type);\n    }\n    // The network module takes care of firing online and offline events.\n    // It currently fires them only on document though, so we bridge them\n    // to window here (while first listening for exec()-releated online/offline\n    // events).\n    window.addEventListener('online', pollOnceFromOnlineEvent, false);\n    window.addEventListener('offline', pollOnceFromOnlineEvent, false);\n    cordova.addWindowEventHandler('online');\n    cordova.addWindowEventHandler('offline');\n    document.addEventListener('online', proxyEvent, false);\n    document.addEventListener('offline', proxyEvent, false);\n}\n\nhookOnlineApis();\n\nandroidExec.jsToNativeModes = jsToNativeModes;\nandroidExec.nativeToJsModes = nativeToJsModes;\n\nandroidExec.setJsToNativeBridgeMode = function (mode) {\n    if (mode === jsToNativeModes.JS_OBJECT && !window._cordovaNative) {\n        mode = jsToNativeModes.PROMPT;\n    }\n    nativeApiProvider.setPreferPrompt(mode === jsToNativeModes.PROMPT);\n    jsToNativeBridgeMode = mode;\n};\n\nandroidExec.setNativeToJsBridgeMode = function (mode) {\n    if (mode === nativeToJsBridgeMode) {\n        return;\n    }\n    if (nativeToJsBridgeMode === nativeToJsModes.POLLING) {\n        pollEnabled = false;\n    }\n\n    nativeToJsBridgeMode = mode;\n    // Tell the native side to switch modes.\n    // Otherwise, it will be set by androidExec.init()\n    if (bridgeSecret >= 0) {\n        nativeApiProvider.get().setNativeToJsBridgeMode(bridgeSecret, mode);\n    }\n\n    if (mode === nativeToJsModes.POLLING) {\n        pollEnabled = true;\n        setTimeout(pollingTimerFunc, 1);\n    }\n};\n\nfunction buildPayload (payload, message) {\n    var payloadKind = message.charAt(0);\n    if (payloadKind === 's') {\n        payload.push(message.slice(1));\n    } else if (payloadKind === 't') {\n        payload.push(true);\n    } else if (payloadKind === 'f') {\n        payload.push(false);\n    } else if (payloadKind === 'N') {\n        payload.push(null);\n    } else if (payloadKind === 'n') {\n        payload.push(+message.slice(1));\n    } else if (payloadKind === 'A') {\n        var data = message.slice(1);\n        payload.push(base64.toArrayBuffer(data));\n    } else if (payloadKind === 'S') {\n        payload.push(window.atob(message.slice(1)));\n    } else if (payloadKind === 'M') {\n        var multipartMessages = message.slice(1);\n        while (multipartMessages !== '') {\n            var spaceIdx = multipartMessages.indexOf(' ');\n            var msgLen = +multipartMessages.slice(0, spaceIdx);\n            var multipartMessage = multipartMessages.substr(spaceIdx + 1, msgLen);\n            multipartMessages = multipartMessages.slice(spaceIdx + msgLen + 1);\n            buildPayload(payload, multipartMessage);\n        }\n    } else {\n        payload.push(JSON.parse(message));\n    }\n}\n\n// Processes a single message, as encoded by NativeToJsMessageQueue.java.\nfunction processMessage (message) {\n    var firstChar = message.charAt(0);\n    if (firstChar === 'J') {\n        // This is deprecated on the .java side. It doesn't work with CSP enabled.\n        // eslint-disable-next-line no-eval\n        eval(message.slice(1));\n    } else if (firstChar === 'S' || firstChar === 'F') {\n        var success = firstChar === 'S';\n        var keepCallback = message.charAt(1) === '1';\n        var spaceIdx = message.indexOf(' ', 2);\n        var status = +message.slice(2, spaceIdx);\n        var nextSpaceIdx = message.indexOf(' ', spaceIdx + 1);\n        var callbackId = message.slice(spaceIdx + 1, nextSpaceIdx);\n        var payloadMessage = message.slice(nextSpaceIdx + 1);\n        var payload = [];\n        buildPayload(payload, payloadMessage);\n        cordova.callbackFromNative(callbackId, success, status, payload, keepCallback);\n    } else {\n        console.log('processMessage failed: invalid message: ' + JSON.stringify(message));\n    }\n}\n\nfunction processMessages () {\n    // Check for the reentrant case.\n    if (isProcessing) {\n        return;\n    }\n    if (messagesFromNative.length === 0) {\n        return;\n    }\n    isProcessing = true;\n    try {\n        var msg = popMessageFromQueue();\n        // The Java side can send a * message to indicate that it\n        // still has messages waiting to be retrieved.\n        if (msg === '*' && messagesFromNative.length === 0) {\n            nextTick(pollOnce);\n            return;\n        }\n        processMessage(msg);\n    } finally {\n        isProcessing = false;\n        if (messagesFromNative.length > 0) {\n            nextTick(processMessages);\n        }\n    }\n}\n\nfunction popMessageFromQueue () {\n    var messageBatch = messagesFromNative.shift();\n    if (messageBatch === '*') {\n        return '*';\n    }\n\n    var spaceIdx = messageBatch.indexOf(' ');\n    var msgLen = +messageBatch.slice(0, spaceIdx);\n    var message = messageBatch.substr(spaceIdx + 1, msgLen);\n    messageBatch = messageBatch.slice(spaceIdx + msgLen + 1);\n    if (messageBatch) {\n        messagesFromNative.unshift(messageBatch);\n    }\n    return message;\n}\n\nmodule.exports = androidExec;\n\n});\n\n// file: src/common/exec/proxy.js\ndefine(\"cordova/exec/proxy\", function(require, exports, module) {\n\n// internal map of proxy function\nvar CommandProxyMap = {};\n\nmodule.exports = {\n\n    // example: cordova.commandProxy.add(\"Accelerometer\",{getCurrentAcceleration: function(successCallback, errorCallback, options) {...},...);\n    add: function (id, proxyObj) {\n        console.log('adding proxy for ' + id);\n        CommandProxyMap[id] = proxyObj;\n        return proxyObj;\n    },\n\n    // cordova.commandProxy.remove(\"Accelerometer\");\n    remove: function (id) {\n        var proxy = CommandProxyMap[id];\n        delete CommandProxyMap[id];\n        CommandProxyMap[id] = null;\n        return proxy;\n    },\n\n    get: function (service, action) {\n        return (CommandProxyMap[service] ? CommandProxyMap[service][action] : null);\n    }\n};\n\n});\n\n// file: src/common/init.js\ndefine(\"cordova/init\", function(require, exports, module) {\n\nvar channel = require('cordova/channel');\nvar cordova = require('cordova');\nvar modulemapper = require('cordova/modulemapper');\nvar platform = require('cordova/platform');\nvar pluginloader = require('cordova/pluginloader');\n\nvar platformInitChannelsArray = [channel.onNativeReady, channel.onPluginsReady];\n\nfunction logUnfiredChannels (arr) {\n    for (var i = 0; i < arr.length; ++i) {\n        if (arr[i].state !== 2) {\n            console.log('Channel not fired: ' + arr[i].type);\n        }\n    }\n}\n\nwindow.setTimeout(function () {\n    if (channel.onDeviceReady.state !== 2) {\n        console.log('deviceready has not fired after 5 seconds.');\n        logUnfiredChannels(platformInitChannelsArray);\n        logUnfiredChannels(channel.deviceReadyChannelsArray);\n    }\n}, 5000);\n\nif (!window.console) {\n    window.console = {\n        log: function () {}\n    };\n}\nif (!window.console.warn) {\n    window.console.warn = function (msg) {\n        this.log('warn: ' + msg);\n    };\n}\n\n// Register pause, resume and deviceready channels as events on document.\nchannel.onPause = cordova.addDocumentEventHandler('pause');\nchannel.onResume = cordova.addDocumentEventHandler('resume');\nchannel.onActivated = cordova.addDocumentEventHandler('activated');\nchannel.onDeviceReady = cordova.addStickyDocumentEventHandler('deviceready');\n\n// Listen for DOMContentLoaded and notify our channel subscribers.\nif (document.readyState === 'complete' || document.readyState === 'interactive') {\n    channel.onDOMContentLoaded.fire();\n} else {\n    document.addEventListener('DOMContentLoaded', function () {\n        channel.onDOMContentLoaded.fire();\n    }, false);\n}\n\n// _nativeReady is global variable that the native side can set\n// to signify that the native code is ready. It is a global since\n// it may be called before any cordova JS is ready.\nif (window._nativeReady) {\n    channel.onNativeReady.fire();\n}\n\nmodulemapper.clobbers('cordova', 'cordova');\nmodulemapper.clobbers('cordova/exec', 'cordova.exec');\nmodulemapper.clobbers('cordova/exec', 'Cordova.exec');\n\n// Call the platform-specific initialization.\nplatform.bootstrap && platform.bootstrap();\n\n// Wrap in a setTimeout to support the use-case of having plugin JS appended to cordova.js.\n// The delay allows the attached modules to be defined before the plugin loader looks for them.\nsetTimeout(function () {\n    pluginloader.load(function () {\n        channel.onPluginsReady.fire();\n    });\n}, 0);\n\n/**\n * Create all cordova objects once native side is ready.\n */\nchannel.join(function () {\n    modulemapper.mapModules(window);\n\n    platform.initialize && platform.initialize();\n\n    // Fire event to notify that all objects are created\n    channel.onCordovaReady.fire();\n\n    // Fire onDeviceReady event once page has fully loaded, all\n    // constructors have run and cordova info has been received from native\n    // side.\n    channel.join(function () {\n        require('cordova').fireDocumentEvent('deviceready');\n    }, channel.deviceReadyChannelsArray);\n}, platformInitChannelsArray);\n\n});\n\n// file: src/common/modulemapper.js\ndefine(\"cordova/modulemapper\", function(require, exports, module) {\n\nvar builder = require('cordova/builder');\nvar moduleMap = define.moduleMap;\nvar symbolList;\nvar deprecationMap;\n\nexports.reset = function () {\n    symbolList = [];\n    deprecationMap = {};\n};\n\nfunction addEntry (strategy, moduleName, symbolPath, opt_deprecationMessage) {\n    if (!(moduleName in moduleMap)) {\n        throw new Error('Module ' + moduleName + ' does not exist.');\n    }\n    symbolList.push(strategy, moduleName, symbolPath);\n    if (opt_deprecationMessage) {\n        deprecationMap[symbolPath] = opt_deprecationMessage;\n    }\n}\n\n// Note: Android 2.3 does have Function.bind().\nexports.clobbers = function (moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('c', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.merges = function (moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('m', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.defaults = function (moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('d', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.runs = function (moduleName) {\n    addEntry('r', moduleName, null);\n};\n\nfunction prepareNamespace (symbolPath, context) {\n    if (!symbolPath) {\n        return context;\n    }\n    return symbolPath.split('.').reduce(function (cur, part) {\n        return (cur[part] = cur[part] || {});\n    }, context);\n}\n\nexports.mapModules = function (context) {\n    var origSymbols = {};\n    context.CDV_origSymbols = origSymbols;\n    for (var i = 0, len = symbolList.length; i < len; i += 3) {\n        var strategy = symbolList[i];\n        var moduleName = symbolList[i + 1];\n        var module = require(moduleName);\n        // <runs/>\n        if (strategy === 'r') {\n            continue;\n        }\n        var symbolPath = symbolList[i + 2];\n        var lastDot = symbolPath.lastIndexOf('.');\n        var namespace = symbolPath.substr(0, lastDot);\n        var lastName = symbolPath.substr(lastDot + 1);\n\n        var deprecationMsg = symbolPath in deprecationMap ? 'Access made to deprecated symbol: ' + symbolPath + '. ' + deprecationMsg : null;\n        var parentObj = prepareNamespace(namespace, context);\n        var target = parentObj[lastName];\n\n        if (strategy === 'm' && target) {\n            builder.recursiveMerge(target, module);\n        } else if ((strategy === 'd' && !target) || (strategy !== 'd')) {\n            if (!(symbolPath in origSymbols)) {\n                origSymbols[symbolPath] = target;\n            }\n            builder.assignOrWrapInDeprecateGetter(parentObj, lastName, module, deprecationMsg);\n        }\n    }\n};\n\nexports.getOriginalSymbol = function (context, symbolPath) {\n    var origSymbols = context.CDV_origSymbols;\n    if (origSymbols && (symbolPath in origSymbols)) {\n        return origSymbols[symbolPath];\n    }\n    var parts = symbolPath.split('.');\n    var obj = context;\n    for (var i = 0; i < parts.length; ++i) {\n        obj = obj && obj[parts[i]];\n    }\n    return obj;\n};\n\nexports.reset();\n\n});\n\n// file: ../../cordova-js-src/platform.js\ndefine(\"cordova/platform\", function(require, exports, module) {\n\n// The last resume event that was received that had the result of a plugin call.\nvar lastResumeEvent = null;\n\nmodule.exports = {\n    id: 'android',\n    bootstrap: function () {\n        var channel = require('cordova/channel');\n        var cordova = require('cordova');\n        var exec = require('cordova/exec');\n        var modulemapper = require('cordova/modulemapper');\n\n        // Get the shared secret needed to use the bridge.\n        exec.init();\n\n        // TODO: Extract this as a proper plugin.\n        modulemapper.clobbers('cordova/plugin/android/app', 'navigator.app');\n\n        // Core Splash Screen\n        modulemapper.clobbers('cordova/plugin/android/splashscreen', 'navigator.splashscreen');\n\n        var APP_PLUGIN_NAME = Number(cordova.platformVersion.split('.')[0]) >= 4 ? 'CoreAndroid' : 'App';\n\n        // Inject a listener for the backbutton on the document.\n        var backButtonChannel = cordova.addDocumentEventHandler('backbutton');\n        backButtonChannel.onHasSubscribersChange = function () {\n            // If we just attached the first handler or detached the last handler,\n            // let native know we need to override the back button.\n            exec(null, null, APP_PLUGIN_NAME, 'overrideBackbutton', [this.numHandlers === 1]);\n        };\n\n        // Add hardware MENU and SEARCH button handlers\n        cordova.addDocumentEventHandler('menubutton');\n        cordova.addDocumentEventHandler('searchbutton');\n\n        function bindButtonChannel (buttonName) {\n            // generic button bind used for volumeup/volumedown buttons\n            var volumeButtonChannel = cordova.addDocumentEventHandler(buttonName + 'button');\n            volumeButtonChannel.onHasSubscribersChange = function () {\n                exec(null, null, APP_PLUGIN_NAME, 'overrideButton', [buttonName, this.numHandlers === 1]);\n            };\n        }\n        // Inject a listener for the volume buttons on the document.\n        bindButtonChannel('volumeup');\n        bindButtonChannel('volumedown');\n\n        // The resume event is not \"sticky\", but it is possible that the event\n        // will contain the result of a plugin call. We need to ensure that the\n        // plugin result is delivered even after the event is fired (CB-10498)\n        var cordovaAddEventListener = document.addEventListener;\n\n        document.addEventListener = function (evt, handler, capture) {\n            cordovaAddEventListener(evt, handler, capture);\n\n            if (evt === 'resume' && lastResumeEvent) {\n                handler(lastResumeEvent);\n            }\n        };\n\n        // Let native code know we are all done on the JS side.\n        // Native code will then un-hide the WebView.\n        channel.onCordovaReady.subscribe(function () {\n            exec(onMessageFromNative, null, APP_PLUGIN_NAME, 'messageChannel', []);\n            exec(null, null, APP_PLUGIN_NAME, 'show', []);\n        });\n    }\n};\n\nfunction onMessageFromNative (msg) {\n    var cordova = require('cordova');\n    var action = msg.action;\n\n    switch (action) {\n    // pause and resume are Android app life cycle events\n    case 'backbutton':\n    case 'menubutton':\n    case 'searchbutton':\n    case 'pause':\n    case 'volumedownbutton':\n    case 'volumeupbutton':\n        cordova.fireDocumentEvent(action);\n        break;\n    case 'resume':\n        if (arguments.length > 1 && msg.pendingResult) {\n            if (arguments.length === 2) {\n                msg.pendingResult.result = arguments[1];\n            } else {\n                // The plugin returned a multipart message\n                var res = [];\n                for (var i = 1; i < arguments.length; i++) {\n                    res.push(arguments[i]);\n                }\n                msg.pendingResult.result = res;\n            }\n\n            // Save the plugin result so that it can be delivered to the js\n            // even if they miss the initial firing of the event\n            lastResumeEvent = msg;\n        }\n        cordova.fireDocumentEvent(action, msg);\n        break;\n    default:\n        throw new Error('Unknown event action ' + action);\n    }\n}\n\n});\n\n// file: ../../cordova-js-src/plugin/android/app.js\ndefine(\"cordova/plugin/android/app\", function(require, exports, module) {\n\nvar exec = require('cordova/exec');\nvar APP_PLUGIN_NAME = Number(require('cordova').platformVersion.split('.')[0]) >= 4 ? 'CoreAndroid' : 'App';\n\nmodule.exports = {\n    /**\n    * Clear the resource cache.\n    */\n    clearCache: function () {\n        exec(null, null, APP_PLUGIN_NAME, 'clearCache', []);\n    },\n\n    /**\n    * Load the url into the WebView or into new browser instance.\n    *\n    * @param url           The URL to load\n    * @param props         Properties that can be passed in to the activity:\n    *      wait: int                           => wait msec before loading URL\n    *      loadingDialog: \"Title,Message\"      => display a native loading dialog\n    *      loadUrlTimeoutValue: int            => time in msec to wait before triggering a timeout error\n    *      clearHistory: boolean              => clear WebView history (default=false)\n    *      openExternal: boolean              => open in a new browser (default=false)\n    *\n    * Example:\n    *      navigator.app.loadUrl(\"http://server/myapp/index.html\", {wait:2000, loadingDialog:\"Wait,Loading App\", loadUrlTimeoutValue: 60000});\n    */\n    loadUrl: function (url, props) {\n        exec(null, null, APP_PLUGIN_NAME, 'loadUrl', [url, props]);\n    },\n\n    /**\n    * Cancel loadUrl that is waiting to be loaded.\n    */\n    cancelLoadUrl: function () {\n        exec(null, null, APP_PLUGIN_NAME, 'cancelLoadUrl', []);\n    },\n\n    /**\n    * Clear web history in this web view.\n    * Instead of BACK button loading the previous web page, it will exit the app.\n    */\n    clearHistory: function () {\n        exec(null, null, APP_PLUGIN_NAME, 'clearHistory', []);\n    },\n\n    /**\n    * Go to previous page displayed.\n    * This is the same as pressing the backbutton on Android device.\n    */\n    backHistory: function () {\n        exec(null, null, APP_PLUGIN_NAME, 'backHistory', []);\n    },\n\n    /**\n    * Override the default behavior of the Android back button.\n    * If overridden, when the back button is pressed, the \"backKeyDown\" JavaScript event will be fired.\n    *\n    * Note: The user should not have to call this method.  Instead, when the user\n    *       registers for the \"backbutton\" event, this is automatically done.\n    *\n    * @param override        T=override, F=cancel override\n    */\n    overrideBackbutton: function (override) {\n        exec(null, null, APP_PLUGIN_NAME, 'overrideBackbutton', [override]);\n    },\n\n    /**\n    * Override the default behavior of the Android volume button.\n    * If overridden, when the volume button is pressed, the \"volume[up|down]button\"\n    * JavaScript event will be fired.\n    *\n    * Note: The user should not have to call this method.  Instead, when the user\n    *       registers for the \"volume[up|down]button\" event, this is automatically done.\n    *\n    * @param button          volumeup, volumedown\n    * @param override        T=override, F=cancel override\n    */\n    overrideButton: function (button, override) {\n        exec(null, null, APP_PLUGIN_NAME, 'overrideButton', [button, override]);\n    },\n\n    /**\n    * Exit and terminate the application.\n    */\n    exitApp: function () {\n        return exec(null, null, APP_PLUGIN_NAME, 'exitApp', []);\n    }\n};\n\n});\n\n// file: ../../cordova-js-src/plugin/android/splashscreen.js\ndefine(\"cordova/plugin/android/splashscreen\", function(require, exports, module) {\n\nvar exec = require('cordova/exec');\n\nvar splashscreen = {\n    show: function () {\n        console.log('\"navigator.splashscreen.show()\" is unsupported on Android.');\n    },\n    hide: function () {\n        exec(null, null, 'CordovaSplashScreenPlugin', 'hide', []);\n    }\n};\n\nmodule.exports = splashscreen;\n\n});\n\n// file: src/common/pluginloader.js\ndefine(\"cordova/pluginloader\", function(require, exports, module) {\n\nvar modulemapper = require('cordova/modulemapper');\n\n// Helper function to inject a <script> tag.\n// Exported for testing.\nexports.injectScript = function (url, onload, onerror) {\n    var script = document.createElement('script');\n    // onload fires even when script fails loads with an error.\n    script.onload = onload;\n    // onerror fires for malformed URLs.\n    script.onerror = onerror;\n    script.src = url;\n    document.head.appendChild(script);\n};\n\nfunction injectIfNecessary (id, url, onload, onerror) {\n    onerror = onerror || onload;\n    if (id in define.moduleMap) {\n        onload();\n    } else {\n        exports.injectScript(url, function () {\n            if (id in define.moduleMap) {\n                onload();\n            } else {\n                onerror();\n            }\n        }, onerror);\n    }\n}\n\nfunction onScriptLoadingComplete (moduleList, finishPluginLoading) {\n    // Loop through all the plugins and then through their clobbers and merges.\n    for (var i = 0, module; (module = moduleList[i]); i++) {\n        if (module.clobbers && module.clobbers.length) {\n            for (var j = 0; j < module.clobbers.length; j++) {\n                modulemapper.clobbers(module.id, module.clobbers[j]);\n            }\n        }\n\n        if (module.merges && module.merges.length) {\n            for (var k = 0; k < module.merges.length; k++) {\n                modulemapper.merges(module.id, module.merges[k]);\n            }\n        }\n\n        // Finally, if runs is truthy we want to simply require() the module.\n        if (module.runs) {\n            modulemapper.runs(module.id);\n        }\n    }\n\n    finishPluginLoading();\n}\n\n// Handler for the cordova_plugins.js content.\n// See plugman's plugin_loader.js for the details of this object.\n// This function is only called if the really is a plugins array that isn't empty.\n// Otherwise the onerror response handler will just call finishPluginLoading().\nfunction handlePluginsObject (path, moduleList, finishPluginLoading) {\n    // Now inject the scripts.\n    var scriptCounter = moduleList.length;\n\n    if (!scriptCounter) {\n        finishPluginLoading();\n        return;\n    }\n    function scriptLoadedCallback () {\n        if (!--scriptCounter) {\n            onScriptLoadingComplete(moduleList, finishPluginLoading);\n        }\n    }\n\n    for (var i = 0; i < moduleList.length; i++) {\n        injectIfNecessary(moduleList[i].id, path + moduleList[i].file, scriptLoadedCallback);\n    }\n}\n\nfunction findCordovaPath () {\n    var path = null;\n    var scripts = document.getElementsByTagName('script');\n    var term = '/cordova.js';\n    for (var n = scripts.length - 1; n > -1; n--) {\n        var src = scripts[n].src.replace(/\\?.*$/, ''); // Strip any query param (CB-6007).\n        if (src.indexOf(term) === (src.length - term.length)) {\n            path = src.substring(0, src.length - term.length) + '/';\n            break;\n        }\n    }\n    return path;\n}\n\n// Tries to load all plugins' js-modules.\n// This is an async process, but onDeviceReady is blocked on onPluginsReady.\n// onPluginsReady is fired when there are no plugins to load, or they are all done.\nexports.load = function (callback) {\n    var pathPrefix = findCordovaPath();\n    if (pathPrefix === null) {\n        console.log('Could not find cordova.js script tag. Plugin loading may fail.');\n        pathPrefix = '';\n    }\n    injectIfNecessary('cordova/plugin_list', pathPrefix + 'cordova_plugins.js', function () {\n        var moduleList = require('cordova/plugin_list');\n        handlePluginsObject(pathPrefix, moduleList, callback);\n    }, callback);\n};\n\n});\n\n// file: src/common/urlutil.js\ndefine(\"cordova/urlutil\", function(require, exports, module) {\n\n/**\n * For already absolute URLs, returns what is passed in.\n * For relative URLs, converts them to absolute ones.\n */\nexports.makeAbsolute = function makeAbsolute (url) {\n    var anchorEl = document.createElement('a');\n    anchorEl.href = url;\n    return anchorEl.href;\n};\n\n});\n\n// file: src/common/utils.js\ndefine(\"cordova/utils\", function(require, exports, module) {\n\nvar utils = exports;\n\n/**\n * Defines a property getter / setter for obj[key].\n */\nutils.defineGetterSetter = function (obj, key, getFunc, opt_setFunc) {\n    if (Object.defineProperty) {\n        var desc = {\n            get: getFunc,\n            configurable: true\n        };\n        if (opt_setFunc) {\n            desc.set = opt_setFunc;\n        }\n        Object.defineProperty(obj, key, desc);\n    } else {\n        obj.__defineGetter__(key, getFunc);\n        if (opt_setFunc) {\n            obj.__defineSetter__(key, opt_setFunc);\n        }\n    }\n};\n\n/**\n * Defines a property getter for obj[key].\n */\nutils.defineGetter = utils.defineGetterSetter;\n\nutils.arrayIndexOf = function (a, item) {\n    if (a.indexOf) {\n        return a.indexOf(item);\n    }\n    var len = a.length;\n    for (var i = 0; i < len; ++i) {\n        if (a[i] === item) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/**\n * Returns whether the item was found in the array.\n */\nutils.arrayRemove = function (a, item) {\n    var index = utils.arrayIndexOf(a, item);\n    if (index !== -1) {\n        a.splice(index, 1);\n    }\n    return index !== -1;\n};\n\nutils.typeName = function (val) {\n    return Object.prototype.toString.call(val).slice(8, -1);\n};\n\n/**\n * Returns an indication of whether the argument is an array or not\n */\nutils.isArray = Array.isArray ||\n                function (a) { return utils.typeName(a) === 'Array'; };\n\n/**\n * Returns an indication of whether the argument is a Date or not\n */\nutils.isDate = function (d) {\n    return (d instanceof Date);\n};\n\n/**\n * Does a deep clone of the object.\n */\nutils.clone = function (obj) {\n    if (!obj || typeof obj === 'function' || utils.isDate(obj) || typeof obj !== 'object') {\n        return obj;\n    }\n\n    var retVal, i;\n\n    if (utils.isArray(obj)) {\n        retVal = [];\n        for (i = 0; i < obj.length; ++i) {\n            retVal.push(utils.clone(obj[i]));\n        }\n        return retVal;\n    }\n\n    retVal = {};\n    for (i in obj) {\n        // 'unknown' type may be returned in custom protocol activation case on\n        // Windows Phone 8.1 causing \"No such interface supported\" exception on\n        // cloning (https://issues.apache.org/jira/browse/CB-11522)\n        // eslint-disable-next-line valid-typeof\n        if ((!(i in retVal) || retVal[i] !== obj[i]) && typeof obj[i] !== 'undefined' && typeof obj[i] !== 'unknown') {\n            retVal[i] = utils.clone(obj[i]);\n        }\n    }\n    return retVal;\n};\n\n/**\n * Returns a wrapped version of the function\n */\nutils.close = function (context, func, params) {\n    return function () {\n        var args = params || arguments;\n        return func.apply(context, args);\n    };\n};\n\n// ------------------------------------------------------------------------------\nfunction UUIDcreatePart (length) {\n    var uuidpart = '';\n    for (var i = 0; i < length; i++) {\n        var uuidchar = parseInt((Math.random() * 256), 10).toString(16);\n        if (uuidchar.length === 1) {\n            uuidchar = '0' + uuidchar;\n        }\n        uuidpart += uuidchar;\n    }\n    return uuidpart;\n}\n\n/**\n * Create a UUID\n */\nutils.createUUID = function () {\n    return UUIDcreatePart(4) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(6);\n};\n\n/**\n * Extends a child object from a parent object using classical inheritance\n * pattern.\n */\nutils.extend = (function () {\n    // proxy used to establish prototype chain\n    var F = function () {};\n    // extend Child from Parent\n    return function (Child, Parent) {\n        F.prototype = Parent.prototype;\n        Child.prototype = new F();\n        Child.__super__ = Parent.prototype;\n        Child.prototype.constructor = Child;\n    };\n}());\n\n/**\n * Alerts a message in any available way: alert or console.log.\n */\nutils.alert = function (msg) {\n    if (window.alert) {\n        window.alert(msg);\n    } else if (console && console.log) {\n        console.log(msg);\n    }\n};\n\n});\n\nwindow.cordova = require('cordova');\n// file: src/scripts/bootstrap.js\nrequire('cordova/init');\n\n})();\n","size_bytes":63747},"okul-app/platforms/android/platform_www/cordova_plugins.js":{"content":"cordova.define('cordova/plugin_list', function(require, exports, module) {\n  module.exports = [\n    {\n      \"id\": \"cordova-plugin-network-information.network\",\n      \"file\": \"plugins/cordova-plugin-network-information/www/network.js\",\n      \"pluginId\": \"cordova-plugin-network-information\",\n      \"clobbers\": [\n        \"navigator.connection\",\n        \"navigator.network.connection\"\n      ]\n    },\n    {\n      \"id\": \"cordova-plugin-network-information.Connection\",\n      \"file\": \"plugins/cordova-plugin-network-information/www/Connection.js\",\n      \"pluginId\": \"cordova-plugin-network-information\",\n      \"clobbers\": [\n        \"Connection\"\n      ]\n    },\n    {\n      \"id\": \"cordova-plugin-splashscreen.SplashScreen\",\n      \"file\": \"plugins/cordova-plugin-splashscreen/www/splashscreen.js\",\n      \"pluginId\": \"cordova-plugin-splashscreen\",\n      \"clobbers\": [\n        \"navigator.splashscreen\"\n      ]\n    }\n  ];\n  module.exports.metadata = {\n    \"cordova-plugin-network-information\": \"2.0.2\",\n    \"cordova-plugin-splashscreen\": \"5.0.4\"\n  };\n});","size_bytes":1042},"okul-app/plugins/cordova-plugin-network-information/tests/tests.js":{"content":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* eslint-env jasmine */\n/* global Connection */\n\nexports.defineAutoTests = function () {\n    describe('Network (navigator.connection)', function () {\n        it('network.spec.1 should exist', function () {\n            expect(navigator.network && navigator.network.connection).toBeDefined();\n            expect(navigator.connection).toBeDefined();\n        });\n\n        it('network.spec.2 should be set to a valid value', function () {\n            var validValues = {\n                'unknown': 1,\n                'ethernet': 1,\n                'wifi': 1,\n                '2g': 1,\n                'cellular': 1,\n                '3g': 1,\n                '4g': 1,\n                'none': 1\n            };\n            expect(validValues[navigator.connection.type]).toBe(1);\n        });\n\n        it('network.spec.3 should have the same value in deprecated and non-deprecated apis', function () {\n            expect(navigator.network.connection.type).toBe(navigator.connection.type);\n        });\n\n        it('network.spec.4 should define constants for connection status', function () {\n            expect(Connection.UNKNOWN).toBe('unknown');\n            expect(Connection.ETHERNET).toBe('ethernet');\n            expect(Connection.WIFI).toBe('wifi');\n            expect(Connection.CELL_2G).toBe('2g');\n            expect(Connection.CELL_3G).toBe('3g');\n            expect(Connection.CELL_4G).toBe('4g');\n            expect(Connection.NONE).toBe('none');\n            expect(Connection.CELL).toBe('cellular');\n        });\n    });\n};\n\n/******************************************************************************/\n/******************************************************************************/\n/******************************************************************************/\n\nexports.defineManualTests = function (contentEl, createActionButton) {\n    function eventOutput (s) {\n        var el = document.getElementById('results');\n        el.innerHTML = el.innerHTML + s + '<br>';\n    }\n\n    function printNetwork () {\n        eventOutput('navigator.connection.type=' + navigator.connection.type);\n        eventOutput('navigator.network.connection.type=' + navigator.network.connection.type);\n    }\n\n    function onEvent (e) {\n        eventOutput('Event of type: ' + e.type);\n        printNetwork();\n    }\n\n    /******************************************************************************/\n\n    var html = '<div id=\"info\">' +\n        '<b>Results:</b><br>' +\n        '<span id=\"results\"></span>' +\n        '</div><div id=\"connection\"></div>' +\n        'Expected result: Status box will update with type of connection using two different methods. Both values must match.' +\n        '  The result will be unknown, ethernet, wifi, 2g, 3g, 4g, none, or cellular. Make sure it matches what the device is connected to.' +\n        '</p> <div id=\"actions\"></div>';\n\n    document.addEventListener('online', onEvent, false);\n    document.addEventListener('offline', onEvent, false);\n    contentEl.innerHTML = html;\n\n    createActionButton('Show Network Connection', function () {\n        printNetwork();\n    }, 'connection');\n\n    createActionButton('Clear Log', function () {\n        document.getElementById('results').innerHTML = '';\n    }, 'actions');\n};\n","size_bytes":4056},"okul-app/plugins/cordova-plugin-network-information/types/index.d.ts":{"content":"// Type definitions for Apache Cordova Network Information plugin\n// Project: https://github.com/apache/cordova-plugin-network-information\n// Definitions by: Microsoft Open Technologies Inc <http://msopentech.com>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// \n// Copyright (c) Microsoft Open Technologies Inc\n// Licensed under the MIT license\n\ninterface Navigator {\n    /**\n     * This plugin provides an implementation of an old version of the Network Information API.\n     * It provides information about the device's cellular and wifi connection, and whether the device has an internet connection.\n     */\n    connection: Connection;\n    // see https://github.com/apache/cordova-plugin-network-information/blob/dev/doc/index.md#api-change\n    // for \n    network: {\n        /**\n         * This plugin provides an implementation of an old version of the Network Information API.\n         * It provides information about the device's cellular and wifi connection, and whether the device has an internet connection.\n         */\n        connection: Connection\n    }\n}\n\ninterface Document {\n    addEventListener(type: \"online\", connectionStateCallback: () => any, useCapture?: boolean): void;\n    addEventListener(type: \"offline\", connectionStateCallback: () => any, useCapture?: boolean): void;\n}\n\n/**\n * The connection object, exposed via navigator.connection, provides information\n * about the device's cellular and wifi connection.\n */\ninterface Connection {\n    /**\n     * This property offers a fast way to determine the device's network connection state, and type of connection.\n     * One of:\n     *     Connection.UNKNOWN\n     *     Connection.ETHERNET\n     *     Connection.WIFI\n     *     Connection.CELL_2G\n     *     Connection.CELL_3G\n     *     Connection.CELL_4G\n     *     Connection.CELL\n     *     Connection.NONE\n     */\n    type: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Connection: {\n    UNKNOWN: string;\n    ETHERNET: string;\n    WIFI: string;\n    CELL_2G: string;\n    CELL_3G: string;\n    CELL_4G: string;\n    CELL: string;\n    NONE: string;\n}","size_bytes":2295},"okul-app/plugins/cordova-plugin-network-information/www/Connection.js":{"content":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * Network status\n */\nmodule.exports = {\n    UNKNOWN: 'unknown',\n    ETHERNET: 'ethernet',\n    WIFI: 'wifi',\n    CELL_2G: '2g',\n    CELL_3G: '3g',\n    CELL_4G: '4g',\n    CELL: 'cellular',\n    NONE: 'none'\n};\n","size_bytes":1026},"okul-app/plugins/cordova-plugin-network-information/www/network.js":{"content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\nvar cordova = require('cordova');\nvar channel = require('cordova/channel');\nvar utils = require('cordova/utils');\n\n// Link the onLine property with the Cordova-supplied network info.\n// This works because we clobber the navigator object with our own\n// object in bootstrap.js.\n// Browser platform do not need to define this property, because\n// it is already supported by modern browsers\nif (cordova.platformId !== 'browser' && typeof navigator !== 'undefined') {\n    utils.defineGetter(navigator, 'onLine', function () {\n        return this.connection.type !== 'none';\n    });\n}\n\nfunction NetworkConnection () {\n    this.type = 'unknown';\n}\n\n/**\n * Get connection info\n *\n * @param {Function} successCallback The function to call when the Connection data is available\n * @param {Function} errorCallback The function to call when there is an error getting the Connection data. (OPTIONAL)\n */\nNetworkConnection.prototype.getInfo = function (successCallback, errorCallback) {\n    exec(successCallback, errorCallback, 'NetworkStatus', 'getConnectionInfo', []);\n};\n\nvar me = new NetworkConnection();\nvar timerId = null;\nvar timeout = 500;\n\nchannel.createSticky('onCordovaConnectionReady');\nchannel.waitForInitialization('onCordovaConnectionReady');\n\nchannel.onCordovaReady.subscribe(function () {\n    me.getInfo(function (info) {\n        me.type = info;\n        if (info === 'none') {\n            // set a timer if still offline at the end of timer send the offline event\n            timerId = setTimeout(function () {\n                cordova.fireDocumentEvent('offline');\n                timerId = null;\n            }, timeout);\n        } else {\n            // If there is a current offline event pending clear it\n            if (timerId !== null) {\n                clearTimeout(timerId);\n                timerId = null;\n            }\n            cordova.fireDocumentEvent('online');\n        }\n\n        // should only fire this once\n        if (channel.onCordovaConnectionReady.state !== 2) {\n            channel.onCordovaConnectionReady.fire();\n        }\n    },\n    function (e) {\n        // If we can't get the network info we should still tell Cordova\n        // to fire the deviceready event.\n        if (channel.onCordovaConnectionReady.state !== 2) {\n            channel.onCordovaConnectionReady.fire();\n        }\n        console.log('Error initializing Network Connection: ' + e);\n    });\n});\n\nmodule.exports = me;\n","size_bytes":3266},"okul-app/plugins/cordova-plugin-splashscreen/types/index.d.ts":{"content":"// Type definitions for Apache Cordova Splashscreen plugin\n// Project: https://github.com/apache/cordova-plugin-splashscreen\n// Definitions by: Microsoft Open Technologies Inc <http://msopentech.com>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// \n// Copyright (c) Microsoft Open Technologies Inc\n// Licensed under the MIT license.\n\ninterface Navigator {\n    /** This plugin displays and hides a splash screen during application launch. */\n    splashscreen: {\n        /** Dismiss the splash screen. */\n        hide(): void;\n        /** Displays the splash screen. */\n        show(): void;\n    }\n}","size_bytes":619},"okul-app/plugins/cordova-plugin-splashscreen/www/splashscreen.js":{"content":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\n\nvar splashscreen = {\n    show:function() {\n        exec(null, null, \"SplashScreen\", \"show\", []);\n    },\n    hide:function() {\n        exec(null, null, \"SplashScreen\", \"hide\", []);\n    }\n};\n\nmodule.exports = splashscreen;\n","size_bytes":1072},"okul-app/plugins/cordova-plugin-network-information/src/android/NetworkManager.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova.networkinformation;\n\nimport org.apache.cordova.CallbackContext;\nimport org.apache.cordova.CordovaInterface;\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.LOG;\nimport org.apache.cordova.PluginResult;\nimport org.apache.cordova.CordovaWebView;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Build;\n\nimport java.util.Locale;\n\npublic class NetworkManager extends CordovaPlugin {\n\n    public static int NOT_REACHABLE = 0;\n    public static int REACHABLE_VIA_CARRIER_DATA_NETWORK = 1;\n    public static int REACHABLE_VIA_WIFI_NETWORK = 2;\n\n    public static final String WIFI = \"wifi\";\n    public static final String WIMAX = \"wimax\";\n    // mobile\n    public static final String MOBILE = \"mobile\";\n\n    // Android L calls this Cellular, because I have no idea!\n    public static final String CELLULAR = \"cellular\";\n    // 2G network types\n    public static final String TWO_G = \"2g\";\n    public static final String GSM = \"gsm\";\n    public static final String GPRS = \"gprs\";\n    public static final String EDGE = \"edge\";\n    // 3G network types\n    public static final String THREE_G = \"3g\";\n    public static final String CDMA = \"cdma\";\n    public static final String UMTS = \"umts\";\n    public static final String HSPA = \"hspa\";\n    public static final String HSUPA = \"hsupa\";\n    public static final String HSDPA = \"hsdpa\";\n    public static final String ONEXRTT = \"1xrtt\";\n    public static final String EHRPD = \"ehrpd\";\n    // 4G network types\n    public static final String FOUR_G = \"4g\";\n    public static final String LTE = \"lte\";\n    public static final String UMB = \"umb\";\n    public static final String HSPA_PLUS = \"hspa+\";\n    // return type\n    public static final String TYPE_UNKNOWN = \"unknown\";\n    public static final String TYPE_ETHERNET = \"ethernet\";\n    public static final String TYPE_ETHERNET_SHORT = \"eth\";\n    public static final String TYPE_WIFI = \"wifi\";\n    public static final String TYPE_2G = \"2g\";\n    public static final String TYPE_3G = \"3g\";\n    public static final String TYPE_4G = \"4g\";\n    public static final String TYPE_NONE = \"none\";\n\n    private static final String LOG_TAG = \"NetworkManager\";\n\n    private CallbackContext connectionCallbackContext;\n\n    ConnectivityManager sockMan;\n    BroadcastReceiver receiver;\n    private JSONObject lastInfo = null;\n\n    /**\n     * Sets the context of the Command. This can then be used to do things like\n     * get file paths associated with the Activity.\n     *\n     * @param cordova The context of the main Activity.\n     * @param webView The CordovaWebView Cordova is running in.\n     */\n    public void initialize(CordovaInterface cordova, CordovaWebView webView) {\n        super.initialize(cordova, webView);\n        this.sockMan = (ConnectivityManager) cordova.getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\n        this.connectionCallbackContext = null;\n\n        this.registerConnectivityActionReceiver();\n    }\n\n    /**\n     * Executes the request and returns PluginResult.\n     *\n     * @param action            The action to execute.\n     * @param args              JSONArry of arguments for the plugin.\n     * @param callbackContext   The callback id used when calling back into JavaScript.\n     * @return                  True if the action was valid, false otherwise.\n     */\n    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) {\n        if (action.equals(\"getConnectionInfo\")) {\n            this.connectionCallbackContext = callbackContext;\n            NetworkInfo info = sockMan.getActiveNetworkInfo();\n            String connectionType = \"\";\n            try {\n                connectionType = this.getConnectionInfo(info).get(\"type\").toString();\n            } catch (JSONException e) {\n                LOG.d(LOG_TAG, e.getLocalizedMessage());\n            }\n\n            PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, connectionType);\n            pluginResult.setKeepCallback(true);\n            callbackContext.sendPluginResult(pluginResult);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Stop network receiver.\n     */\n    public void onDestroy() {\n        this.unregisterReceiver();\n    }\n\n    @Override\n    public void onPause(boolean multitasking) {\n        this.unregisterReceiver();\n    }\n\n    @Override\n    public void onResume(boolean multitasking) {\n        super.onResume(multitasking);\n\n        this.unregisterReceiver();\n        this.registerConnectivityActionReceiver();\n    }\n\n    //--------------------------------------------------------------------------\n    // LOCAL METHODS\n    //--------------------------------------------------------------------------\n\n    private void registerConnectivityActionReceiver() {\n        // We need to listen to connectivity events to update navigator.connection\n        IntentFilter intentFilter = new IntentFilter();\n        intentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);\n        if (this.receiver == null) {\n            this.receiver = new BroadcastReceiver() {\n                @Override\n                public void onReceive(Context context, Intent intent) {\n                    // (The null check is for the ARM Emulator, please use Intel Emulator for better results)\n                    if (NetworkManager.this.webView != null) {\n                        updateConnectionInfo(sockMan.getActiveNetworkInfo());\n                    }\n\n                    String connectionType = null;\n                    if(NetworkManager.this.lastInfo == null) {\n                        connectionType = TYPE_NONE;\n                    } else {\n                        try {\n                            connectionType = NetworkManager.this.lastInfo.get(\"type\").toString();\n                        } catch (JSONException e) {\n                            LOG.d(LOG_TAG, e.getLocalizedMessage());\n                            connectionType = TYPE_NONE;\n                        }\n                    }\n\n                    // Lollipop always returns false for the EXTRA_NO_CONNECTIVITY flag => fix for Android M and above.\n                    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && TYPE_NONE.equals(connectionType)) {\n                        boolean noConnectivity = intent.getBooleanExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY, false);\n                        LOG.d(LOG_TAG, \"Intent no connectivity: \" + noConnectivity);\n                        if(noConnectivity) {\n                            LOG.d(LOG_TAG, \"Really no connectivity\");\n                        } else {\n                            LOG.d(LOG_TAG, \"!!! Switching to unknown, Intent states there is a connectivity.\");\n                            sendUpdate(TYPE_UNKNOWN);\n                        }\n                    }\n                }\n            };\n        }\n\n        webView.getContext().registerReceiver(this.receiver, intentFilter);\n    }\n\n    private void unregisterReceiver() {\n        if (this.receiver != null) {\n            try {\n                webView.getContext().unregisterReceiver(this.receiver);\n            } catch (Exception e) {\n                LOG.e(LOG_TAG, \"Error unregistering network receiver: \" + e.getMessage(), e);\n            } finally {\n                receiver = null;\n            }\n        }\n    }\n\n    /**\n     * Updates the JavaScript side whenever the connection changes\n     *\n     * @param info the current active network info\n     * @return\n     */\n    private void updateConnectionInfo(NetworkInfo info) {\n        // send update to javascript \"navigator.network.connection\"\n        // Jellybean sends its own info\n        JSONObject thisInfo = this.getConnectionInfo(info);\n        if(!thisInfo.equals(lastInfo))\n        {\n            String connectionType = \"\";\n            try {\n                connectionType = thisInfo.get(\"type\").toString();\n            } catch (JSONException e) {\n                LOG.d(LOG_TAG, e.getLocalizedMessage());\n            }\n\n            sendUpdate(connectionType);\n            lastInfo = thisInfo;\n        }\n    }\n\n    /**\n     * Get the latest network connection information\n     *\n     * @param info the current active network info\n     * @return a JSONObject that represents the network info\n     */\n    private JSONObject getConnectionInfo(NetworkInfo info) {\n        String type = TYPE_NONE;\n        String extraInfo = \"\";\n        if (info != null) {\n            // If we are not connected to any network set type to none\n            if (!info.isConnected()) {\n                type = TYPE_NONE;\n            }\n            else {\n                type = getType(info);\n            }\n            extraInfo = info.getExtraInfo();\n        }\n\n        LOG.d(LOG_TAG, \"Connection Type: \" + type);\n        LOG.d(LOG_TAG, \"Connection Extra Info: \" + extraInfo);\n\n        JSONObject connectionInfo = new JSONObject();\n\n        try {\n            connectionInfo.put(\"type\", type);\n            connectionInfo.put(\"extraInfo\", extraInfo);\n        } catch (JSONException e) {\n            LOG.d(LOG_TAG, e.getLocalizedMessage());\n        }\n\n        return connectionInfo;\n    }\n\n    /**\n     * Create a new plugin result and send it back to JavaScript\n     *\n     * @param connection the network info to set as navigator.connection\n     */\n    private void sendUpdate(String type) {\n        if (connectionCallbackContext != null) {\n            PluginResult result = new PluginResult(PluginResult.Status.OK, type);\n            result.setKeepCallback(true);\n            connectionCallbackContext.sendPluginResult(result);\n        }\n        webView.postMessage(\"networkconnection\", type);\n    }\n\n    /**\n     * Determine the type of connection\n     *\n     * @param info the network info so we can determine connection type.\n     * @return the type of mobile network we are on\n     */\n    private String getType(NetworkInfo info) {\n        if (info != null) {\n            String type = info.getTypeName().toLowerCase(Locale.US);\n\n            LOG.d(LOG_TAG, \"toLower : \" + type.toLowerCase());\n            LOG.d(LOG_TAG, \"wifi : \" + WIFI);\n            if (type.equals(WIFI)) {\n                return TYPE_WIFI;\n            }\n            else if (type.toLowerCase().equals(TYPE_ETHERNET) || type.toLowerCase().startsWith(TYPE_ETHERNET_SHORT)) {\n                return TYPE_ETHERNET;\n            }\n            else if (type.equals(MOBILE) || type.equals(CELLULAR)) {\n                type = info.getSubtypeName().toLowerCase(Locale.US);\n                if (type.equals(GSM) ||\n                    type.equals(GPRS) ||\n                    type.equals(EDGE) ||\n                    type.equals(TWO_G)) {\n                    return TYPE_2G;\n                }\n                else if (type.startsWith(CDMA) ||\n                    type.equals(UMTS) ||\n                    type.equals(ONEXRTT) ||\n                    type.equals(EHRPD) ||\n                    type.equals(HSUPA) ||\n                    type.equals(HSDPA) ||\n                    type.equals(HSPA) ||\n                    type.equals(THREE_G)) {\n                    return TYPE_3G;\n                }\n                else if (type.equals(LTE) ||\n                    type.equals(UMB) ||\n                    type.equals(HSPA_PLUS) ||\n                    type.equals(FOUR_G)) {\n                    return TYPE_4G;\n                }\n            }\n        }\n        else {\n            return TYPE_NONE;\n        }\n        return TYPE_UNKNOWN;\n    }\n}\n","size_bytes":12560},"okul-app/plugins/cordova-plugin-network-information/src/browser/network.js":{"content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar cordova = require('cordova');\nvar proxy = require('cordova/exec/proxy');\nvar Connection = require('./Connection');\n\nvar type = navigator.onLine ? Connection.UNKNOWN : Connection.NONE;\n\n// Subscribe to 'native' online/offline events\nfunction onStatusChange (evt) {\n    type = navigator.onLine ? Connection.UNKNOWN : Connection.NONE;\n    // force async\n    setTimeout(function () {\n        cordova.fireDocumentEvent(evt.type);\n    }, 0);\n}\n\nwindow.addEventListener('online', onStatusChange);\nwindow.addEventListener('offline', onStatusChange);\n\nproxy.add('NetworkStatus', {\n    getConnectionInfo: function (cbSuccess) {\n        // force async\n        setTimeout(function () {\n            cbSuccess(type);\n        }, 0);\n    }\n});\n","size_bytes":1543},"okul-app/plugins/cordova-plugin-network-information/src/ios/CDVConnection.m":{"content":"/*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n */\n#import <CoreTelephony/CTTelephonyNetworkInfo.h>\n\n#import \"CDVConnection.h\"\n#import \"CDVReachability.h\"\n\n@interface CDVConnection (PrivateMethods)\n- (void)updateOnlineStatus;\n- (void)sendPluginResult;\n@end\n\n@implementation CDVConnection\n\n@synthesize connectionType, internetReach;\n\n- (void)getConnectionInfo:(CDVInvokedUrlCommand*)command\n{\n    _callbackId = command.callbackId;\n    [self sendPluginResult];\n}\n\n- (void)sendPluginResult\n{\n    CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsString:self.connectionType];\n\n    [result setKeepCallbackAsBool:YES];\n    [self.commandDelegate sendPluginResult:result callbackId:_callbackId];\n}\n\n- (NSString*)w3cConnectionTypeFor:(CDVReachability*)reachability\n{\n    NetworkStatus networkStatus = [reachability currentReachabilityStatus];\n\n    switch (networkStatus) {\n        case NotReachable:\n            return @\"none\";\n\n        case ReachableViaWWAN:\n        {\n            BOOL isConnectionRequired = [reachability connectionRequired];\n            if (isConnectionRequired) {\n                return @\"none\";\n            } else {\n                if ([[[UIDevice currentDevice] systemVersion] compare:@\"7.0\" options:NSNumericSearch] != NSOrderedAscending) {\n                    CTTelephonyNetworkInfo *telephonyInfo = [CTTelephonyNetworkInfo new];\n                    if ([telephonyInfo.currentRadioAccessTechnology isEqualToString:CTRadioAccessTechnologyGPRS]) {\n                        return @\"2g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyEdge]) {\n                        return @\"2g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyWCDMA]) {\n                        return @\"3g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyHSDPA]) {\n                        return @\"3g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyHSUPA]) {\n                        return @\"3g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyCDMA1x]) {\n                        return @\"3g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyCDMAEVDORev0]) {\n                        return @\"3g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyCDMAEVDORevA]) {\n                        return @\"3g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyCDMAEVDORevB]) {\n                        return @\"3g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyeHRPD]) {\n                        return @\"3g\";\n                    } else if ([telephonyInfo.currentRadioAccessTechnology  isEqualToString:CTRadioAccessTechnologyLTE]) {\n                        return @\"4g\";\n                    }\n                }\n                return @\"cellular\";\n            }\n        }\n        case ReachableViaWiFi:\n        {\n            BOOL isConnectionRequired = [reachability connectionRequired];\n            if (isConnectionRequired) {\n                return @\"none\";\n            } else {\n                return @\"wifi\";\n            }\n        }\n        default:\n            return @\"unknown\";\n    }\n}\n\n- (BOOL)isCellularConnection:(NSString*)theConnectionType\n{\n    return [theConnectionType isEqualToString:@\"2g\"] ||\n           [theConnectionType isEqualToString:@\"3g\"] ||\n           [theConnectionType isEqualToString:@\"4g\"] ||\n           [theConnectionType isEqualToString:@\"cellular\"];\n}\n\n- (void)updateReachability:(CDVReachability*)reachability\n{\n    if (reachability) {\n        // check whether the connection type has changed\n        NSString* newConnectionType = [self w3cConnectionTypeFor:reachability];\n        if ([newConnectionType isEqualToString:self.connectionType]) { // the same as before, remove dupes\n            return;\n        } else {\n            self.connectionType = [self w3cConnectionTypeFor:reachability];\n        }\n    }\n    [self sendPluginResult];\n}\n\n- (void)updateConnectionType:(NSNotification*)note\n{\n    CDVReachability* curReach = [note object];\n\n    if ((curReach != nil) && [curReach isKindOfClass:[CDVReachability class]]) {\n        [self updateReachability:curReach];\n    }\n}\n\n- (void)onPause\n{\n    [self.internetReach stopNotifier];\n}\n\n- (void)onResume\n{\n    [self.internetReach startNotifier];\n    [self updateReachability:self.internetReach];\n}\n\n- (void)pluginInitialize\n{\n    self.connectionType = @\"none\";\n    self.internetReach = [CDVReachability reachabilityForInternetConnection];\n    self.connectionType = [self w3cConnectionTypeFor:self.internetReach];\n    [self.internetReach startNotifier];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateConnectionType:)\n                                                 name:kReachabilityChangedNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateConnectionType:)\n                                                 name:CTRadioAccessTechnologyDidChangeNotification object:nil];\n    if (UIApplicationDidEnterBackgroundNotification && UIApplicationWillEnterForegroundNotification) {\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onPause) name:UIApplicationDidEnterBackgroundNotification object:nil];\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onResume) name:UIApplicationWillEnterForegroundNotification object:nil];\n    }\n}\n\n@end\n","size_bytes":6613},"okul-app/plugins/cordova-plugin-network-information/src/ios/CDVReachability.m":{"content":"/*\n\n File: Reachability.m\n Abstract: Basic demonstration of how to use the SystemConfiguration Reachability APIs.\n Version: 2.2\n\n Disclaimer: IMPORTANT:  This Apple software is supplied to you by Apple Inc.\n (\"Apple\") in consideration of your agreement to the following terms, and your\n use, installation, modification or redistribution of this Apple software\n constitutes acceptance of these terms.  If you do not agree with these terms,\n please do not use, install, modify or redistribute this Apple software.\n\n In consideration of your agreement to abide by the following terms, and subject\n to these terms, Apple grants you a personal, non-exclusive license, under\n Apple's copyrights in this original Apple software (the \"Apple Software\"), to\n use, reproduce, modify and redistribute the Apple Software, with or without\n modifications, in source and/or binary forms; provided that if you redistribute\n the Apple Software in its entirety and without modifications, you must retain\n this notice and the following text and disclaimers in all such redistributions\n of the Apple Software.\n Neither the name, trademarks, service marks or logos of Apple Inc. may be used\n to endorse or promote products derived from the Apple Software without specific\n prior written permission from Apple.  Except as expressly stated in this notice,\n no other rights or licenses, express or implied, are granted by Apple herein,\n including but not limited to any patent rights that may be infringed by your\n derivative works or by other works in which the Apple Software may be\n incorporated.\n\n The Apple Software is provided by Apple on an \"AS IS\" basis.  APPLE MAKES NO\n WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED\n WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN\n COMBINATION WITH YOUR PRODUCTS.\n\n IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION AND/OR\n DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF\n CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF\n APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n Copyright (C) 2010 Apple Inc. All Rights Reserved.\n\n*/\n\n#import <sys/socket.h>\n#import <netinet/in.h>\n#import <netinet6/in6.h>\n#import <arpa/inet.h>\n#import <ifaddrs.h>\n#import <netdb.h>\n\n#import <CoreFoundation/CoreFoundation.h>\n\n#import \"CDVReachability.h\"\n\n#define kShouldPrintReachabilityFlags 0\n\nstatic void CDVPrintReachabilityFlags(SCNetworkReachabilityFlags flags, const char* comment)\n{\n#if kShouldPrintReachabilityFlags\n        NSLog(@\"Reachability Flag Status: %c%c %c%c%c%c%c%c%c %s\\n\",\n            (flags & kSCNetworkReachabilityFlagsIsWWAN)               ? 'W' : '-',\n            (flags & kSCNetworkReachabilityFlagsReachable)            ? 'R' : '-',\n\n            (flags & kSCNetworkReachabilityFlagsTransientConnection)  ? 't' : '-',\n            (flags & kSCNetworkReachabilityFlagsConnectionRequired)   ? 'c' : '-',\n            (flags & kSCNetworkReachabilityFlagsConnectionOnTraffic)  ? 'C' : '-',\n            (flags & kSCNetworkReachabilityFlagsInterventionRequired) ? 'i' : '-',\n            (flags & kSCNetworkReachabilityFlagsConnectionOnDemand)   ? 'D' : '-',\n            (flags & kSCNetworkReachabilityFlagsIsLocalAddress)       ? 'l' : '-',\n            (flags & kSCNetworkReachabilityFlagsIsDirect)             ? 'd' : '-',\n            comment\n            );\n#endif\n}\n\n@implementation CDVReachability\n\nstatic void CDVReachabilityCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags flags, void* info)\n{\n#pragma unused (target, flags)\n    //\tNSCAssert(info != NULL, @\"info was NULL in ReachabilityCallback\");\n    //\tNSCAssert([(NSObject*) info isKindOfClass: [Reachability class]], @\"info was wrong class in ReachabilityCallback\");\n\n    // Converted the asserts above to conditionals, with safe return from the function\n    if (info == NULL) {\n        NSLog(@\"info was NULL in ReachabilityCallback\");\n        return;\n    }\n\n    if (![(__bridge NSObject*)info isKindOfClass :[CDVReachability class]]) {\n        NSLog(@\"info was wrong class in ReachabilityCallback\");\n        return;\n    }\n\n    // We're on the main RunLoop, so an NSAutoreleasePool is not necessary, but is added defensively\n    // in case someon uses the Reachability object in a different thread.\n    @autoreleasepool {\n        CDVReachability* noteObject = (__bridge CDVReachability*)info;\n        // Post a notification to notify the client that the network reachability changed.\n        [[NSNotificationCenter defaultCenter] postNotificationName:kReachabilityChangedNotification object:noteObject];\n    }\n}\n\n- (BOOL)startNotifier\n{\n    BOOL retVal = NO;\n    SCNetworkReachabilityContext context = {0, (__bridge void*)(self), NULL, NULL, NULL};\n\n    if (SCNetworkReachabilitySetCallback(reachabilityRef, CDVReachabilityCallback, &context)) {\n        if (SCNetworkReachabilityScheduleWithRunLoop(reachabilityRef, CFRunLoopGetCurrent(), kCFRunLoopDefaultMode)) {\n            retVal = YES;\n        }\n    }\n    return retVal;\n}\n\n- (void)stopNotifier\n{\n    if (reachabilityRef != NULL) {\n        SCNetworkReachabilitySetCallback(reachabilityRef, NULL, NULL);\n        SCNetworkReachabilityUnscheduleFromRunLoop(reachabilityRef, CFRunLoopGetCurrent(), kCFRunLoopDefaultMode);\n    }\n}\n\n- (void)dealloc\n{\n    [self stopNotifier];\n    if (reachabilityRef != NULL) {\n        CFRelease(reachabilityRef);\n    }\n}\n\n+ (CDVReachability*)reachabilityWithHostName:(NSString*)hostName;\n{\n    CDVReachability* retVal = NULL;\n    SCNetworkReachabilityRef reachability = SCNetworkReachabilityCreateWithName(NULL, [hostName UTF8String]);\n    if (reachability != NULL) {\n        retVal = [[self alloc] init];\n        if (retVal != NULL) {\n            retVal->reachabilityRef = reachability;\n        }\n        else {\n            CFRelease(reachability);\n        }\n    }\n    return retVal;\n}\n\n+ (CDVReachability*)reachabilityWithAddress:(const struct sockaddr*)hostAddress;\n{\n    SCNetworkReachabilityRef reachability = SCNetworkReachabilityCreateWithAddress(kCFAllocatorDefault, hostAddress);\n    CDVReachability* retVal = NULL;\n    if (reachability != NULL) {\n        retVal = [[self alloc] init];\n        if (retVal != NULL) {\n            retVal->reachabilityRef = reachability;\n        }\n        else {\n            CFRelease(reachability);\n        }\n    }\n    return retVal;\n}\n\n// Reachability treats the 0.0.0.0 address as a special token that causes it to monitor the general routing\n// status of the device, both IPv4 and IPv6.\n+ (CDVReachability*)reachabilityForInternetConnection;\n{\n    struct sockaddr_in zeroAddress;\n    bzero(&zeroAddress, sizeof(zeroAddress));\n    zeroAddress.sin_len = sizeof(zeroAddress);\n    zeroAddress.sin_family = AF_INET;\n    return [self reachabilityWithAddress:(const struct sockaddr*) &zeroAddress];\n}\n\n#pragma mark Network Flag Handling\n\n- (NetworkStatus)networkStatusForFlags:(SCNetworkReachabilityFlags)flags\n{\n    CDVPrintReachabilityFlags(flags, \"networkStatusForFlags\");\n    if ((flags & kSCNetworkReachabilityFlagsReachable) == 0) {\n        // if target host is not reachable\n        return NotReachable;\n    }\n\n    NetworkStatus retVal = NotReachable;\n\n    if ((flags & kSCNetworkReachabilityFlagsConnectionRequired) == 0) {\n        // if target host is reachable and no connection is required\n        //  then we'll assume (for now) that your on Wi-Fi\n        retVal = ReachableViaWiFi;\n    }\n\n    if ((((flags & kSCNetworkReachabilityFlagsConnectionOnDemand) != 0) ||\n        ((flags & kSCNetworkReachabilityFlagsConnectionOnTraffic) != 0))) {\n        // ... and the connection is on-demand (or on-traffic) if the\n        //     calling application is using the CFSocketStream or higher APIs\n\n        if ((flags & kSCNetworkReachabilityFlagsInterventionRequired) == 0) {\n            // ... and no [user] intervention is needed\n            retVal = ReachableViaWiFi;\n        }\n    }\n\n    if ((flags & kSCNetworkReachabilityFlagsIsWWAN) == kSCNetworkReachabilityFlagsIsWWAN) {\n        // ... but WWAN connections are OK if the calling application\n        //     is using the CFNetwork (CFSocketStream?) APIs.\n        retVal = ReachableViaWWAN;\n    }\n    return retVal;\n}\n\n- (BOOL)connectionRequired;\n{\n    NSAssert(reachabilityRef != NULL, @\"connectionRequired called with NULL reachabilityRef\");\n    SCNetworkReachabilityFlags flags;\n    if (SCNetworkReachabilityGetFlags(reachabilityRef, &flags)) {\n        return flags & kSCNetworkReachabilityFlagsConnectionRequired;\n    }\n    return NO;\n}\n\n- (NetworkStatus)currentReachabilityStatus\n{\n    NSAssert(reachabilityRef != NULL, @\"currentNetworkStatus called with NULL reachabilityRef\");\n    NetworkStatus retVal = NotReachable;\n    SCNetworkReachabilityFlags flags;\n    if (SCNetworkReachabilityGetFlags(reachabilityRef, &flags)) {\n        retVal = [self networkStatusForFlags:flags];\n    }\n    return retVal;\n}\n\n@end\n","size_bytes":9237},"okul-app/plugins/cordova-plugin-network-information/src/windows/NetworkInfoProxy.js":{"content":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global Windows:true */\n\nvar Connection = require('./Connection');\n\nvar winNetConn = Windows.Networking.Connectivity;\nvar networkInfo = winNetConn.NetworkInformation;\n\nfunction getCurrrentConnectionType () {\n\n    var profile = networkInfo.getInternetConnectionProfile();\n\n    if (!profile) {\n        return Connection.NONE;\n    }\n\n    var conLevel = profile.getNetworkConnectivityLevel();\n    var interfaceType = profile.networkAdapter.ianaInterfaceType;\n\n    // since we use this to detect whether we are online or offline we do check agains InternetAccess\n    // localAccess (airplane mode as an example) or constrainedInternetAccess mean there is no access to the internet available\n    // https://msdn.microsoft.com/library/windows/apps/windows.networking.connectivity.networkconnectivitylevel.aspx\n    if (conLevel !== Windows.Networking.Connectivity.NetworkConnectivityLevel.internetAccess) {\n        return Connection.NONE;\n    }\n\n    var connectionType;\n\n    switch (interfaceType) {\n    case 71:\n        connectionType = Connection.WIFI;\n        break;\n    case 6:\n        connectionType = Connection.ETHERNET;\n        break;\n    case 243: // (3GPP WWAN) // Fallthrough is intentional\n    case 244: // (3GPP2 WWAN)\n        connectionType = Connection.CELL_3G;\n        break;\n    default:\n        connectionType = Connection.UNKNOWN;\n        break;\n    }\n\n    return connectionType;\n}\n\nmodule.exports = {\n\n    getConnectionInfo: function (win, fail, args) {\n        var reportConnectionInfoOnce = function () {\n            win(getCurrrentConnectionType(), { keepCallback: true });\n        };\n\n        // report current connection  type\n        setTimeout(reportConnectionInfoOnce, 0);\n        // start traking future changes\n        networkInfo.addEventListener('networkstatuschanged', reportConnectionInfoOnce);\n    }\n};\n\nrequire('cordova/exec/proxy').add('NetworkStatus', module.exports);\n","size_bytes":2715},"okul-app/plugins/cordova-plugin-splashscreen/src/android/SplashScreen.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova.splashscreen;\n\nimport android.app.Dialog;\nimport android.app.ProgressDialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.res.Configuration;\nimport android.content.res.ColorStateList;\nimport android.graphics.Color;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Handler;\nimport android.view.Display;\nimport android.view.Gravity;\nimport android.view.View;\nimport android.view.ViewGroup.LayoutParams;\nimport android.view.WindowManager;\nimport android.view.animation.Animation;\nimport android.view.animation.AlphaAnimation;\nimport android.view.animation.DecelerateInterpolator;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.RelativeLayout;\n\nimport org.apache.cordova.CallbackContext;\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.CordovaWebView;\nimport org.json.JSONArray;\nimport org.json.JSONException;\n\npublic class SplashScreen extends CordovaPlugin {\n    private static final String LOG_TAG = \"SplashScreen\";\n    // Cordova 3.x.x has a copy of this plugin bundled with it (SplashScreenInternal.java).\n    // Enable functionality only if running on 4.x.x.\n    private static final boolean HAS_BUILT_IN_SPLASH_SCREEN = Integer.valueOf(CordovaWebView.CORDOVA_VERSION.split(\"\\\\.\")[0]) < 4;\n    private static final int DEFAULT_SPLASHSCREEN_DURATION = 3000;\n    private static final int DEFAULT_FADE_DURATION = 500;\n    private static Dialog splashDialog;\n    private static ProgressDialog spinnerDialog;\n    private static boolean firstShow = true;\n    private static boolean lastHideAfterDelay; // https://issues.apache.org/jira/browse/CB-9094\n\n    /**\n     * Displays the splash drawable.\n     */\n    private ImageView splashImageView;\n\n    /**\n     * Remember last device orientation to detect orientation changes.\n     */\n    private int orientation;\n\n    // Helper to be compile-time compatible with both Cordova 3.x and 4.x.\n    private View getView() {\n        try {\n            return (View)webView.getClass().getMethod(\"getView\").invoke(webView);\n        } catch (Exception e) {\n            return (View)webView;\n        }\n    }\n\n    private int getSplashId() {\n        int drawableId = 0;\n        String splashResource = preferences.getString(\"SplashScreen\", \"screen\");\n        if (splashResource != null) {\n            drawableId = cordova.getActivity().getResources().getIdentifier(splashResource, \"drawable\", cordova.getActivity().getClass().getPackage().getName());\n            if (drawableId == 0) {\n                drawableId = cordova.getActivity().getResources().getIdentifier(splashResource, \"drawable\", cordova.getActivity().getPackageName());\n            }\n        }\n        return drawableId;\n    }\n\n    @Override\n    protected void pluginInitialize() {\n        if (HAS_BUILT_IN_SPLASH_SCREEN) {\n            return;\n        }\n        // Make WebView invisible while loading URL\n        // CB-11326 Ensure we're calling this on UI thread\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                getView().setVisibility(View.INVISIBLE);\n            }\n        });\n        int drawableId = getSplashId();\n\n        // Save initial orientation.\n        orientation = cordova.getActivity().getResources().getConfiguration().orientation;\n\n        if (firstShow) {\n            boolean autoHide = preferences.getBoolean(\"AutoHideSplashScreen\", true);\n            showSplashScreen(autoHide);\n        }\n\n        if (preferences.getBoolean(\"SplashShowOnlyFirstTime\", true)) {\n            firstShow = false;\n        }\n    }\n\n    /**\n     * Shorter way to check value of \"SplashMaintainAspectRatio\" preference.\n     */\n    private boolean isMaintainAspectRatio () {\n        return preferences.getBoolean(\"SplashMaintainAspectRatio\", false);\n    }\n\n    private int getFadeDuration () {\n        int fadeSplashScreenDuration = preferences.getBoolean(\"FadeSplashScreen\", true) ?\n            preferences.getInteger(\"FadeSplashScreenDuration\", DEFAULT_FADE_DURATION) : 0;\n\n        if (fadeSplashScreenDuration < 30) {\n            // [CB-9750] This value used to be in decimal seconds, so we will assume that if someone specifies 10\n            // they mean 10 seconds, and not the meaningless 10ms\n            fadeSplashScreenDuration *= 1000;\n        }\n\n        return fadeSplashScreenDuration;\n    }\n\n    @Override\n    public void onPause(boolean multitasking) {\n        if (HAS_BUILT_IN_SPLASH_SCREEN) {\n            return;\n        }\n        // hide the splash screen to avoid leaking a window\n        this.removeSplashScreen(true);\n    }\n\n    @Override\n    public void onDestroy() {\n        if (HAS_BUILT_IN_SPLASH_SCREEN) {\n            return;\n        }\n        // hide the splash screen to avoid leaking a window\n        this.removeSplashScreen(true);\n        // If we set this to true onDestroy, we lose track when we go from page to page!\n        //firstShow = true;\n    }\n\n    @Override\n    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n        if (action.equals(\"hide\")) {\n            cordova.getActivity().runOnUiThread(new Runnable() {\n                public void run() {\n                    webView.postMessage(\"splashscreen\", \"hide\");\n                }\n            });\n        } else if (action.equals(\"show\")) {\n            cordova.getActivity().runOnUiThread(new Runnable() {\n                public void run() {\n                    webView.postMessage(\"splashscreen\", \"show\");\n                }\n            });\n        } else {\n            return false;\n        }\n\n        callbackContext.success();\n        return true;\n    }\n\n    @Override\n    public Object onMessage(String id, Object data) {\n        if (HAS_BUILT_IN_SPLASH_SCREEN) {\n            return null;\n        }\n        if (\"splashscreen\".equals(id)) {\n            if (\"hide\".equals(data.toString())) {\n                this.removeSplashScreen(false);\n            } else {\n                this.showSplashScreen(false);\n            }\n        } else if (\"spinner\".equals(id)) {\n            if (\"stop\".equals(data.toString())) {\n                getView().setVisibility(View.VISIBLE);\n            }\n        } else if (\"onReceivedError\".equals(id)) {\n            this.spinnerStop();\n        }\n        return null;\n    }\n\n    // Don't add @Override so that plugin still compiles on 3.x.x for a while\n    public void onConfigurationChanged(Configuration newConfig) {\n        if (newConfig.orientation != orientation) {\n            orientation = newConfig.orientation;\n\n            // Splash drawable may change with orientation, so reload it.\n            if (splashImageView != null) {\n                int drawableId = getSplashId();\n                if (drawableId != 0) {\n                    splashImageView.setImageDrawable(cordova.getActivity().getResources().getDrawable(drawableId));\n                }\n            }\n        }\n    }\n\n    private void removeSplashScreen(final boolean forceHideImmediately) {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            public void run() {\n        if (splashDialog != null && splashImageView != null && splashDialog.isShowing()) {//check for non-null splashImageView, see https://issues.apache.org/jira/browse/CB-12277\n                    final int fadeSplashScreenDuration = getFadeDuration();\n                    // CB-10692 If the plugin is being paused/destroyed, skip the fading and hide it immediately\n                    if (fadeSplashScreenDuration > 0 && forceHideImmediately == false) {\n                        AlphaAnimation fadeOut = new AlphaAnimation(1, 0);\n                        fadeOut.setInterpolator(new DecelerateInterpolator());\n                        fadeOut.setDuration(fadeSplashScreenDuration);\n\n                        splashImageView.setAnimation(fadeOut);\n                        splashImageView.startAnimation(fadeOut);\n\n                        fadeOut.setAnimationListener(new Animation.AnimationListener() {\n                            @Override\n                            public void onAnimationStart(Animation animation) {\n                                spinnerStop();\n                            }\n\n                            @Override\n                            public void onAnimationEnd(Animation animation) {\n                                if (splashDialog != null && splashImageView != null && splashDialog.isShowing()) {//check for non-null splashImageView, see https://issues.apache.org/jira/browse/CB-12277\n                                    splashDialog.dismiss();\n                                    splashDialog = null;\n                                    splashImageView = null;\n                                }\n                            }\n\n                            @Override\n                            public void onAnimationRepeat(Animation animation) {\n                            }\n                        });\n                    } else {\n                        spinnerStop();\n                        splashDialog.dismiss();\n                        splashDialog = null;\n                        splashImageView = null;\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Shows the splash screen over the full Activity\n     */\n    @SuppressWarnings(\"deprecation\")\n    private void showSplashScreen(final boolean hideAfterDelay) {\n        final int splashscreenTime = preferences.getInteger(\"SplashScreenDelay\", DEFAULT_SPLASHSCREEN_DURATION);\n        final int drawableId = getSplashId();\n\n        final int fadeSplashScreenDuration = getFadeDuration();\n        final int effectiveSplashDuration = Math.max(0, splashscreenTime - fadeSplashScreenDuration);\n\n        lastHideAfterDelay = hideAfterDelay;\n\n        // Prevent to show the splash dialog if the activity is in the process of finishing\n        if (cordova.getActivity().isFinishing()) {\n            return;\n        }\n        // If the splash dialog is showing don't try to show it again\n        if (splashDialog != null && splashDialog.isShowing()) {\n            return;\n        }\n        if (drawableId == 0 || (splashscreenTime <= 0 && hideAfterDelay)) {\n            return;\n        }\n\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            public void run() {\n                // Get reference to display\n                Display display = cordova.getActivity().getWindowManager().getDefaultDisplay();\n                Context context = webView.getContext();\n\n                // Use an ImageView to render the image because of its flexible scaling options.\n                splashImageView = new ImageView(context);\n                splashImageView.setImageResource(drawableId);\n                LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\n                splashImageView.setLayoutParams(layoutParams);\n\n                splashImageView.setMinimumHeight(display.getHeight());\n                splashImageView.setMinimumWidth(display.getWidth());\n\n                // TODO: Use the background color of the webView's parent instead of using the preference.\n                splashImageView.setBackgroundColor(preferences.getInteger(\"backgroundColor\", Color.BLACK));\n\n                if (isMaintainAspectRatio()) {\n                    // CENTER_CROP scale mode is equivalent to CSS \"background-size:cover\"\n                    splashImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n                }\n                else {\n                    // FIT_XY scales image non-uniformly to fit into image view.\n                    splashImageView.setScaleType(ImageView.ScaleType.FIT_XY);\n                }\n\n                // Create and show the dialog\n                splashDialog = new Dialog(context, android.R.style.Theme_Translucent_NoTitleBar);\n                // check to see if the splash screen should be full screen\n                if ((cordova.getActivity().getWindow().getAttributes().flags & WindowManager.LayoutParams.FLAG_FULLSCREEN)\n                        == WindowManager.LayoutParams.FLAG_FULLSCREEN) {\n                    splashDialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n                            WindowManager.LayoutParams.FLAG_FULLSCREEN);\n                }\n                splashDialog.setContentView(splashImageView);\n                splashDialog.setCancelable(false);\n                splashDialog.show();\n\n                if (preferences.getBoolean(\"ShowSplashScreenSpinner\", true)) {\n                    spinnerStart();\n                }\n\n                // Set Runnable to remove splash screen just in case\n                if (hideAfterDelay) {\n                    final Handler handler = new Handler();\n                    handler.postDelayed(new Runnable() {\n                        public void run() {\n                            if (lastHideAfterDelay) {\n                                removeSplashScreen(false);\n                            }\n                        }\n                    }, effectiveSplashDuration);\n                }\n            }\n        });\n    }\n\n    // Show only spinner in the center of the screen\n    private void spinnerStart() {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            public void run() {\n                spinnerStop();\n\n                spinnerDialog = new ProgressDialog(webView.getContext());\n                spinnerDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\n                    public void onCancel(DialogInterface dialog) {\n                        spinnerDialog = null;\n                    }\n                });\n\n                spinnerDialog.setCancelable(false);\n                spinnerDialog.setIndeterminate(true);\n\n                RelativeLayout centeredLayout = new RelativeLayout(cordova.getActivity());\n                centeredLayout.setGravity(Gravity.CENTER);\n                centeredLayout.setLayoutParams(new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\n\n                ProgressBar progressBar = new ProgressBar(webView.getContext());\n                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n                layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);\n                progressBar.setLayoutParams(layoutParams);\n\n                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {\n                    String colorName = preferences.getString(\"SplashScreenSpinnerColor\", null);\n                    if(colorName != null){\n                        int[][] states = new int[][] {\n                            new int[] { android.R.attr.state_enabled}, // enabled\n                            new int[] {-android.R.attr.state_enabled}, // disabled\n                            new int[] {-android.R.attr.state_checked}, // unchecked\n                            new int[] { android.R.attr.state_pressed}  // pressed\n                        };\n                        int progressBarColor = Color.parseColor(colorName);\n                        int[] colors = new int[] {\n                            progressBarColor,\n                            progressBarColor,\n                            progressBarColor,\n                            progressBarColor\n                        };\n                        ColorStateList colorStateList = new ColorStateList(states, colors);\n                        progressBar.setIndeterminateTintList(colorStateList);\n                    }\n                }\n\n                centeredLayout.addView(progressBar);\n\n                spinnerDialog.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);\n                spinnerDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n\n                spinnerDialog.show();\n                spinnerDialog.setContentView(centeredLayout);\n            }\n        });\n    }\n\n    private void spinnerStop() {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            public void run() {\n                if (spinnerDialog != null && spinnerDialog.isShowing()) {\n                    spinnerDialog.dismiss();\n                    spinnerDialog = null;\n                }\n            }\n        });\n    }\n}\n","size_bytes":17328},"okul-app/plugins/cordova-plugin-splashscreen/src/browser/SplashScreenProxy.js":{"content":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n// Default parameter values including image size can be changed in `config.xml`\nvar splashImageWidth = 170;\nvar splashImageHeight = 200;\nvar position = { x: 0, y: 0, width: splashImageWidth, height: splashImageHeight }; \nvar localSplash; // the image to display\nvar localSplashImage;\nvar bgColor = \"#464646\";\nvar imageSrc = '/img/logo.png';\nvar splashScreenDelay = 3000; // in milliseconds\nvar showSplashScreen = true; // show splashcreen by default\nvar cordova = require('cordova');\nvar configHelper = cordova.require('cordova/confighelper');\nvar autoHideSplashScreen = true;\n\nfunction updateImageLocation() {\n    position.width = Math.min(splashImageWidth, window.innerWidth);\n    position.height = position.width * (splashImageHeight / splashImageWidth);\n\n    localSplash.style.width = window.innerWidth + \"px\";\n    localSplash.style.height = window.innerHeight + \"px\";\n    localSplash.style.top = \"0px\";\n    localSplash.style.left = \"0px\";\n\n    localSplashImage.style.top = \"50%\";\n    localSplashImage.style.left = \"50%\";\n    localSplashImage.style.height = position.height + \"px\";\n    localSplashImage.style.width = position.width + \"px\";\n    localSplashImage.style.marginTop = (-position.height / 2) + \"px\";\n    localSplashImage.style.marginLeft = (-position.width / 2) + \"px\";\n}\n\nfunction onResize() {\n    updateImageLocation();\n}\n\nvar SplashScreen = {\n    setBGColor: function (cssBGColor) {\n        bgColor = cssBGColor;\n        if (localSplash) {\n            localSplash.style.backgroundColor = bgColor;\n        }\n    },\n    show: function () {\n        if(!localSplash) {\n            window.addEventListener(\"resize\", onResize, false);\n            localSplash = document.createElement(\"div\");\n            localSplash.style.backgroundColor = bgColor;\n            localSplash.style.position = \"absolute\";\n            localSplash.style[\"z-index\"] = \"99999\";\n\n            localSplashImage = document.createElement(\"img\");\n            localSplashImage.src = imageSrc;\n            localSplashImage.style.position = \"absolute\";\n\n            updateImageLocation();\n\n            localSplash.appendChild(localSplashImage);\n            document.body.appendChild(localSplash);\n\n            // deviceready fires earlier than the plugin init on cold-start\n            if (SplashScreen.shouldHideImmediately) {\n                SplashScreen.shouldHideImmediately = false;\n                window.setTimeout(function () {\n                    SplashScreen.hide();\n                }, 1000);\n            }\n        }\n    },\n    hide: function () {\n        if(localSplash) {\n            var innerLocalSplash = localSplash;\n            localSplash = null;\n            window.removeEventListener(\"resize\", onResize, false);\n\n            innerLocalSplash.style.opacity = '0';\n            innerLocalSplash.style[\"-webkit-transition\"] = \"opacity 1s ease-in-out\";\n            innerLocalSplash.style[\"-moz-transition\"] = \"opacity 1s ease-in-out\";\n            innerLocalSplash.style[\"-ms-transition\"] = \"opacity 1s ease-in-out\";\n            innerLocalSplash.style[\"-o-transition\"] = \"opacity 1s ease-in-out\";\n\n            window.setTimeout(function () {\n                document.body.removeChild(innerLocalSplash);\n                innerLocalSplash = null;\n            }, 1000);\n        } else {\n            SplashScreen.shouldHideImmediately = true;\n        }\n    }\n};\n\n/**\n * Reads preferences via ConfigHelper and substitutes default parameters.\n */\nfunction readPreferencesFromCfg(cfg) {\n    try {\n        var value = cfg.getPreferenceValue('ShowSplashScreen');\n        if(typeof value != 'undefined') {\n            showSplashScreen = value === 'true';\n        }\n\n        splashScreenDelay = cfg.getPreferenceValue('SplashScreenDelay') || splashScreenDelay;\n        splashScreenDelay = parseInt(splashScreenDelay, 10);\n\n        imageSrc = cfg.getPreferenceValue('SplashScreen') || imageSrc;\n        bgColor = cfg.getPreferenceValue('SplashScreenBackgroundColor') || bgColor;\n        splashImageWidth = cfg.getPreferenceValue('SplashScreenWidth') || splashImageWidth;\n        splashImageHeight = cfg.getPreferenceValue('SplashScreenHeight') || splashImageHeight;\n        autoHideSplashScreen = cfg.getPreferenceValue('AutoHideSplashScreen') || autoHideSplashScreen;\n        autoHideSplashScreen = (autoHideSplashScreen === true || autoHideSplashScreen.toLowerCase() === 'true');\n    } catch(e) {\n        var msg = '[Browser][SplashScreen] Error occurred on loading preferences from config.xml: ' + JSON.stringify(e);\n        console.error(msg);\n    }\n}\n\n/**\n * Shows and hides splashscreen if it is enabled, with a delay according the current preferences.\n */\nfunction showAndHide() {\n    if(showSplashScreen) {\n        SplashScreen.show();\n\n        window.setTimeout(function() {\n            SplashScreen.hide();\n        }, splashScreenDelay);\n    }\n}\n\n/**\n * Tries to read config.xml and override default properties and then shows and hides splashscreen if it is enabled.\n */\n(function initAndShow() {\n    configHelper.readConfig(function(config) {\n        readPreferencesFromCfg(config);\n        if (autoHideSplashScreen) {\n            showAndHide();\n        } else {\n            SplashScreen.show();\n        }\n\n    }, function(err) {\n        console.error(err);\n    });\n})();\n\nmodule.exports = SplashScreen;\n\nrequire(\"cordova/exec/proxy\").add(\"SplashScreen\", SplashScreen);\n\n","size_bytes":6174},"okul-app/plugins/cordova-plugin-splashscreen/src/ios/CDVSplashScreen.m":{"content":"/*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n */\n\n#import \"CDVSplashScreen.h\"\n#import <Cordova/CDVViewController.h>\n#import <Cordova/CDVScreenOrientationDelegate.h>\n#import \"CDVViewController+SplashScreen.h\"\n\n#define kSplashScreenDurationDefault 3000.0f\n#define kFadeDurationDefault 500.0f\n\n\n@implementation CDVSplashScreen\n\n- (void)pluginInitialize\n{\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(pageDidLoad) name:CDVPageDidLoadNotification object:nil];\n\n    [self setVisible:YES];\n}\n\n- (void)show:(CDVInvokedUrlCommand*)command\n{\n    [self setVisible:YES];\n}\n\n- (void)hide:(CDVInvokedUrlCommand*)command\n{\n    [self setVisible:NO andForce:YES];\n}\n\n- (void)pageDidLoad\n{\n    id autoHideSplashScreenValue = [self.commandDelegate.settings objectForKey:[@\"AutoHideSplashScreen\" lowercaseString]];\n\n    // if value is missing, default to yes\n    if ((autoHideSplashScreenValue == nil) || [autoHideSplashScreenValue boolValue]) {\n        [self setVisible:NO];\n    }\n}\n\n- (void)observeValueForKeyPath:(NSString*)keyPath ofObject:(id)object change:(NSDictionary*)change context:(void*)context\n{\n    [self updateImage];\n}\n\n- (void)createViews\n{\n    /*\n     * The Activity View is the top spinning throbber in the status/battery bar. We init it with the default Grey Style.\n     *\n     *     whiteLarge = UIActivityIndicatorViewStyleWhiteLarge\n     *     white      = UIActivityIndicatorViewStyleWhite\n     *     gray       = UIActivityIndicatorViewStyleGray\n     *\n     */\n\n    // Determine whether rotation should be enabled for this device\n    // Per iOS HIG, landscape is only supported on iPad and iPhone 6+\n    CDV_iOSDevice device = [self getCurrentDevice];\n    BOOL autorotateValue = (device.iPad || device.iPhone6Plus || device.iPhoneX) ?\n        [(CDVViewController *)self.viewController shouldAutorotateDefaultValue] :\n        NO;\n\n    [(CDVViewController *)self.viewController setEnabledAutorotation:autorotateValue];\n\n    NSString* topActivityIndicator = [self.commandDelegate.settings objectForKey:[@\"TopActivityIndicator\" lowercaseString]];\n    UIActivityIndicatorViewStyle topActivityIndicatorStyle = UIActivityIndicatorViewStyleGray;\n\n    if ([topActivityIndicator isEqualToString:@\"whiteLarge\"])\n    {\n        topActivityIndicatorStyle = UIActivityIndicatorViewStyleWhiteLarge;\n    }\n    else if ([topActivityIndicator isEqualToString:@\"white\"])\n    {\n        topActivityIndicatorStyle = UIActivityIndicatorViewStyleWhite;\n    }\n    else if ([topActivityIndicator isEqualToString:@\"gray\"])\n    {\n        topActivityIndicatorStyle = UIActivityIndicatorViewStyleGray;\n    }\n\n    UIView* parentView = self.viewController.view;\n    parentView.userInteractionEnabled = NO;  // disable user interaction while splashscreen is shown\n    _activityView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:topActivityIndicatorStyle];\n    _activityView.center = CGPointMake(parentView.bounds.size.width / 2, parentView.bounds.size.height / 2);\n    _activityView.autoresizingMask = UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleLeftMargin\n        | UIViewAutoresizingFlexibleBottomMargin | UIViewAutoresizingFlexibleRightMargin;\n    [_activityView startAnimating];\n\n    // Set the frame & image later.\n    _imageView = [[UIImageView alloc] init];\n    [parentView addSubview:_imageView];\n\n    id showSplashScreenSpinnerValue = [self.commandDelegate.settings objectForKey:[@\"ShowSplashScreenSpinner\" lowercaseString]];\n    // backwards compatibility - if key is missing, default to true\n    if ((showSplashScreenSpinnerValue == nil) || [showSplashScreenSpinnerValue boolValue])\n    {\n        [parentView addSubview:_activityView];\n    }\n\n    // Frame is required when launching in portrait mode.\n    // Bounds for landscape since it captures the rotation.\n    [parentView addObserver:self forKeyPath:@\"frame\" options:0 context:nil];\n    [parentView addObserver:self forKeyPath:@\"bounds\" options:0 context:nil];\n\n    [self updateImage];\n    _destroyed = NO;\n}\n\n- (void)hideViews\n{\n    [_imageView setAlpha:0];\n    [_activityView setAlpha:0];\n}\n\n- (void)destroyViews\n{\n    _destroyed = YES;\n    [(CDVViewController *)self.viewController setEnabledAutorotation:[(CDVViewController *)self.viewController shouldAutorotateDefaultValue]];\n\n    [_imageView removeFromSuperview];\n    [_activityView removeFromSuperview];\n    _imageView = nil;\n    _activityView = nil;\n    _curImageName = nil;\n\n    self.viewController.view.userInteractionEnabled = YES;  // re-enable user interaction upon completion\n    @try {\n        [self.viewController.view removeObserver:self forKeyPath:@\"frame\"];\n        [self.viewController.view removeObserver:self forKeyPath:@\"bounds\"];\n    }\n    @catch (NSException *exception) {\n        // When reloading the page from a remotely connected Safari, there\n        // are no observers, so the removeObserver method throws an exception,\n        // that we can safely ignore.\n        // Alternatively we can check whether there are observers before calling removeObserver\n    }\n}\n\n- (CDV_iOSDevice) getCurrentDevice\n{\n    CDV_iOSDevice device;\n\n    UIScreen* mainScreen = [UIScreen mainScreen];\n    CGFloat mainScreenHeight = mainScreen.bounds.size.height;\n    CGFloat mainScreenWidth = mainScreen.bounds.size.width;\n\n    int limit = MAX(mainScreenHeight,mainScreenWidth);\n\n    device.iPad = (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad);\n    device.iPhone = (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone);\n    device.retina = ([mainScreen scale] == 2.0);\n    device.iPhone4 = (device.iPhone && limit == 480.0);\n    device.iPhone5 = (device.iPhone && limit == 568.0);\n    // note these below is not a true device detect, for example if you are on an\n    // iPhone 6/6+ but the app is scaled it will prob set iPhone5 as true, but\n    // this is appropriate for detecting the runtime screen environment\n    device.iPhone6 = (device.iPhone && limit == 667.0);\n    device.iPhone6Plus = (device.iPhone && limit == 736.0);\n    device.iPhoneX  = (device.iPhone && limit == 812.0);\n\n    return device;\n}\n\n- (BOOL) isUsingCDVLaunchScreen {\n    NSString* launchStoryboardName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@\"UILaunchStoryboardName\"];\n    if (launchStoryboardName) {\n        return ([launchStoryboardName isEqualToString:@\"CDVLaunchScreen\"]);\n    } else {\n        return NO;\n    }\n}\n\n- (NSString*)getImageName:(UIInterfaceOrientation)currentOrientation delegate:(id<CDVScreenOrientationDelegate>)orientationDelegate device:(CDV_iOSDevice)device\n{\n    // Use UILaunchImageFile if specified in plist.  Otherwise, use Default.\n    NSString* imageName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@\"UILaunchImageFile\"];\n\n    // detect if we are using CB-9762 Launch Storyboard; if so, return the associated image instead\n    if ([self isUsingCDVLaunchScreen]) {\n        imageName = @\"LaunchStoryboard\";\n        return imageName;\n    }\n\n    NSUInteger supportedOrientations = [orientationDelegate supportedInterfaceOrientations];\n\n    // Checks to see if the developer has locked the orientation to use only one of Portrait or Landscape\n    BOOL supportsLandscape = (supportedOrientations & UIInterfaceOrientationMaskLandscape);\n    BOOL supportsPortrait = (supportedOrientations & UIInterfaceOrientationMaskPortrait || supportedOrientations & UIInterfaceOrientationMaskPortraitUpsideDown);\n    // this means there are no mixed orientations in there\n    BOOL isOrientationLocked = !(supportsPortrait && supportsLandscape);\n\n    if (imageName)\n    {\n        imageName = [imageName stringByDeletingPathExtension];\n    }\n    else\n    {\n        imageName = @\"Default\";\n    }\n\n    // Add Asset Catalog specific prefixes\n    if ([imageName isEqualToString:@\"LaunchImage\"])\n    {\n        if (device.iPhone4 || device.iPhone5 || device.iPad) {\n            imageName = [imageName stringByAppendingString:@\"-700\"];\n        } else if(device.iPhone6) {\n            imageName = [imageName stringByAppendingString:@\"-800\"];\n        } else if(device.iPhone6Plus || device.iPhoneX ) {\n            if(device.iPhone6Plus) {\n                imageName = [imageName stringByAppendingString:@\"-800\"];\n            } else {\n                imageName = [imageName stringByAppendingString:@\"-1100\"];\n            }\n            if (currentOrientation == UIInterfaceOrientationPortrait || currentOrientation == UIInterfaceOrientationPortraitUpsideDown)\n            {\n                imageName = [imageName stringByAppendingString:@\"-Portrait\"];\n            }\n        }\n    }\n\n    if (device.iPhone5)\n    { // does not support landscape\n        imageName = [imageName stringByAppendingString:@\"-568h\"];\n    }\n    else if (device.iPhone6)\n    { // does not support landscape\n        imageName = [imageName stringByAppendingString:@\"-667h\"];\n    }\n    else if (device.iPhone6Plus || device.iPhoneX)\n    { // supports landscape\n        if (isOrientationLocked)\n        {\n            imageName = [imageName stringByAppendingString:(supportsLandscape ? @\"-Landscape\" : @\"\")];\n        }\n        else\n        {\n            switch (currentOrientation)\n            {\n                case UIInterfaceOrientationLandscapeLeft:\n                case UIInterfaceOrientationLandscapeRight:\n                        imageName = [imageName stringByAppendingString:@\"-Landscape\"];\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (device.iPhoneX) {\n            imageName = [imageName stringByAppendingString:@\"-2436h\"];\n        } else {\n            imageName = [imageName stringByAppendingString:@\"-736h\"];\n        }\n    }\n    else if (device.iPad)\n    {   // supports landscape\n        if (isOrientationLocked)\n        {\n            imageName = [imageName stringByAppendingString:(supportsLandscape ? @\"-Landscape\" : @\"-Portrait\")];\n        }\n        else\n        {\n            switch (currentOrientation)\n            {\n                case UIInterfaceOrientationLandscapeLeft:\n                case UIInterfaceOrientationLandscapeRight:\n                    imageName = [imageName stringByAppendingString:@\"-Landscape\"];\n                    break;\n\n                case UIInterfaceOrientationPortrait:\n                case UIInterfaceOrientationPortraitUpsideDown:\n                default:\n                    imageName = [imageName stringByAppendingString:@\"-Portrait\"];\n                    break;\n            }\n        }\n    }\n\n    return imageName;\n}\n\n- (UIInterfaceOrientation)getCurrentOrientation\n{\n    UIInterfaceOrientation iOrientation = [UIApplication sharedApplication].statusBarOrientation;\n    UIDeviceOrientation dOrientation = [UIDevice currentDevice].orientation;\n\n    bool landscape;\n\n    if (dOrientation == UIDeviceOrientationUnknown || dOrientation == UIDeviceOrientationFaceUp || dOrientation == UIDeviceOrientationFaceDown) {\n        // If the device is laying down, use the UIInterfaceOrientation based on the status bar.\n        landscape = UIInterfaceOrientationIsLandscape(iOrientation);\n    } else {\n        // If the device is not laying down, use UIDeviceOrientation.\n        landscape = UIDeviceOrientationIsLandscape(dOrientation);\n\n        // There's a bug in iOS!!!! http://openradar.appspot.com/7216046\n        // So values needs to be reversed for landscape!\n        if (dOrientation == UIDeviceOrientationLandscapeLeft)\n        {\n            iOrientation = UIInterfaceOrientationLandscapeRight;\n        }\n        else if (dOrientation == UIDeviceOrientationLandscapeRight)\n        {\n            iOrientation = UIInterfaceOrientationLandscapeLeft;\n        }\n        else if (dOrientation == UIDeviceOrientationPortrait)\n        {\n            iOrientation = UIInterfaceOrientationPortrait;\n        }\n        else if (dOrientation == UIDeviceOrientationPortraitUpsideDown)\n        {\n            iOrientation = UIInterfaceOrientationPortraitUpsideDown;\n        }\n    }\n\n    return iOrientation;\n}\n\n// Sets the view's frame and image.\n- (void)updateImage\n{\n    NSString* imageName = [self getImageName:[self getCurrentOrientation] delegate:(id<CDVScreenOrientationDelegate>)self.viewController device:[self getCurrentDevice]];\n\n    if (![imageName isEqualToString:_curImageName])\n    {\n        UIImage* img = [UIImage imageNamed:imageName];\n        _imageView.image = img;\n        _curImageName = imageName;\n    }\n\n    // Check that splash screen's image exists before updating bounds\n    if (_imageView.image)\n    {\n        [self updateBounds];\n    }\n    else\n    {\n        NSLog(@\"WARNING: The splashscreen image named %@ was not found\", imageName);\n    }\n}\n\n- (void)updateBounds\n{\n    if ([self isUsingCDVLaunchScreen]) {\n        // CB-9762's launch screen expects the image to fill the screen and be scaled using AspectFill.\n        CGSize viewportSize = [UIApplication sharedApplication].delegate.window.bounds.size;\n        _imageView.frame = CGRectMake(0, 0, viewportSize.width, viewportSize.height);\n        _imageView.contentMode = UIViewContentModeScaleAspectFill;\n        return; \n    }\n\n    UIImage* img = _imageView.image;\n    CGRect imgBounds = (img) ? CGRectMake(0, 0, img.size.width, img.size.height) : CGRectZero;\n\n    CGSize screenSize = [self.viewController.view convertRect:[UIScreen mainScreen].bounds fromView:nil].size;\n    UIInterfaceOrientation orientation = [UIApplication sharedApplication].statusBarOrientation;\n    CGAffineTransform imgTransform = CGAffineTransformIdentity;\n\n    /* If and only if an iPhone application is landscape-only as per\n     * UISupportedInterfaceOrientations, the view controller's orientation is\n     * landscape. In this case the image must be rotated in order to appear\n     * correctly.\n     */\n    CDV_iOSDevice device = [self getCurrentDevice];\n    if (UIInterfaceOrientationIsLandscape(orientation) && !device.iPhone6Plus && !device.iPad && !device.iPhoneX)\n    {\n        imgTransform = CGAffineTransformMakeRotation(M_PI / 2);\n        imgBounds.size = CGSizeMake(imgBounds.size.height, imgBounds.size.width);\n    }\n\n    // There's a special case when the image is the size of the screen.\n    if (CGSizeEqualToSize(screenSize, imgBounds.size))\n    {\n        CGRect statusFrame = [self.viewController.view convertRect:[UIApplication sharedApplication].statusBarFrame fromView:nil];\n        if (!(IsAtLeastiOSVersion(@\"7.0\")))\n        {\n            imgBounds.origin.y -= statusFrame.size.height;\n        }\n    }\n    else if (imgBounds.size.width > 0)\n    {\n        CGRect viewBounds = self.viewController.view.bounds;\n        CGFloat imgAspect = imgBounds.size.width / imgBounds.size.height;\n        CGFloat viewAspect = viewBounds.size.width / viewBounds.size.height;\n        // This matches the behaviour of the native splash screen.\n        CGFloat ratio;\n        if (viewAspect > imgAspect)\n        {\n            ratio = viewBounds.size.width / imgBounds.size.width;\n        }\n        else\n        {\n            ratio = viewBounds.size.height / imgBounds.size.height;\n        }\n        imgBounds.size.height *= ratio;\n        imgBounds.size.width *= ratio;\n    }\n\n    _imageView.transform = imgTransform;\n    _imageView.frame = imgBounds;\n}\n\n- (void)setVisible:(BOOL)visible\n{\n    [self setVisible:visible andForce:NO];\n}\n\n- (void)setVisible:(BOOL)visible andForce:(BOOL)force\n{\n    if (visible != _visible || force)\n    {\n        _visible = visible;\n\n        id fadeSplashScreenValue = [self.commandDelegate.settings objectForKey:[@\"FadeSplashScreen\" lowercaseString]];\n        id fadeSplashScreenDuration = [self.commandDelegate.settings objectForKey:[@\"FadeSplashScreenDuration\" lowercaseString]];\n\n        float fadeDuration = fadeSplashScreenDuration == nil ? kFadeDurationDefault : [fadeSplashScreenDuration floatValue];\n\n        id splashDurationString = [self.commandDelegate.settings objectForKey: [@\"SplashScreenDelay\" lowercaseString]];\n        float splashDuration = splashDurationString == nil ? kSplashScreenDurationDefault : [splashDurationString floatValue];\n\n        id autoHideSplashScreenValue = [self.commandDelegate.settings objectForKey:[@\"AutoHideSplashScreen\" lowercaseString]];\n        BOOL autoHideSplashScreen = true;\n\n        if (autoHideSplashScreenValue != nil) {\n            autoHideSplashScreen = [autoHideSplashScreenValue boolValue];\n        }\n\n        if (!autoHideSplashScreen) {\n            // CB-10412 SplashScreenDelay does not make sense if the splashscreen is hidden manually\n            splashDuration = 0;\n        }\n\n\n        if (fadeSplashScreenValue == nil)\n        {\n            fadeSplashScreenValue = @\"true\";\n        }\n\n        if (![fadeSplashScreenValue boolValue])\n        {\n            fadeDuration = 0;\n        }\n        else if (fadeDuration < 30)\n        {\n            // [CB-9750] This value used to be in decimal seconds, so we will assume that if someone specifies 10\n            // they mean 10 seconds, and not the meaningless 10ms\n            fadeDuration *= 1000;\n        }\n\n        if (_visible)\n        {\n            if (_imageView == nil)\n            {\n                [self createViews];\n            }\n        }\n        else if (fadeDuration == 0 && splashDuration == 0)\n        {\n            [self destroyViews];\n        }\n        else\n        {\n            __weak __typeof(self) weakSelf = self;\n            float effectiveSplashDuration;\n\n            // [CB-10562] AutoHideSplashScreen may be \"true\" but we should still be able to hide the splashscreen manually.\n            if (!autoHideSplashScreen || force) {\n                effectiveSplashDuration = (fadeDuration) / 1000;\n            } else {\n                effectiveSplashDuration = (splashDuration - fadeDuration) / 1000;\n            }\n\n            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (uint64_t) effectiveSplashDuration * NSEC_PER_SEC), dispatch_get_main_queue(), CFBridgingRelease(CFBridgingRetain(^(void) {\n                if (!_destroyed) {\n                    [UIView transitionWithView:self.viewController.view\n                                    duration:(fadeDuration / 1000)\n                                    options:UIViewAnimationOptionTransitionNone\n                                    animations:^(void) {\n                                        [weakSelf hideViews];\n                                    }\n                                    completion:^(BOOL finished) {\n                                        // Always destroy views, otherwise you could have an\n                                        // invisible splashscreen that is overlayed over your active views\n                                        // which causes that no touch events are passed\n                                        if (!_destroyed) {\n                                            [weakSelf destroyViews];\n                                            // TODO: It might also be nice to have a js event happen here -jm\n                                        }\n                                    }\n                    ];\n                }\n            })));\n        }\n    }\n}\n\n@end\n","size_bytes":19759},"okul-app/plugins/cordova-plugin-splashscreen/src/ios/CDVViewController+SplashScreen.m":{"content":"/*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n \n http://www.apache.org/licenses/LICENSE-2.0\n \n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n */\n\n#import \"CDVViewController+SplashScreen.h\"\n#import <objc/runtime.h>\n\n@implementation CDVViewController (SplashScreen)\n\n@dynamic enabledAutorotation;\n\n- (void)setEnabledAutorotation:(BOOL)value\n{\n    objc_setAssociatedObject(self,\n                             @selector(enabledAutorotation),\n                             [NSNumber numberWithBool:value],\n                             OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n- (BOOL)enabledAutorotation\n{\n    NSNumber *number =  (NSNumber *)objc_getAssociatedObject(self, @selector(enabledAutorotation));\n\n    // Defaulting to YES to correspond parent CDVViewController behavior\n    if (number == nil)\n    {\n        return YES;\n    }\n\n    return [number boolValue];\n}\n\n+ (void)load\n{\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        Class class = [self class];\n        \n        SEL originalSelector = @selector(shouldAutorotate);\n        SEL swizzledSelector = @selector(splash_shouldAutorotate);\n        \n        Method originalMethod = class_getInstanceMethod(class, originalSelector);\n        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);\n        \n        BOOL didAddMethod = class_addMethod(class,\n                                            originalSelector,\n                                            method_getImplementation(swizzledMethod),\n                                            method_getTypeEncoding(swizzledMethod));\n        \n        if (didAddMethod) {\n            class_replaceMethod(class,\n                                swizzledSelector,\n                                method_getImplementation(originalMethod),\n                                method_getTypeEncoding(originalMethod));\n        } else {\n            method_exchangeImplementations(originalMethod, swizzledMethod);\n        }\n    });\n}\n\n#pragma mark - Method Swizzling\n\n- (BOOL)splash_shouldAutorotate\n{\n    return self.enabledAutorotation;\n}\n\n\n- (BOOL)shouldAutorotateDefaultValue\n{\n    return [self splash_shouldAutorotate];\n}\n\n@end\n","size_bytes":2801},"okul-app/plugins/cordova-plugin-splashscreen/src/wp/ResolutionHelper.cs":{"content":"/*\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nusing Microsoft.Phone.Info;\nusing System;\nusing System.Windows;\n\nnamespace WPCordovaClassLib.Cordova.Commands\n{\n    public enum Resolutions { WVGA, WXGA, HD };\n\n    public static class ResolutionHelper\n    { \n       public static Resolutions CurrentResolution\n        {\n            get\n            {\n                switch (Application.Current.Host.Content.ScaleFactor) \n                {\n                    case 100: return Resolutions.WVGA;\n                    case 160: return Resolutions.WXGA;\n                    case 150: return Resolutions.HD;\n                }\n                throw new InvalidOperationException(\"Unknown resolution\");\n            }\n        }\n    }\n}","size_bytes":1239},"okul-app/plugins/cordova-plugin-splashscreen/src/wp/SplashScreen.cs":{"content":"/*\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\nusing System;\nusing System.Net;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Documents;\nusing System.Windows.Ink;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Animation;\nusing System.Windows.Shapes;\nusing Microsoft.Phone.Info;\nusing System.Windows.Controls.Primitives;\nusing System.Diagnostics;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Resources;\nusing System.IO;\nusing System.Xml.Linq;\nusing System.Linq;\nusing System.Windows.Threading;\n\nnamespace WPCordovaClassLib.Cordova.Commands\n{\n    /// <summary>\n    /// Listens for changes to the state of the battery on the device.\n    /// Currently only the \"isPlugged\" parameter available via native APIs.\n    /// </summary>\n    public class SplashScreen : BaseCommand\n    {\n        private Popup popup;\n\n        // Time until we dismiss the splashscreen\n        private int prefDelay = 3000;\n\n        // Whether we hide it by default\n        private bool prefAutoHide = true;\n\n        // Path to image to use\n        private string prefImagePath = \"SplashScreenImage.jpg\";\n\n        // static because autodismiss is only ever applied once, at app launch\n        // subsequent page loads should not cause the SplashScreen to be shown.\n        private static bool WasShown = false;\n\n        public SplashScreen()\n        {\n            LoadConfigPrefs();\n\n            Image SplashScreen = new Image()\n            {\n                Height = Application.Current.Host.Content.ActualHeight,\n                Width = Application.Current.Host.Content.ActualWidth,\n                Stretch = Stretch.Fill\n            };\n\n            var imageResource = GetSplashScreenImageResource();\n            if (imageResource != null)\n            {\n                BitmapImage splash_image = new BitmapImage();\n                splash_image.SetSource(imageResource.Stream);\n                SplashScreen.Source = splash_image;\n            }\n\n            // Instansiate the popup and set the Child property of Popup to SplashScreen\n            popup = new Popup() { IsOpen = false,\n                                  Child = SplashScreen,\n                                  HorizontalAlignment = HorizontalAlignment.Stretch,\n                                  VerticalAlignment = VerticalAlignment.Center\n\n            };\n        }\n\n        public override void OnInit()\n        {\n            // we only want to autoload on the first page load.\n            // but OnInit is called for every page load.\n            if (!SplashScreen.WasShown)\n            {\n                SplashScreen.WasShown = true;\n                show();\n            }\n        }\n\n        private void LoadConfigPrefs()\n        {\n            StreamResourceInfo streamInfo = Application.GetResourceStream(new Uri(\"config.xml\", UriKind.Relative));\n            if (streamInfo != null)\n            {\n                using (StreamReader sr = new StreamReader(streamInfo.Stream))\n                {\n                    //This will Read Keys Collection for the xml file\n                    XDocument configFile = XDocument.Parse(sr.ReadToEnd());\n\n                    string configAutoHide = configFile.Descendants()\n                                        .Where(x => x.Name.LocalName == \"preference\")\n                                        .Where(x => (string)x.Attribute(\"name\") == \"AutoHideSplashScreen\")\n                                        .Select(x => (string)x.Attribute(\"value\"))\n                                        .FirstOrDefault();\n\n                    bool bVal;\n                    prefAutoHide = bool.TryParse(configAutoHide, out bVal) ? bVal : prefAutoHide;\n\n                    string configDelay = configFile.Descendants()\n                                      .Where(x => x.Name.LocalName == \"preference\")\n                                      .Where(x => (string)x.Attribute(\"name\") == \"SplashScreenDelay\")\n                                      .Select(x => (string)x.Attribute(\"value\"))\n                                      .FirstOrDefault();\n                    int nVal;\n                    prefDelay = int.TryParse(configDelay, out nVal) ? nVal : prefDelay;\n\n                    string configImage = configFile.Descendants()\n                                        .Where(x => x.Name.LocalName == \"preference\")\n                                        .Where(x => (string)x.Attribute(\"name\") == \"SplashScreen\")\n                                        .Select(x => (string)x.Attribute(\"value\"))\n                                        .FirstOrDefault();\n\n                    if (!String.IsNullOrEmpty(configImage))\n                    {\n                        prefImagePath = configImage;\n                    }\n                }\n            }\n        }\n\n        private StreamResourceInfo GetSplashScreenImageResource()\n        {\n            // Get the base filename for the splash screen images\n            string imageName = System.IO.Path.GetFileNameWithoutExtension(prefImagePath);\n            Uri imageUri = null;\n            StreamResourceInfo imageResource = null;\n\n            // First, try to get a resolution-specific splashscreen\n            try\n            {\n                // Determine the device's resolution\n                switch (ResolutionHelper.CurrentResolution)\n                {\n                    case Resolutions.HD:\n                        imageUri = new Uri(imageName + \".screen-720p.jpg\", UriKind.Relative);\n                        break;\n\n                    case Resolutions.WVGA:\n                        imageUri = new Uri(imageName + \".screen-WVGA.jpg\", UriKind.Relative);\n                        break;\n\n                    case Resolutions.WXGA:\n                    default:\n                        imageUri = new Uri(imageName + \".screen-WXGA.jpg\", UriKind.Relative);\n                        break;\n                }\n\n                imageResource = Application.GetResourceStream(imageUri);\n            }\n            catch (Exception)\n            {\n                // It's OK if we didn't get a resolution-specific image\n            }\n\n            // Fallback to the default image name without decoration\n            if (imageResource == null)\n            {\n                imageUri = new Uri(prefImagePath, UriKind.Relative);\n                imageResource = Application.GetResourceStream(imageUri);\n            }\n\n            if (imageUri != null) Debug.WriteLine(\"INFO :: SplashScreen: using image {0}\", imageUri.OriginalString);\n\n            return imageResource;\n        }\n\n        public void show(string options = null)\n        {\n            Deployment.Current.Dispatcher.BeginInvoke(() =>\n            {\n                if (!popup.IsOpen)\n                {\n                    popup.Child.Opacity = 0;\n\n                    Storyboard story = new Storyboard();\n                    DoubleAnimation animation = new DoubleAnimation()\n                                                    {\n                                                        From = 0.0,\n                                                        To = 1.0,\n                                                        Duration = new Duration(TimeSpan.FromSeconds(0.2))\n                                                    };\n\n                    Storyboard.SetTarget(animation, popup.Child);\n                    Storyboard.SetTargetProperty(animation, new PropertyPath(\"Opacity\"));\n                    story.Children.Add(animation);\n\n                    story.Begin();\n\n                    popup.IsOpen = true;\n\n                    if (prefAutoHide)\n                    {\n                        StartAutoHideTimer();\n                    }\n                }\n            });\n        }\n\n        public void hide(string options = null)\n        {\n            Deployment.Current.Dispatcher.BeginInvoke(() =>\n            {\n                if (popup.IsOpen)\n                {\n                    popup.Child.Opacity = 1.0;\n\n                    Storyboard story = new Storyboard();\n                    DoubleAnimation animation = new DoubleAnimation()\n                                                    {\n                                                        From = 1.0,\n                                                        To = 0.0,\n                                                        Duration = new Duration(TimeSpan.FromSeconds(0.4))\n                                                    };\n\n                    Storyboard.SetTarget(animation, popup.Child);\n                    Storyboard.SetTargetProperty(animation, new PropertyPath(\"Opacity\"));\n                    story.Children.Add(animation);\n                    story.Completed += (object sender, EventArgs e) =>\n                    {\n                        popup.IsOpen = false;\n                    };\n                    story.Begin();\n                }\n            });\n        }\n\n        private void StartAutoHideTimer()\n        {\n            var timer = new DispatcherTimer() { Interval = TimeSpan.FromMilliseconds(prefDelay) };\n            timer.Tick += (object sender, EventArgs e) =>\n            {\n                hide();\n                timer.Stop();\n            };\n            timer.Start();\n        }\n    }\n}\n","size_bytes":9732},"okul-app/plugins/cordova-plugin-splashscreen/www/windows/SplashScreenProxy.js":{"content":"﻿/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/*jslint sloppy:true */\n\nvar splash = require('cordova/splashscreen');\n\nvar SplashScreen = {\n    show: function () {\n        splash.show();\n    },\n    hide: function () {\n        splash.hide();\n    }\n};\n\nmodule.exports = SplashScreen;\n\nrequire(\"cordova/exec/proxy\").add(\"SplashScreen\", SplashScreen);\n","size_bytes":1118},"okul-app/plugins/cordova-plugin-whitelist/src/android/WhitelistPlugin.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova.whitelist;\n\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.ConfigXmlParser;\nimport org.apache.cordova.LOG;\nimport org.apache.cordova.Whitelist;\nimport org.xmlpull.v1.XmlPullParser;\n\nimport android.content.Context;\n\npublic class WhitelistPlugin extends CordovaPlugin {\n    private static final String LOG_TAG = \"WhitelistPlugin\";\n    private Whitelist allowedNavigations;\n    private Whitelist allowedIntents;\n    private Whitelist allowedRequests;\n\n    // Used when instantiated via reflection by PluginManager\n    public WhitelistPlugin() {\n    }\n    // These can be used by embedders to allow Java-configuration of whitelists.\n    public WhitelistPlugin(Context context) {\n        this(new Whitelist(), new Whitelist(), null);\n        new CustomConfigXmlParser().parse(context);\n    }\n    public WhitelistPlugin(XmlPullParser xmlParser) {\n        this(new Whitelist(), new Whitelist(), null);\n        new CustomConfigXmlParser().parse(xmlParser);\n    }\n    public WhitelistPlugin(Whitelist allowedNavigations, Whitelist allowedIntents, Whitelist allowedRequests) {\n        if (allowedRequests == null) {\n            allowedRequests = new Whitelist();\n            allowedRequests.addWhiteListEntry(\"file:///*\", false);\n            allowedRequests.addWhiteListEntry(\"data:*\", false);\n        }\n        this.allowedNavigations = allowedNavigations;\n        this.allowedIntents = allowedIntents;\n        this.allowedRequests = allowedRequests;\n    }\n    @Override\n    public void pluginInitialize() {\n        if (allowedNavigations == null) {\n            allowedNavigations = new Whitelist();\n            allowedIntents = new Whitelist();\n            allowedRequests = new Whitelist();\n            new CustomConfigXmlParser().parse(webView.getContext());\n        }\n    }\n\n    private class CustomConfigXmlParser extends ConfigXmlParser {\n        @Override\n        public void handleStartTag(XmlPullParser xml) {\n            String strNode = xml.getName();\n            if (strNode.equals(\"content\")) {\n                String startPage = xml.getAttributeValue(null, \"src\");\n                allowedNavigations.addWhiteListEntry(startPage, false);\n            } else if (strNode.equals(\"allow-navigation\")) {\n                String origin = xml.getAttributeValue(null, \"href\");\n                if (\"*\".equals(origin)) {\n                    allowedNavigations.addWhiteListEntry(\"http://*/*\", false);\n                    allowedNavigations.addWhiteListEntry(\"https://*/*\", false);\n                    allowedNavigations.addWhiteListEntry(\"data:*\", false);\n                } else {\n                    allowedNavigations.addWhiteListEntry(origin, false);\n                }\n            } else if (strNode.equals(\"allow-intent\")) {\n                String origin = xml.getAttributeValue(null, \"href\");\n                allowedIntents.addWhiteListEntry(origin, false);\n            } else if (strNode.equals(\"access\")) {\n                String origin = xml.getAttributeValue(null, \"origin\");\n                String subdomains = xml.getAttributeValue(null, \"subdomains\");\n                boolean external = (xml.getAttributeValue(null, \"launch-external\") != null);\n                if (origin != null) {\n                    if (external) {\n                        LOG.w(LOG_TAG, \"Found <access launch-external> within config.xml. Please use <allow-intent> instead.\");\n                        allowedIntents.addWhiteListEntry(origin, (subdomains != null) && (subdomains.compareToIgnoreCase(\"true\") == 0));\n                    } else {\n                        if (\"*\".equals(origin)) {\n                            allowedRequests.addWhiteListEntry(\"http://*/*\", false);\n                            allowedRequests.addWhiteListEntry(\"https://*/*\", false);\n                        } else {\n                            allowedRequests.addWhiteListEntry(origin, (subdomains != null) && (subdomains.compareToIgnoreCase(\"true\") == 0));\n                        }\n                    }\n                }\n            }\n        }\n        @Override\n        public void handleEndTag(XmlPullParser xml) {\n        }\n    }\n\n    @Override\n    public Boolean shouldAllowNavigation(String url) {\n        if (allowedNavigations.isUrlWhiteListed(url)) {\n            return true;\n        }\n        return null; // Default policy\n    }\n\n    @Override\n    public Boolean shouldAllowRequest(String url) {\n        if (Boolean.TRUE == shouldAllowNavigation(url)) {\n            return true;\n        }\n        if (allowedRequests.isUrlWhiteListed(url)) {\n            return true;\n        }\n        return null; // Default policy\n    }\n\n    @Override\n    public Boolean shouldOpenExternalUrl(String url) {\n        if (allowedIntents.isUrlWhiteListed(url)) {\n            return true;\n        }\n        return null; // Default policy\n    }\n\n    public Whitelist getAllowedNavigations() {\n        return allowedNavigations;\n    }\n\n    public void setAllowedNavigations(Whitelist allowedNavigations) {\n        this.allowedNavigations = allowedNavigations;\n    }\n\n    public Whitelist getAllowedIntents() {\n        return allowedIntents;\n    }\n\n    public void setAllowedIntents(Whitelist allowedIntents) {\n        this.allowedIntents = allowedIntents;\n    }\n\n    public Whitelist getAllowedRequests() {\n        return allowedRequests;\n    }\n\n    public void setAllowedRequests(Whitelist allowedRequests) {\n        this.allowedRequests = allowedRequests;\n    }\n}\n","size_bytes":6317},"okul-app/platforms/android/platform_www/plugins/cordova-plugin-network-information/www/Connection.js":{"content":"cordova.define(\"cordova-plugin-network-information.Connection\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * Network status\n */\nmodule.exports = {\n    UNKNOWN: 'unknown',\n    ETHERNET: 'ethernet',\n    WIFI: 'wifi',\n    CELL_2G: '2g',\n    CELL_3G: '3g',\n    CELL_4G: '4g',\n    CELL: 'cellular',\n    NONE: 'none'\n};\n\n});\n","size_bytes":1132},"okul-app/platforms/android/platform_www/plugins/cordova-plugin-network-information/www/network.js":{"content":"cordova.define(\"cordova-plugin-network-information.network\", function(require, exports, module) {\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\nvar cordova = require('cordova');\nvar channel = require('cordova/channel');\nvar utils = require('cordova/utils');\n\n// Link the onLine property with the Cordova-supplied network info.\n// This works because we clobber the navigator object with our own\n// object in bootstrap.js.\n// Browser platform do not need to define this property, because\n// it is already supported by modern browsers\nif (cordova.platformId !== 'browser' && typeof navigator !== 'undefined') {\n    utils.defineGetter(navigator, 'onLine', function () {\n        return this.connection.type !== 'none';\n    });\n}\n\nfunction NetworkConnection () {\n    this.type = 'unknown';\n}\n\n/**\n * Get connection info\n *\n * @param {Function} successCallback The function to call when the Connection data is available\n * @param {Function} errorCallback The function to call when there is an error getting the Connection data. (OPTIONAL)\n */\nNetworkConnection.prototype.getInfo = function (successCallback, errorCallback) {\n    exec(successCallback, errorCallback, 'NetworkStatus', 'getConnectionInfo', []);\n};\n\nvar me = new NetworkConnection();\nvar timerId = null;\nvar timeout = 500;\n\nchannel.createSticky('onCordovaConnectionReady');\nchannel.waitForInitialization('onCordovaConnectionReady');\n\nchannel.onCordovaReady.subscribe(function () {\n    me.getInfo(function (info) {\n        me.type = info;\n        if (info === 'none') {\n            // set a timer if still offline at the end of timer send the offline event\n            timerId = setTimeout(function () {\n                cordova.fireDocumentEvent('offline');\n                timerId = null;\n            }, timeout);\n        } else {\n            // If there is a current offline event pending clear it\n            if (timerId !== null) {\n                clearTimeout(timerId);\n                timerId = null;\n            }\n            cordova.fireDocumentEvent('online');\n        }\n\n        // should only fire this once\n        if (channel.onCordovaConnectionReady.state !== 2) {\n            channel.onCordovaConnectionReady.fire();\n        }\n    },\n    function (e) {\n        // If we can't get the network info we should still tell Cordova\n        // to fire the deviceready event.\n        if (channel.onCordovaConnectionReady.state !== 2) {\n            channel.onCordovaConnectionReady.fire();\n        }\n        console.log('Error initializing Network Connection: ' + e);\n    });\n});\n\nmodule.exports = me;\n\n});\n","size_bytes":3369},"okul-app/platforms/android/platform_www/plugins/cordova-plugin-splashscreen/www/splashscreen.js":{"content":"cordova.define(\"cordova-plugin-splashscreen.SplashScreen\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\n\nvar splashscreen = {\n    show:function() {\n        exec(null, null, \"SplashScreen\", \"show\", []);\n    },\n    hide:function() {\n        exec(null, null, \"SplashScreen\", \"hide\", []);\n    }\n};\n\nmodule.exports = splashscreen;\n\n});\n","size_bytes":1173},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/AllowList.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport java.net.MalformedURLException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.apache.cordova.LOG;\n\nimport android.net.Uri;\n\npublic class AllowList {\n    private static class URLPattern {\n        public Pattern scheme;\n        public Pattern host;\n        public Integer port;\n        public Pattern path;\n\n        private String regexFromPattern(String pattern, boolean allowWildcards) {\n            final String toReplace = \"\\\\.[]{}()^$?+|\";\n            StringBuilder regex = new StringBuilder();\n            for (int i=0; i < pattern.length(); i++) {\n                char c = pattern.charAt(i);\n                if (c == '*' && allowWildcards) {\n                    regex.append(\".\");\n                } else if (toReplace.indexOf(c) > -1) {\n                    regex.append('\\\\');\n                }\n                regex.append(c);\n            }\n            return regex.toString();\n        }\n\n        public URLPattern(String scheme, String host, String port, String path) throws MalformedURLException {\n            try {\n                if (scheme == null || \"*\".equals(scheme)) {\n                    this.scheme = null;\n                } else {\n                    this.scheme = Pattern.compile(regexFromPattern(scheme, false), Pattern.CASE_INSENSITIVE);\n                }\n                if (\"*\".equals(host)) {\n                    this.host = null;\n                } else if (host.startsWith(\"*.\")) {\n                    this.host = Pattern.compile(\"([a-z0-9.-]*\\\\.)?\" + regexFromPattern(host.substring(2), false), Pattern.CASE_INSENSITIVE);\n                } else {\n                    this.host = Pattern.compile(regexFromPattern(host, false), Pattern.CASE_INSENSITIVE);\n                }\n                if (port == null || \"*\".equals(port)) {\n                    this.port = null;\n                } else {\n                    this.port = Integer.parseInt(port,10);\n                }\n                if (path == null || \"/*\".equals(path)) {\n                    this.path = null;\n                } else {\n                    this.path = Pattern.compile(regexFromPattern(path, true));\n                }\n            } catch (NumberFormatException e) {\n                throw new MalformedURLException(\"Port must be a number\");\n            }\n        }\n\n        public boolean matches(Uri uri) {\n            try {\n                return ((scheme == null || scheme.matcher(uri.getScheme()).matches()) &&\n                        (host == null || host.matcher(uri.getHost()).matches()) &&\n                        (port == null || port.equals(uri.getPort())) &&\n                        (path == null || path.matcher(uri.getPath()).matches()));\n            } catch (Exception e) {\n                LOG.d(TAG, e.toString());\n                return false;\n            }\n        }\n    }\n\n    private ArrayList<URLPattern> allowList;\n\n    public static final String TAG = \"CordovaAllowList\";\n\n    public AllowList() {\n        this.allowList = new ArrayList<URLPattern>();\n    }\n\n    /* Match patterns (from http://developer.chrome.com/extensions/match_patterns.html)\n     *\n     * <url-pattern> := <scheme>://<host><path>\n     * <scheme> := '*' | 'http' | 'https' | 'file' | 'ftp' | 'chrome-extension'\n     * <host> := '*' | '*.' <any char except '/' and '*'>+\n     * <path> := '/' <any chars>\n     *\n     * We extend this to explicitly allow a port attached to the host, and we allow\n     * the scheme to be omitted for backwards compatibility. (Also host is not required\n     * to begin with a \"*\" or \"*.\".)\n     */\n    public void addAllowListEntry(String origin, boolean subdomains) {\n        if (allowList != null) {\n            try {\n                // Unlimited access to network resources\n                if (origin.compareTo(\"*\") == 0) {\n                    LOG.d(TAG, \"Unlimited access to network resources\");\n                    allowList = null;\n                }\n                else { // specific access\n                    Pattern parts = Pattern.compile(\"^((\\\\*|[A-Za-z-]+):(//)?)?(\\\\*|((\\\\*\\\\.)?[^*/:]+))?(:(\\\\d+))?(/.*)?\");\n                    Matcher m = parts.matcher(origin);\n                    if (m.matches()) {\n                        String scheme = m.group(2);\n                        String host = m.group(4);\n                        // Special case for two urls which are allowed to have empty hosts\n                        if ((\"file\".equals(scheme) || \"content\".equals(scheme)) && host == null) host = \"*\";\n                        String port = m.group(8);\n                        String path = m.group(9);\n                        if (scheme == null) {\n                            // XXX making it stupid friendly for people who forget to include protocol/SSL\n                            allowList.add(new URLPattern(\"http\", host, port, path));\n                            allowList.add(new URLPattern(\"https\", host, port, path));\n                        } else {\n                            allowList.add(new URLPattern(scheme, host, port, path));\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                LOG.d(TAG, \"Failed to add origin %s\", origin);\n            }\n        }\n    }\n\n\n    /**\n     * Determine if URL is in approved list of URLs to load.\n     *\n     * @param uri\n     * @return true if wide open or allow listed\n     */\n    public boolean isUrlAllowListed(String uri) {\n        // If there is no allowList, then it's wide open\n        if (allowList == null) return true;\n\n        Uri parsedUri = Uri.parse(uri);\n        // Look for match in allow list\n        Iterator<URLPattern> pit = allowList.iterator();\n        while (pit.hasNext()) {\n            URLPattern p = pit.next();\n            if (p.matches(parsedUri)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n","size_bytes":6785},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/AllowListPlugin.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.ConfigXmlParser;\nimport org.apache.cordova.LOG;\nimport org.apache.cordova.AllowList;\nimport org.apache.cordova.CordovaPreferences;\nimport org.xmlpull.v1.XmlPullParser;\n\nimport android.content.Context;\n\npublic class AllowListPlugin extends CordovaPlugin {\n    public static final String PLUGIN_NAME = \"CordovaAllowListPlugin\";\n    protected static final String LOG_TAG = \"CordovaAllowListPlugin\";\n\n    private AllowList allowedNavigations;\n    private AllowList allowedIntents;\n    private AllowList allowedRequests;\n\n    // Used when instantiated via reflection by PluginManager\n    public AllowListPlugin() { }\n\n    // These can be used by plugin developers to allow Java-configuration of an allow list.\n    public AllowListPlugin(Context context) {\n        this(new AllowList(), new AllowList(), null);\n        new CustomConfigXmlParser().parse(context);\n    }\n\n    public AllowListPlugin(XmlPullParser xmlParser) {\n        this(new AllowList(), new AllowList(), null);\n        new CustomConfigXmlParser().parse(xmlParser);\n    }\n\n    public AllowListPlugin(AllowList allowedNavigations, AllowList allowedIntents, AllowList allowedRequests) {\n        if (allowedRequests == null) {\n            allowedRequests = new AllowList();\n            allowedRequests.addAllowListEntry(\"file:///*\", false);\n            allowedRequests.addAllowListEntry(\"data:*\", false);\n        }\n\n        this.allowedNavigations = allowedNavigations;\n        this.allowedIntents = allowedIntents;\n        this.allowedRequests = allowedRequests;\n    }\n\n    @Override\n    public void pluginInitialize() {\n        if (this.allowedNavigations == null) {\n            this.allowedNavigations = new AllowList();\n            this.allowedIntents = new AllowList();\n            this.allowedRequests = new AllowList();\n\n            new CustomConfigXmlParser().parse(webView.getContext());\n        }\n    }\n\n    private class CustomConfigXmlParser extends ConfigXmlParser {\n        private CordovaPreferences prefs = new CordovaPreferences();\n\n        @Override\n        public void handleStartTag(XmlPullParser xml) {\n            String strNode = xml.getName();\n            if (strNode.equals(\"content\")) {\n                String startPage = xml.getAttributeValue(null, \"src\");\n                allowedNavigations.addAllowListEntry(startPage, false);\n            } else if (strNode.equals(\"allow-navigation\")) {\n                String origin = xml.getAttributeValue(null, \"href\");\n                if (\"*\".equals(origin)) {\n                    allowedNavigations.addAllowListEntry(\"http://*/*\", false);\n                    allowedNavigations.addAllowListEntry(\"https://*/*\", false);\n                    allowedNavigations.addAllowListEntry(\"data:*\", false);\n                } else {\n                    allowedNavigations.addAllowListEntry(origin, false);\n                }\n            } else if (strNode.equals(\"allow-intent\")) {\n                String origin = xml.getAttributeValue(null, \"href\");\n                allowedIntents.addAllowListEntry(origin, false);\n            } else if (strNode.equals(\"access\")) {\n                String origin = xml.getAttributeValue(null, \"origin\");\n\n                if (origin != null) {\n                    if (\"*\".equals(origin)) {\n                        allowedRequests.addAllowListEntry(\"http://*/*\", false);\n                        allowedRequests.addAllowListEntry(\"https://*/*\", false);\n                    } else {\n                        String subdomains = xml.getAttributeValue(null, \"subdomains\");\n                        allowedRequests.addAllowListEntry(origin, (subdomains != null) && (subdomains.compareToIgnoreCase(\"true\") == 0));\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void handleEndTag(XmlPullParser xml) { }\n    }\n\n    @Override\n    public Boolean shouldAllowNavigation(String url) {\n        return this.allowedNavigations.isUrlAllowListed(url)\n            ? true\n            : null; // default policy\n    }\n\n    @Override\n    public Boolean shouldAllowRequest(String url) {\n        return (Boolean.TRUE.equals(this.shouldAllowNavigation(url)) || this.allowedRequests.isUrlAllowListed(url))\n            ? true\n            : null; // default policy\n    }\n\n    @Override\n    public Boolean shouldOpenExternalUrl(String url) {\n        return (this.allowedIntents.isUrlAllowListed(url))\n            ? true\n            : null; // default policy\n    }\n\n    public AllowList getAllowedNavigations() {\n        return this.allowedNavigations;\n    }\n\n    public void setAllowedNavigations(AllowList allowedNavigations) {\n        this.allowedNavigations = allowedNavigations;\n    }\n\n    public AllowList getAllowedIntents() {\n        return this.allowedIntents;\n    }\n\n    public void setAllowedIntents(AllowList allowedIntents) {\n        this.allowedIntents = allowedIntents;\n    }\n\n    public AllowList getAllowedRequests() {\n        return this.allowedRequests;\n    }\n\n    public void setAllowedRequests(AllowList allowedRequests) {\n        this.allowedRequests = allowedRequests;\n    }\n}\n","size_bytes":6016},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/AuthenticationToken.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\n/**\n * The Class AuthenticationToken defines the userName and password to be used for authenticating a web resource\n */\npublic class AuthenticationToken {\n    private String userName;\n    private String password;\n\n    /**\n     * Gets the user name.\n     *\n     * @return the user name\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * Sets the user name.\n     *\n     * @param userName the new user name\n     */\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    /**\n     * Gets the password.\n     *\n     * @return the password\n     */\n    public String getPassword() {\n        return password;\n    }\n\n    /**\n     * Sets the password.\n     *\n     * @param password the new password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n\n\n\n}\n","size_bytes":1751},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/BuildHelper.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\n/*\n * This is a utility class that allows us to get the BuildConfig variable, which is required\n * for the use of different providers.  This is not guaranteed to work, and it's better for this\n * to be set in the build step in config.xml\n *\n */\n\nimport android.app.Activity;\nimport android.content.Context;\n\nimport java.lang.reflect.Field;\n\n\npublic class BuildHelper {\n\n\n    private static String TAG=\"BuildHelper\";\n\n    /*\n     * This needs to be implemented if you wish to use the Camera Plugin or other plugins\n     * that read the Build Configuration.\n     *\n     * Thanks to Phil@Medtronic and Graham Borland for finding the answer and posting it to\n     * StackOverflow.  This is annoying as hell!  However, this method does not work with\n     * ProGuard, and you should use the config.xml to define the application_id\n     *\n     */\n\n    public static Object getBuildConfigValue(Context ctx, String key)\n    {\n        try\n        {\n            String packageName = ctx.getApplicationInfo().packageName;\n            Class<?> clazz = Class.forName(packageName + \".BuildConfig\");\n            Field field = clazz.getField(key);\n            return field.get(null);\n        } catch (ClassNotFoundException e) {\n            LOG.d(TAG, \"Unable to get the BuildConfig, is this built with ANT?\");\n            e.printStackTrace();\n        } catch (NoSuchFieldException e) {\n            LOG.d(TAG, key + \" is not a valid field. Check your build.gradle\");\n        } catch (IllegalAccessException e) {\n            LOG.d(TAG, \"Illegal Access Exception: Let's print a stack trace.\");\n            e.printStackTrace();\n        } catch (NullPointerException e) {\n            LOG.d(TAG, \"Null Pointer Exception: Let's print a stack trace.\");\n            e.printStackTrace();\n        }\n\n        return null;\n    }\n\n}","size_bytes":2691},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CallbackContext.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport org.json.JSONArray;\n\nimport org.apache.cordova.CordovaWebView;\nimport org.apache.cordova.PluginResult;\nimport org.json.JSONObject;\n\npublic class CallbackContext {\n    private static final String LOG_TAG = \"CordovaPlugin\";\n\n    private String callbackId;\n    private CordovaWebView webView;\n    protected boolean finished;\n    private int changingThreads;\n\n    public CallbackContext(String callbackId, CordovaWebView webView) {\n        this.callbackId = callbackId;\n        this.webView = webView;\n    }\n\n    public boolean isFinished() {\n        return finished;\n    }\n\n    public boolean isChangingThreads() {\n        return changingThreads > 0;\n    }\n\n    public String getCallbackId() {\n        return callbackId;\n    }\n\n    public void sendPluginResult(PluginResult pluginResult) {\n        synchronized (this) {\n            if (finished) {\n                LOG.w(LOG_TAG, \"Attempted to send a second callback for ID: \" + callbackId + \"\\nResult was: \" + pluginResult.getMessage());\n                return;\n            } else {\n                finished = !pluginResult.getKeepCallback();\n            }\n        }\n        webView.sendPluginResult(pluginResult, callbackId);\n    }\n\n    /**\n     * Helper for success callbacks that just returns the Status.OK by default\n     *\n     * @param message           The message to add to the success result.\n     */\n    public void success(JSONObject message) {\n        sendPluginResult(new PluginResult(PluginResult.Status.OK, message));\n    }\n\n    /**\n     * Helper for success callbacks that just returns the Status.OK by default\n     *\n     * @param message           The message to add to the success result.\n     */\n    public void success(String message) {\n        sendPluginResult(new PluginResult(PluginResult.Status.OK, message));\n    }\n\n    /**\n     * Helper for success callbacks that just returns the Status.OK by default\n     *\n     * @param message           The message to add to the success result.\n     */\n    public void success(JSONArray message) {\n        sendPluginResult(new PluginResult(PluginResult.Status.OK, message));\n    }\n\n    /**\n     * Helper for success callbacks that just returns the Status.OK by default\n     *\n     * @param message           The message to add to the success result.\n     */\n    public void success(byte[] message) {\n        sendPluginResult(new PluginResult(PluginResult.Status.OK, message));\n    }\n\n    /**\n     * Helper for success callbacks that just returns the Status.OK by default\n     *\n     * @param message           The message to add to the success result.\n     */\n    public void success(int message) {\n        sendPluginResult(new PluginResult(PluginResult.Status.OK, message));\n    }\n\n    /**\n     * Helper for success callbacks that just returns the Status.OK by default\n     */\n    public void success() {\n        sendPluginResult(new PluginResult(PluginResult.Status.OK));\n    }\n\n    /**\n     * Helper for error callbacks that just returns the Status.ERROR by default\n     *\n     * @param message           The message to add to the error result.\n     */\n    public void error(JSONObject message) {\n        sendPluginResult(new PluginResult(PluginResult.Status.ERROR, message));\n    }\n\n    /**\n     * Helper for error callbacks that just returns the Status.ERROR by default\n     *\n     * @param message           The message to add to the error result.\n     */\n    public void error(String message) {\n        sendPluginResult(new PluginResult(PluginResult.Status.ERROR, message));\n    }\n\n    /**\n     * Helper for error callbacks that just returns the Status.ERROR by default\n     *\n     * @param message           The message to add to the error result.\n     */\n    public void error(int message) {\n        sendPluginResult(new PluginResult(PluginResult.Status.ERROR, message));\n    }\n}\n","size_bytes":4696},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CallbackMap.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport android.util.Pair;\nimport android.util.SparseArray;\n\n/**\n * Provides a collection that maps unique request codes to CordovaPlugins and Integers.\n * Used to ensure that when plugins make requests for runtime permissions, those requests do not\n * collide with requests from other plugins that use the same request code value.\n */\npublic class CallbackMap {\n    private int currentCallbackId = 0;\n    private SparseArray<Pair<CordovaPlugin, Integer>> callbacks;\n\n    public CallbackMap() {\n        this.callbacks = new SparseArray<Pair<CordovaPlugin, Integer>>();\n    }\n\n    /**\n     * Stores a CordovaPlugin and request code and returns a new unique request code to use\n     * in a permission request.\n     *\n     * @param receiver      The plugin that is making the request\n     * @param requestCode   The original request code used by the plugin\n     * @return              A unique request code that can be used to retrieve this callback\n     *                      with getAndRemoveCallback()\n     */\n    public synchronized int registerCallback(CordovaPlugin receiver, int requestCode) {\n        int mappedId = this.currentCallbackId++;\n        callbacks.put(mappedId, new Pair<CordovaPlugin, Integer>(receiver, requestCode));\n        return mappedId;\n    }\n\n    /**\n     * Retrieves and removes a callback stored in the map using the mapped request code\n     * obtained from registerCallback()\n     *\n     * @param mappedId      The request code obtained from registerCallback()\n     * @return              The CordovaPlugin and original request code that correspond to the\n     *                      given mappedCode\n     */\n    public synchronized Pair<CordovaPlugin, Integer> getAndRemoveCallback(int mappedId) {\n        Pair<CordovaPlugin, Integer> callback = callbacks.get(mappedId);\n        callbacks.remove(mappedId);\n        return callback;\n    }\n}\n","size_bytes":2758},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/Config.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport java.util.List;\n\nimport android.app.Activity;\n\n@Deprecated // Use AllowList, CordovaPreferences, etc. directly.\npublic class Config {\n    private static final String TAG = \"Config\";\n\n    static ConfigXmlParser parser;\n\n    private Config() {\n    }\n\n    public static void init(Activity action) {\n        parser = new ConfigXmlParser();\n        parser.parse(action);\n        //TODO: Add feature to bring this back.  Some preferences should be overridden by intents, but not all\n        parser.getPreferences().setPreferencesBundle(action.getIntent().getExtras());\n    }\n\n    // Intended to be used for testing only; creates an empty configuration.\n    public static void init() {\n        if (parser == null) {\n            parser = new ConfigXmlParser();\n        }\n    }\n\n    public static String getStartUrl() {\n        if (parser == null) {\n            return \"file:///android_asset/www/index.html\";\n        }\n        return parser.getLaunchUrl();\n    }\n\n    public static String getErrorUrl() {\n        return parser.getPreferences().getString(\"errorurl\", null);\n    }\n\n    public static List<PluginEntry> getPluginEntries() {\n        return parser.getPluginEntries();\n    }\n\n    public static CordovaPreferences getPreferences() {\n        return parser.getPreferences();\n    }\n\n    public static boolean isInitialized() {\n        return parser != null;\n    }\n}\n","size_bytes":2259},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/ConfigXmlParser.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.xmlpull.v1.XmlPullParser;\nimport org.xmlpull.v1.XmlPullParserException;\nimport android.content.Context;\n\npublic class ConfigXmlParser {\n    private static String TAG = \"ConfigXmlParser\";\n\n    private static String SCHEME_HTTP = \"http\";\n    private static String SCHEME_HTTPS = \"https\";\n    private static String DEFAULT_HOSTNAME = \"localhost\";\n    private static final String DEFAULT_CONTENT_SRC = \"index.html\";\n\n    private String launchUrl;\n    private String contentSrc;\n    private CordovaPreferences prefs = new CordovaPreferences();\n    private ArrayList<PluginEntry> pluginEntries = new ArrayList<PluginEntry>(20);\n\n    public CordovaPreferences getPreferences() {\n        return prefs;\n    }\n\n    public ArrayList<PluginEntry> getPluginEntries() {\n        return pluginEntries;\n    }\n\n    public String getLaunchUrl() {\n        if (launchUrl == null) {\n            setStartUrl(contentSrc);\n        }\n\n        return launchUrl;\n    }\n\n    public void parse(Context action) {\n        // First checking the class namespace for config.xml\n        int id = action.getResources().getIdentifier(\"config\", \"xml\", action.getClass().getPackage().getName());\n        if (id == 0) {\n            // If we couldn't find config.xml there, we'll look in the namespace from AndroidManifest.xml\n            id = action.getResources().getIdentifier(\"config\", \"xml\", action.getPackageName());\n            if (id == 0) {\n                LOG.e(TAG, \"res/xml/config.xml is missing!\");\n                return;\n            }\n        }\n\n        pluginEntries.add(\n            new PluginEntry(\n                AllowListPlugin.PLUGIN_NAME,\n                \"org.apache.cordova.AllowListPlugin\",\n                true\n            )\n        );\n\n        pluginEntries.add(\n            new PluginEntry(\n                SplashScreenPlugin.PLUGIN_NAME,\n                \"org.apache.cordova.SplashScreenPlugin\",\n                true\n            )\n        );\n\n        parse(action.getResources().getXml(id));\n    }\n\n    boolean insideFeature = false;\n    String service = \"\", pluginClass = \"\", paramType = \"\";\n    boolean onload = false;\n\n    public void parse(XmlPullParser xml) {\n        int eventType = -1;\n\n        while (eventType != XmlPullParser.END_DOCUMENT) {\n            if (eventType == XmlPullParser.START_TAG) {\n                handleStartTag(xml);\n            }\n            else if (eventType == XmlPullParser.END_TAG)\n            {\n                handleEndTag(xml);\n            }\n            try {\n                eventType = xml.next();\n            } catch (XmlPullParserException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        onPostParse();\n    }\n\n    private void onPostParse() {\n        // After parsing, if contentSrc is still null, it signals\n        // that <content> tag was completely missing. In this case,\n        // default it.\n        // https://github.com/apache/cordova-android/issues/1432\n        if (contentSrc == null) {\n            contentSrc = DEFAULT_CONTENT_SRC;\n        }\n    }\n\n    public void handleStartTag(XmlPullParser xml) {\n        String strNode = xml.getName();\n        if (strNode.equals(\"feature\")) {\n            //Check for supported feature sets  aka. plugins (Accelerometer, Geolocation, etc)\n            //Set the bit for reading params\n            insideFeature = true;\n            service = xml.getAttributeValue(null, \"name\");\n        }\n        else if (insideFeature && strNode.equals(\"param\")) {\n            paramType = xml.getAttributeValue(null, \"name\");\n            if (paramType.equals(\"service\")) // check if it is using the older service param\n                service = xml.getAttributeValue(null, \"value\");\n            else if (paramType.equals(\"package\") || paramType.equals(\"android-package\"))\n                pluginClass = xml.getAttributeValue(null,\"value\");\n            else if (paramType.equals(\"onload\"))\n                onload = \"true\".equals(xml.getAttributeValue(null, \"value\"));\n        }\n        else if (strNode.equals(\"preference\")) {\n            String name = xml.getAttributeValue(null, \"name\").toLowerCase(Locale.ENGLISH);\n            String value = xml.getAttributeValue(null, \"value\");\n            prefs.set(name, value);\n        }\n        else if (strNode.equals(\"content\")) {\n            String src = xml.getAttributeValue(null, \"src\");\n            if (src != null) {\n                contentSrc = src;\n            } else {\n                // Default\n                contentSrc = DEFAULT_CONTENT_SRC;\n            }\n        }\n    }\n\n    public void handleEndTag(XmlPullParser xml) {\n        String strNode = xml.getName();\n        if (strNode.equals(\"feature\")) {\n            pluginEntries.add(new PluginEntry(service, pluginClass, onload));\n\n            service = \"\";\n            pluginClass = \"\";\n            insideFeature = false;\n            onload = false;\n        }\n    }\n\n    private String getLaunchUrlPrefix() {\n        if (prefs.getBoolean(\"AndroidInsecureFileModeEnabled\", false)) {\n            return \"file:///android_asset/www/\";\n        } else {\n            String scheme = prefs.getString(\"scheme\", SCHEME_HTTPS).toLowerCase();\n            String hostname = prefs.getString(\"hostname\", DEFAULT_HOSTNAME).toLowerCase();\n\n            if (!scheme.contentEquals(SCHEME_HTTP) && !scheme.contentEquals(SCHEME_HTTPS)) {\n                LOG.d(TAG, \"The provided scheme \\\"\" + scheme + \"\\\" is not valid. \" +\n                    \"Defaulting to \\\"\" + SCHEME_HTTPS + \"\\\". \" +\n                    \"(Valid Options=\" + SCHEME_HTTP + \",\" + SCHEME_HTTPS + \")\");\n\n                scheme = SCHEME_HTTPS;\n            }\n\n            return scheme + \"://\" + hostname + '/';\n        }\n    }\n\n    private void setStartUrl(String src) {\n        Pattern schemeRegex = Pattern.compile(\"^[a-z-]+://\");\n        Matcher matcher = schemeRegex.matcher(src);\n\n        if (matcher.find()) {\n            launchUrl = src;\n        } else {\n            String launchUrlPrefix = getLaunchUrlPrefix();\n\n            // remove leading slash, \"/\", from content src if existing,\n            if (src.charAt(0) == '/') {\n                src = src.substring(1);\n            }\n\n            launchUrl = launchUrlPrefix + src;\n        }\n    }\n}\n","size_bytes":7312},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaActivity.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport java.util.ArrayList;\nimport java.util.Locale;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.app.AlertDialog;\nimport android.annotation.SuppressLint;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.res.Configuration;\nimport android.graphics.Color;\nimport android.media.AudioManager;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.webkit.WebViewClient;\nimport android.widget.FrameLayout;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.splashscreen.SplashScreen;\n\n/**\n * This class is the main Android activity that represents the Cordova\n * application. It should be extended by the user to load the specific\n * html file that contains the application.\n *\n * <p>As an example:</p>\n *\n * <pre>\n *     package org.apache.cordova.examples;\n *\n *     import android.os.Bundle;\n *     import org.apache.cordova.*;\n *\n *     public class Example extends CordovaActivity {\n *       &#64;Override\n *       public void onCreate(Bundle savedInstanceState) {\n *         super.onCreate(savedInstanceState);\n *         super.init();\n *         // Load your application\n *         loadUrl(launchUrl);\n *       }\n *     }\n * </pre>\n *\n * <p>Cordova xml configuration: Cordova uses a configuration file at\n * res/xml/config.xml to specify its settings. See the \"Config.xml API\" documentation for\n * configuration details at <a href=\"https://cordova.apache.org/docs\">Apache Cordova Docs</a>.</p>\n *\n * <p>The use of the set*Property() methods is deprecated in favor of the config.xml file.</p>\n */\npublic class CordovaActivity extends AppCompatActivity {\n    public static String TAG = \"CordovaActivity\";\n\n    // The WebView for our app\n    protected CordovaWebView appView;\n\n    private static int ACTIVITY_STARTING = 0;\n    private static int ACTIVITY_RUNNING = 1;\n    private static int ACTIVITY_EXITING = 2;\n\n    // Keep app running when pause is received. (default = true)\n    // If true, then the JavaScript and native code continue to run in the background\n    // when another application (activity) is started.\n    protected boolean keepRunning = true;\n\n    // Flag to keep immersive mode if set to fullscreen\n    protected boolean immersiveMode;\n\n    // Read from config.xml:\n    protected CordovaPreferences preferences;\n    protected String launchUrl;\n    protected ArrayList<PluginEntry> pluginEntries;\n    protected CordovaInterfaceImpl cordovaInterface;\n\n    private SplashScreen splashScreen;\n\n    /**\n     * Called when the activity is first created.\n     */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        // Handle the splash screen transition.\n        splashScreen = SplashScreen.installSplashScreen(this);\n\n        // need to activate preferences before super.onCreate to avoid \"requestFeature() must be called before adding content\" exception\n        loadConfig();\n\n        String logLevel = preferences.getString(\"loglevel\", \"ERROR\");\n        LOG.setLogLevel(logLevel);\n\n        LOG.i(TAG, \"Apache Cordova native platform version \" + CordovaWebView.CORDOVA_VERSION + \" is starting\");\n        LOG.d(TAG, \"CordovaActivity.onCreate()\");\n\n        if (!preferences.getBoolean(\"ShowTitle\", false)) {\n            getWindow().requestFeature(Window.FEATURE_NO_TITLE);\n        }\n\n        if (preferences.getBoolean(\"SetFullscreen\", false)) {\n            LOG.d(TAG, \"The SetFullscreen configuration is deprecated in favor of Fullscreen, and will be removed in a future version.\");\n            preferences.set(\"Fullscreen\", true);\n        }\n        if (preferences.getBoolean(\"Fullscreen\", false)) {\n            // NOTE: use the FullscreenNotImmersive configuration key to set the activity in a REAL full screen\n            // (as was the case in previous cordova versions)\n            if (!preferences.getBoolean(\"FullscreenNotImmersive\", false)) {\n                immersiveMode = true;\n                setImmersiveUiVisibility();\n            } else {\n                getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n                        WindowManager.LayoutParams.FLAG_FULLSCREEN);\n            }\n        } else {\n            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN,\n                    WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n        }\n\n        super.onCreate(savedInstanceState);\n\n        cordovaInterface = makeCordovaInterface();\n        if (savedInstanceState != null) {\n            cordovaInterface.restoreInstanceState(savedInstanceState);\n        }\n    }\n\n    protected void init() {\n        appView = makeWebView();\n        createViews();\n        if (!appView.isInitialized()) {\n            appView.init(cordovaInterface, pluginEntries, preferences);\n        }\n        cordovaInterface.onCordovaInit(appView.getPluginManager());\n\n        // Setup the splash screen based on preference settings\n        cordovaInterface.pluginManager.postMessage(\"setupSplashScreen\", splashScreen);\n\n        // Wire the hardware volume controls to control media if desired.\n        String volumePref = preferences.getString(\"DefaultVolumeStream\", \"\");\n        if (\"media\".equals(volumePref.toLowerCase(Locale.ENGLISH))) {\n            setVolumeControlStream(AudioManager.STREAM_MUSIC);\n        }\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    protected void loadConfig() {\n        ConfigXmlParser parser = new ConfigXmlParser();\n        parser.parse(this);\n        preferences = parser.getPreferences();\n        preferences.setPreferencesBundle(getIntent().getExtras());\n        launchUrl = parser.getLaunchUrl();\n        pluginEntries = parser.getPluginEntries();\n        Config.parser = parser;\n    }\n\n    //Suppressing warnings in AndroidStudio\n    @SuppressWarnings({\"deprecation\", \"ResourceType\"})\n    protected void createViews() {\n        //Why are we setting a constant as the ID? This should be investigated\n        appView.getView().setId(100);\n        appView.getView().setLayoutParams(new FrameLayout.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.MATCH_PARENT));\n\n        setContentView(appView.getView());\n\n        if (preferences.contains(\"BackgroundColor\")) {\n            try {\n                int backgroundColor = preferences.getInteger(\"BackgroundColor\", Color.BLACK);\n                // Background of activity:\n                appView.getView().setBackgroundColor(backgroundColor);\n            }\n            catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n\n        appView.getView().requestFocusFromTouch();\n    }\n\n    /**\n     * Construct the default web view object.\n     * <p/>\n     * Override this to customize the WebView that is used.\n     */\n    protected CordovaWebView makeWebView() {\n        return new CordovaWebViewImpl(makeWebViewEngine());\n    }\n\n    protected CordovaWebViewEngine makeWebViewEngine() {\n        return CordovaWebViewImpl.createEngine(this, preferences);\n    }\n\n    protected CordovaInterfaceImpl makeCordovaInterface() {\n        return new CordovaInterfaceImpl(this) {\n            @Override\n            public Object onMessage(String id, Object data) {\n                // Plumb this to CordovaActivity.onMessage for backwards compatibility\n                return CordovaActivity.this.onMessage(id, data);\n            }\n        };\n    }\n\n    /**\n     * Load the url into the WebView.\n     */\n    public void loadUrl(String url) {\n        if (appView == null) {\n            init();\n        }\n\n        // If keepRunning\n        this.keepRunning = preferences.getBoolean(\"KeepRunning\", true);\n\n        appView.loadUrlIntoView(url, true);\n    }\n\n    /**\n     * Called when the system is about to start resuming a previous activity.\n     */\n    @Override\n    protected void onPause() {\n        super.onPause();\n        LOG.d(TAG, \"Paused the activity.\");\n\n        if (this.appView != null) {\n            // CB-9382 If there is an activity that started for result and main activity is waiting for callback\n            // result, we shouldn't stop WebView Javascript timers, as activity for result might be using them\n            boolean keepRunning = this.keepRunning || this.cordovaInterface.activityResultCallback != null;\n            this.appView.handlePause(keepRunning);\n        }\n    }\n\n    /**\n     * Called when the activity receives a new intent\n     */\n    @Override\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        //Forward to plugins\n        if (this.appView != null)\n            this.appView.onNewIntent(intent);\n    }\n\n    /**\n     * Called when the activity will start interacting with the user.\n     */\n    @Override\n    protected void onResume() {\n        super.onResume();\n        LOG.d(TAG, \"Resumed the activity.\");\n\n        if (this.appView == null) {\n            return;\n        }\n        if (! this.getWindow().getDecorView().hasFocus()) {\n            // Force window to have focus, so application always\n            // receive user input. Workaround for some devices (Samsung Galaxy Note 3 at least)\n            this.getWindow().getDecorView().requestFocus();\n        }\n\n        this.appView.handleResume(this.keepRunning);\n    }\n\n    /**\n     * Called when the activity is no longer visible to the user.\n     */\n    @Override\n    protected void onStop() {\n        super.onStop();\n        LOG.d(TAG, \"Stopped the activity.\");\n\n        if (this.appView == null) {\n            return;\n        }\n        this.appView.handleStop();\n    }\n\n    /**\n     * Called when the activity is becoming visible to the user.\n     */\n    @Override\n    protected void onStart() {\n        super.onStart();\n        LOG.d(TAG, \"Started the activity.\");\n\n        if (this.appView == null) {\n            return;\n        }\n        this.appView.handleStart();\n    }\n\n    /**\n     * The final call you receive before your activity is destroyed.\n     */\n    @Override\n    public void onDestroy() {\n        LOG.d(TAG, \"CordovaActivity.onDestroy()\");\n        super.onDestroy();\n\n        if (this.appView != null) {\n            appView.handleDestroy();\n        }\n    }\n\n    /**\n     * Called when view focus is changed\n     */\n    @Override\n    public void onWindowFocusChanged(boolean hasFocus) {\n        super.onWindowFocusChanged(hasFocus);\n        if (hasFocus && immersiveMode) {\n            setImmersiveUiVisibility();\n        }\n    }\n\n    @SuppressLint(\"InlinedApi\")\n    protected void setImmersiveUiVisibility() {\n        final int uiOptions = View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n                | View.SYSTEM_UI_FLAG_FULLSCREEN\n                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n\n        getWindow().getDecorView().setSystemUiVisibility(uiOptions);\n    }\n\n    @SuppressLint(\"NewApi\")\n    @Override\n    public void startActivityForResult(Intent intent, int requestCode, Bundle options) {\n        // Capture requestCode here so that it is captured in the setActivityResultCallback() case.\n        cordovaInterface.setActivityResultRequestCode(requestCode);\n        super.startActivityForResult(intent, requestCode, options);\n    }\n\n    /**\n     * Called when an activity you launched exits, giving you the requestCode you started it with,\n     * the resultCode it returned, and any additional data from it.\n     *\n     * @param requestCode The request code originally supplied to startActivityForResult(),\n     *                    allowing you to identify who this result came from.\n     * @param resultCode  The integer result code returned by the child activity through its setResult().\n     * @param intent      An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\").\n     */\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n        LOG.d(TAG, \"Incoming Result. Request code = \" + requestCode);\n        super.onActivityResult(requestCode, resultCode, intent);\n        cordovaInterface.onActivityResult(requestCode, resultCode, intent);\n    }\n\n    /**\n     * Report an error to the host application. These errors are unrecoverable (i.e. the main resource is unavailable).\n     * The errorCode parameter corresponds to one of the ERROR_* constants.\n     *\n     * @param errorCode   The error code corresponding to an ERROR_* value.\n     * @param description A String describing the error.\n     * @param failingUrl  The url that failed to load.\n     */\n    public void onReceivedError(final int errorCode, final String description, final String failingUrl) {\n        final CordovaActivity me = this;\n\n        // If errorUrl specified, then load it\n        final String errorUrl = preferences.getString(\"errorUrl\", null);\n        if ((errorUrl != null) && (!failingUrl.equals(errorUrl)) && (appView != null)) {\n            // Load URL on UI thread\n            me.runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    me.appView.showWebPage(errorUrl, false, true, null);\n                }\n            });\n        }\n        // If not, then display error dialog\n        else {\n            final boolean exit = !(errorCode == WebViewClient.ERROR_HOST_LOOKUP);\n            me.runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    if (exit) {\n                        me.appView.getView().setVisibility(View.GONE);\n                        me.displayError(\"Application Error\", description + \" (\" + failingUrl + \")\", \"OK\", exit);\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Display an error dialog and optionally exit application.\n     */\n    public void displayError(final String title, final String message, final String button, final boolean exit) {\n        final CordovaActivity me = this;\n        me.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    AlertDialog.Builder dlg = new AlertDialog.Builder(me);\n                    dlg.setMessage(message);\n                    dlg.setTitle(title);\n                    dlg.setCancelable(false);\n                    dlg.setPositiveButton(button,\n                            new AlertDialog.OnClickListener() {\n                                @Override\n                                public void onClick(DialogInterface dialog, int which) {\n                                    dialog.dismiss();\n                                    if (exit) {\n                                        finish();\n                                    }\n                                }\n                            });\n                    dlg.create();\n                    dlg.show();\n                } catch (Exception e) {\n                    finish();\n                }\n            }\n        });\n    }\n\n    /*\n     * Hook in Cordova for menu plugins\n     */\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        if (appView != null) {\n            appView.getPluginManager().postMessage(\"onCreateOptionsMenu\", menu);\n        }\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        if (appView != null) {\n            appView.getPluginManager().postMessage(\"onPrepareOptionsMenu\", menu);\n        }\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (appView != null) {\n            appView.getPluginManager().postMessage(\"onOptionsItemSelected\", item);\n        }\n        return true;\n    }\n\n    /**\n     * Called when a message is sent to plugin.\n     *\n     * @param id   The message id\n     * @param data The message data\n     * @return Object or null\n     */\n    public Object onMessage(String id, Object data) {\n        if (\"onReceivedError\".equals(id)) {\n            JSONObject d = (JSONObject) data;\n            try {\n                this.onReceivedError(d.getInt(\"errorCode\"), d.getString(\"description\"), d.getString(\"url\"));\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (\"exit\".equals(id)) {\n            finish();\n        }\n        return null;\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState) {\n        cordovaInterface.onSaveInstanceState(outState);\n        super.onSaveInstanceState(outState);\n    }\n\n    /**\n     * Called by the system when the device configuration changes while your activity is running.\n     *\n     * @param newConfig The new device configuration\n     */\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        if (this.appView == null) {\n            return;\n        }\n        PluginManager pm = this.appView.getPluginManager();\n        if (pm != null) {\n            pm.onConfigurationChanged(newConfig);\n        }\n    }\n\n    /**\n     * Called by the system when the user grants permissions\n     *\n     * @param requestCode\n     * @param permissions\n     * @param grantResults\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String permissions[],\n                                           int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        try\n        {\n            cordovaInterface.onRequestPermissionResult(requestCode, permissions, grantResults);\n        }\n        catch (JSONException e)\n        {\n            LOG.d(TAG, \"JSONException: Parameters fed into the method are not valid\");\n            e.printStackTrace();\n        }\n\n    }\n}\n","size_bytes":18861},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaArgs.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.util.Base64;\n\npublic class CordovaArgs {\n    private JSONArray baseArgs;\n\n    public CordovaArgs(JSONArray args) {\n        this.baseArgs = args;\n    }\n\n\n    // Pass through the basics to the base args.\n    public Object get(int index) throws JSONException {\n        return baseArgs.get(index);\n    }\n\n    public boolean getBoolean(int index) throws JSONException {\n        return baseArgs.getBoolean(index);\n    }\n\n    public double getDouble(int index) throws JSONException {\n        return baseArgs.getDouble(index);\n    }\n\n    public int getInt(int index) throws JSONException {\n        return baseArgs.getInt(index);\n    }\n\n    public JSONArray getJSONArray(int index) throws JSONException {\n        return baseArgs.getJSONArray(index);\n    }\n\n    public JSONObject getJSONObject(int index) throws JSONException {\n        return baseArgs.getJSONObject(index);\n    }\n\n    public long getLong(int index) throws JSONException {\n        return baseArgs.getLong(index);\n    }\n\n    public String getString(int index) throws JSONException {\n        return baseArgs.getString(index);\n    }\n\n\n    public Object opt(int index) {\n        return baseArgs.opt(index);\n    }\n\n    public boolean optBoolean(int index) {\n        return baseArgs.optBoolean(index);\n    }\n\n    public double optDouble(int index) {\n        return baseArgs.optDouble(index);\n    }\n\n    public int optInt(int index) {\n        return baseArgs.optInt(index);\n    }\n\n    public JSONArray optJSONArray(int index) {\n        return baseArgs.optJSONArray(index);\n    }\n\n    public JSONObject optJSONObject(int index) {\n        return baseArgs.optJSONObject(index);\n    }\n\n    public long optLong(int index) {\n        return baseArgs.optLong(index);\n    }\n\n    public String optString(int index) {\n        return baseArgs.optString(index);\n    }\n\n    public boolean isNull(int index) {\n        return baseArgs.isNull(index);\n    }\n\n\n    // The interesting custom helpers.\n    public byte[] getArrayBuffer(int index) throws JSONException {\n        String encoded = baseArgs.getString(index);\n        return Base64.decode(encoded, Base64.DEFAULT);\n    }\n}\n\n\n","size_bytes":3104},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaBridge.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport android.annotation.SuppressLint;\n\nimport java.security.SecureRandom;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\n\n/**\n * Contains APIs that the JS can call. All functions in here should also have\n * an equivalent entry in CordovaChromeClient.java, and be added to\n * cordova-js/lib/android/plugin/android/promptbasednativeapi.js\n */\npublic class CordovaBridge {\n    private static final String LOG_TAG = \"CordovaBridge\";\n    private PluginManager pluginManager;\n    private NativeToJsMessageQueue jsMessageQueue;\n    private volatile int expectedBridgeSecret = -1; // written by UI thread, read by JS thread.\n\n    public CordovaBridge(PluginManager pluginManager, NativeToJsMessageQueue jsMessageQueue) {\n        this.pluginManager = pluginManager;\n        this.jsMessageQueue = jsMessageQueue;\n    }\n\n    public String jsExec(int bridgeSecret, String service, String action, String callbackId, String arguments) throws JSONException, IllegalAccessException {\n        if (!verifySecret(\"exec()\", bridgeSecret)) {\n            return null;\n        }\n        // If the arguments weren't received, send a message back to JS.  It will switch bridge modes and try again.  See CB-2666.\n        // We send a message meant specifically for this case.  It starts with \"@\" so no other message can be encoded into the same string.\n        if (arguments == null) {\n            return \"@Null arguments.\";\n        }\n\n        jsMessageQueue.setPaused(true);\n        try {\n            // Tell the resourceApi what thread the JS is running on.\n            CordovaResourceApi.jsThread = Thread.currentThread();\n\n            pluginManager.exec(service, action, callbackId, arguments);\n            String ret = null;\n            if (!NativeToJsMessageQueue.DISABLE_EXEC_CHAINING) {\n                ret = jsMessageQueue.popAndEncode(false);\n            }\n            return ret;\n        } catch (Throwable e) {\n            e.printStackTrace();\n            return \"\";\n        } finally {\n            jsMessageQueue.setPaused(false);\n        }\n    }\n\n    public void jsSetNativeToJsBridgeMode(int bridgeSecret, int value) throws IllegalAccessException {\n        if (!verifySecret(\"setNativeToJsBridgeMode()\", bridgeSecret)) {\n            return;\n        }\n        jsMessageQueue.setBridgeMode(value);\n    }\n\n    public String jsRetrieveJsMessages(int bridgeSecret, boolean fromOnlineEvent) throws IllegalAccessException {\n        if (!verifySecret(\"retrieveJsMessages()\", bridgeSecret)) {\n            return null;\n        }\n        return jsMessageQueue.popAndEncode(fromOnlineEvent);\n    }\n\n    private boolean verifySecret(String action, int bridgeSecret) throws IllegalAccessException {\n        if (!jsMessageQueue.isBridgeEnabled()) {\n            if (bridgeSecret == -1) {\n                LOG.d(LOG_TAG, action + \" call made before bridge was enabled.\");\n            } else {\n                LOG.d(LOG_TAG, \"Ignoring \" + action + \" from previous page load.\");\n            }\n            return false;\n        }\n        // Bridge secret wrong and bridge not due to it being from the previous page.\n        if (expectedBridgeSecret < 0 || bridgeSecret != expectedBridgeSecret) {\n            LOG.e(LOG_TAG, \"Bridge access attempt with wrong secret token, possibly from malicious code. Disabling exec() bridge!\");\n            clearBridgeSecret();\n            throw new IllegalAccessException();\n        }\n        return true;\n    }\n\n    /** Called on page transitions */\n    void clearBridgeSecret() {\n        expectedBridgeSecret = -1;\n    }\n\n    public boolean isSecretEstablished() {\n        return expectedBridgeSecret != -1;\n    }\n\n    /** Called by cordova.js to initialize the bridge. */\n    //On old Androids SecureRandom isn't really secure, this is the least of your problems if\n    //you're running Android 4.3 and below in 2017\n    int generateBridgeSecret() {\n        SecureRandom randGen = new SecureRandom();\n        expectedBridgeSecret = randGen.nextInt(Integer.MAX_VALUE);\n        return expectedBridgeSecret;\n    }\n\n    public void reset() {\n        jsMessageQueue.reset();\n        clearBridgeSecret();\n    }\n\n    public String promptOnJsPrompt(String origin, String message, String defaultValue) {\n        if (defaultValue != null && defaultValue.startsWith(\"gap:\")) {\n            JSONArray array;\n            try {\n                array = new JSONArray(defaultValue.substring(4));\n                int bridgeSecret = array.getInt(0);\n                String service = array.getString(1);\n                String action = array.getString(2);\n                String callbackId = array.getString(3);\n                String r = jsExec(bridgeSecret, service, action, callbackId, message);\n                return r == null ? \"\" : r;\n            } catch (JSONException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n            return \"\";\n        }\n        // Sets the native->JS bridge mode.\n        else if (defaultValue != null && defaultValue.startsWith(\"gap_bridge_mode:\")) {\n            try {\n                int bridgeSecret = Integer.parseInt(defaultValue.substring(16));\n                jsSetNativeToJsBridgeMode(bridgeSecret, Integer.parseInt(message));\n            } catch (NumberFormatException e){\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n            return \"\";\n        }\n        // Polling for JavaScript messages\n        else if (defaultValue != null && defaultValue.startsWith(\"gap_poll:\")) {\n            int bridgeSecret = Integer.parseInt(defaultValue.substring(9));\n            try {\n                String r = jsRetrieveJsMessages(bridgeSecret, \"1\".equals(message));\n                return r == null ? \"\" : r;\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n            return \"\";\n        }\n        else if (defaultValue != null && defaultValue.startsWith(\"gap_init:\")) {\n            // Protect against random iframes being able to talk through the bridge.\n            // Trust only pages which the app would have been allowed to navigate to anyway.\n            if (pluginManager.shouldAllowBridgeAccess(origin)) {\n                // Enable the bridge\n                int bridgeMode = Integer.parseInt(defaultValue.substring(9));\n                jsMessageQueue.setBridgeMode(bridgeMode);\n                // Tell JS the bridge secret.\n                int secret = generateBridgeSecret();\n                return \"\"+secret;\n            } else {\n                LOG.e(LOG_TAG, \"gap_init called from restricted origin: \" + origin);\n            }\n            return \"\";\n        }\n        return null;\n    }\n}\n","size_bytes":7662},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaClientCertRequest.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport java.security.Principal;\nimport java.security.PrivateKey;\nimport java.security.cert.X509Certificate;\n\nimport android.annotation.SuppressLint;\nimport android.webkit.ClientCertRequest;\n\n/**\n * Implementation of the ICordovaClientCertRequest for Android WebView.\n *\n */\npublic class CordovaClientCertRequest implements ICordovaClientCertRequest {\n\n    private final ClientCertRequest request;\n\n    public CordovaClientCertRequest(ClientCertRequest request) {\n        this.request = request;\n    }\n\n    /**\n     * Cancel this request\n     */\n    @SuppressLint(\"NewApi\")\n    @Override\n    public void cancel()\n    {\n        request.cancel();\n    }\n\n    /**\n     * @return the host name of the server requesting the certificate.\n     */\n    @SuppressLint(\"NewApi\")\n    @Override\n    public String getHost()\n    {\n        return request.getHost();\n    }\n\n    /**\n     * @return the acceptable types of asymmetric keys (can be null).\n     */\n    @SuppressLint(\"NewApi\")\n    @Override\n    public String[] getKeyTypes()\n    {\n        return request.getKeyTypes();\n    }\n\n    /**\n     * @return the port number of the server requesting the certificate.\n     */\n    @SuppressLint(\"NewApi\")\n    @Override\n    public int getPort()\n    {\n        return request.getPort();\n    }\n\n    /**\n     * @return the acceptable certificate issuers for the certificate matching the private key (can be null).\n     */\n    @SuppressLint(\"NewApi\")\n    @Override\n    public Principal[] getPrincipals()\n    {\n        return request.getPrincipals();\n    }\n\n    /**\n     * Ignore the request for now. Do not remember user's choice.\n     */\n    @SuppressLint(\"NewApi\")\n    @Override\n    public void ignore()\n    {\n        request.ignore();\n    }\n\n    /**\n     * Proceed with the specified private key and client certificate chain. Remember the user's positive choice and use it for future requests.\n     *\n     * @param privateKey The privateKey\n     * @param chain The certificate chain\n     */\n    @SuppressLint(\"NewApi\")\n    @Override\n    public void proceed(PrivateKey privateKey, X509Certificate[] chain)\n    {\n        request.proceed(privateKey, chain);\n    }\n}\n","size_bytes":3028},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaDialogsHelper.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport android.app.AlertDialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.view.KeyEvent;\nimport android.widget.EditText;\n\n/**\n * Helper class for WebViews to implement prompt(), alert(), confirm() dialogs.\n */\npublic class CordovaDialogsHelper {\n    private final Context context;\n    private AlertDialog lastHandledDialog;\n\n    public CordovaDialogsHelper(Context context) {\n        this.context = context;\n    }\n\n    public void showAlert(String message, final Result result) {\n        AlertDialog.Builder dlg = new AlertDialog.Builder(context);\n        dlg.setMessage(message);\n        dlg.setTitle(\"Alert\");\n        //Don't let alerts break the back button\n        dlg.setCancelable(true);\n        dlg.setPositiveButton(android.R.string.ok,\n                new AlertDialog.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        result.gotResult(true, null);\n                    }\n                });\n        dlg.setOnCancelListener(\n                new DialogInterface.OnCancelListener() {\n                    @Override\n                    public void onCancel(DialogInterface dialog) {\n                        result.gotResult(false, null);\n                    }\n                });\n        dlg.setOnKeyListener(new DialogInterface.OnKeyListener() {\n            //DO NOTHING\n            @Override\n            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n                if (keyCode == KeyEvent.KEYCODE_BACK)\n                {\n                    result.gotResult(true, null);\n                    return false;\n                }\n                else\n                    return true;\n            }\n        });\n        lastHandledDialog = dlg.show();\n    }\n\n    public void showConfirm(String message, final Result result) {\n        AlertDialog.Builder dlg = new AlertDialog.Builder(context);\n        dlg.setMessage(message);\n        dlg.setTitle(\"Confirm\");\n        dlg.setCancelable(true);\n        dlg.setPositiveButton(android.R.string.ok,\n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        result.gotResult(true, null);\n                    }\n                });\n        dlg.setNegativeButton(android.R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        result.gotResult(false, null);\n                    }\n                });\n        dlg.setOnCancelListener(\n                new DialogInterface.OnCancelListener() {\n                    @Override\n                    public void onCancel(DialogInterface dialog) {\n                        result.gotResult(false, null);\n                    }\n                });\n        dlg.setOnKeyListener(new DialogInterface.OnKeyListener() {\n            //DO NOTHING\n            @Override\n            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {\n                if (keyCode == KeyEvent.KEYCODE_BACK)\n                {\n                    result.gotResult(false, null);\n                    return false;\n                }\n                else\n                    return true;\n            }\n        });\n        lastHandledDialog = dlg.show();\n    }\n\n    /**\n     * Tell the client to display a prompt dialog to the user.\n     * If the client returns true, WebView will assume that the client will\n     * handle the prompt dialog and call the appropriate JsPromptResult method.\n     *\n     * <p>Since we are hacking prompts for our own purposes, we should not be using them for\n     * this purpose, perhaps we should hack console.log to do this instead!</p>\n     */\n    public void showPrompt(String message, String defaultValue, final Result result) {\n        // Returning false would also show a dialog, but the default one shows the origin (ugly).\n        AlertDialog.Builder dlg = new AlertDialog.Builder(context);\n        dlg.setMessage(message);\n        final EditText input = new EditText(context);\n        if (defaultValue != null) {\n            input.setText(defaultValue);\n        }\n        dlg.setView(input);\n        dlg.setCancelable(false);\n        dlg.setPositiveButton(android.R.string.ok,\n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        String userText = input.getText().toString();\n                        result.gotResult(true, userText);\n                    }\n                });\n        dlg.setNegativeButton(android.R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                        result.gotResult(false, null);\n                    }\n                });\n        lastHandledDialog = dlg.show();\n    }\n\n    public void destroyLastDialog(){\n        if (lastHandledDialog != null){\n            lastHandledDialog.cancel();\n        }\n    }\n\n    public interface Result {\n        public void gotResult(boolean success, String value);\n    }\n}","size_bytes":6250},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaHttpAuthHandler.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport android.webkit.HttpAuthHandler;\n\n/**\n * Specifies interface for HTTP auth handler object which is used to handle auth requests and\n * specifying user credentials.\n */\npublic class CordovaHttpAuthHandler implements ICordovaHttpAuthHandler {\n\n    private final HttpAuthHandler handler;\n\n    public CordovaHttpAuthHandler(HttpAuthHandler handler) {\n        this.handler = handler;\n    }\n\n    /**\n     * Instructs the WebView to cancel the authentication request.\n     */\n    @Override\n    public void cancel () {\n        this.handler.cancel();\n    }\n\n    /**\n     * Instructs the WebView to proceed with the authentication with the given credentials.\n     *\n     * @param username\n     * @param password\n     */\n    @Override\n    public void proceed (String username, String password) {\n        this.handler.proceed(username, password);\n    }\n}\n","size_bytes":1737},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaInterface.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport android.content.Context;\nimport android.content.Intent;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport java.util.concurrent.ExecutorService;\n\n/**\n * The Activity interface that is implemented by CordovaActivity.\n * It is used to isolate plugin development, and remove dependency on entire Cordova library.\n */\npublic interface CordovaInterface {\n\n    /**\n     * Launch an activity for which you would like a result when it finished. When this activity exits,\n     * your onActivityResult() method will be called.\n     *\n     * @param command     The command object\n     * @param intent      The intent to start\n     * @param requestCode   The request code that is passed to callback to identify the activity\n     */\n    abstract public void startActivityForResult(CordovaPlugin command, Intent intent, int requestCode);\n\n    /**\n     * Set the plugin to be called when a sub-activity exits.\n     *\n     * @param plugin      The plugin on which onActivityResult is to be called\n     */\n    abstract public void setActivityResultCallback(CordovaPlugin plugin);\n\n    /**\n     * Get the Android activity.\n     *\n     * <p>If a custom engine lives outside of the Activity's lifecycle the return value\n     * may be null.</p>\n     *\n     * @return the Activity\n     */\n    public abstract AppCompatActivity getActivity();\n\n    /**\n     * Get the Android context.\n     *\n     * @return the Context\n     */\n    public Context getContext();\n\n    /**\n     * Called when a message is sent to plugin.\n     *\n     * @param id            The message id\n     * @param data          The message data\n     * @return              Object or null\n     */\n    public Object onMessage(String id, Object data);\n\n    /**\n     * @return a shared thread pool that can be used for background tasks.\n     */\n    public ExecutorService getThreadPool();\n\n    /**\n     * Sends a permission request to the activity for one permission.\n     */\n    public void requestPermission(CordovaPlugin plugin, int requestCode, String permission);\n\n    /**\n     * Sends a permission request to the activity for a group of permissions\n     */\n    public void requestPermissions(CordovaPlugin plugin, int requestCode, String [] permissions);\n\n    /**\n     * Check for a permission.\n     *\n     * @return true if the permission is granted, false otherwise.\n     */\n    public boolean hasPermission(String permission);\n\n}\n","size_bytes":3280},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaInterfaceImpl.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.util.Pair;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Default implementation of CordovaInterface.\n */\npublic class CordovaInterfaceImpl implements CordovaInterface {\n    private static final String TAG = \"CordovaInterfaceImpl\";\n    protected AppCompatActivity activity;\n    protected ExecutorService threadPool;\n    protected PluginManager pluginManager;\n\n    protected ActivityResultHolder savedResult;\n    protected CallbackMap permissionResultCallbacks;\n    protected CordovaPlugin activityResultCallback;\n    protected String initCallbackService;\n    protected int activityResultRequestCode;\n    protected boolean activityWasDestroyed = false;\n    protected Bundle savedPluginState;\n\n    public CordovaInterfaceImpl(AppCompatActivity activity) {\n        this(activity, Executors.newCachedThreadPool());\n    }\n\n    public CordovaInterfaceImpl(AppCompatActivity activity, ExecutorService threadPool) {\n        this.activity = activity;\n        this.threadPool = threadPool;\n        this.permissionResultCallbacks = new CallbackMap();\n    }\n\n    @Override\n    public void startActivityForResult(CordovaPlugin command, Intent intent, int requestCode) {\n        setActivityResultCallback(command);\n        try {\n            activity.startActivityForResult(intent, requestCode);\n        } catch (RuntimeException e) { // E.g.: ActivityNotFoundException\n            activityResultCallback = null;\n            throw e;\n        }\n    }\n\n    @Override\n    public void setActivityResultCallback(CordovaPlugin plugin) {\n        // Cancel any previously pending activity.\n        if (activityResultCallback != null) {\n            activityResultCallback.onActivityResult(activityResultRequestCode, AppCompatActivity.RESULT_CANCELED, null);\n        }\n        activityResultCallback = plugin;\n    }\n\n    @Override\n    public AppCompatActivity getActivity() {\n        return activity;\n    }\n\n    @Override\n    public Context getContext() {\n        return activity;\n    }\n\n    @Override\n    public Object onMessage(String id, Object data) {\n        if (\"exit\".equals(id)) {\n            activity.finish();\n        }\n        return null;\n    }\n\n    @Override\n    public ExecutorService getThreadPool() {\n        return threadPool;\n    }\n\n    /**\n     * Dispatches any pending onActivityResult callbacks and sends the resume event if the\n     * Activity was destroyed by the OS.\n     */\n    public void onCordovaInit(PluginManager pluginManager) {\n        this.pluginManager = pluginManager;\n        if (savedResult != null) {\n            onActivityResult(savedResult.requestCode, savedResult.resultCode, savedResult.intent);\n        } else if(activityWasDestroyed) {\n            // If there was no Activity result, we still need to send out the resume event if the\n            // Activity was destroyed by the OS\n            activityWasDestroyed = false;\n            if(pluginManager != null)\n            {\n                CoreAndroid appPlugin = (CoreAndroid) pluginManager.getPlugin(CoreAndroid.PLUGIN_NAME);\n                if(appPlugin != null) {\n                    JSONObject obj = new JSONObject();\n                    try {\n                        obj.put(\"action\", \"resume\");\n                    } catch (JSONException e) {\n                        LOG.e(TAG, \"Failed to create event message\", e);\n                    }\n                    appPlugin.sendResumeEvent(new PluginResult(PluginResult.Status.OK, obj));\n                }\n            }\n\n        }\n    }\n\n    /**\n     * Routes the result to the awaiting plugin.\n     *\n     * @return false if no plugin was waiting.\n     */\n    public boolean onActivityResult(int requestCode, int resultCode, Intent intent) {\n        CordovaPlugin callback = activityResultCallback;\n        if(callback == null && initCallbackService != null) {\n            // The application was restarted, but had defined an initial callback\n            // before being shut down.\n            savedResult = new ActivityResultHolder(requestCode, resultCode, intent);\n            if (pluginManager != null) {\n                callback = pluginManager.getPlugin(initCallbackService);\n                if(callback != null) {\n                    callback.onRestoreStateForActivityResult(savedPluginState.getBundle(callback.getServiceName()),\n                            new ResumeCallback(callback.getServiceName(), pluginManager));\n                }\n            }\n        }\n        activityResultCallback = null;\n\n        if (callback != null) {\n            LOG.d(TAG, \"Sending activity result to plugin\");\n            initCallbackService = null;\n            savedResult = null;\n            callback.onActivityResult(requestCode, resultCode, intent);\n            return true;\n        }\n        LOG.w(TAG, \"Got an activity result, but no plugin was registered to receive it\" + (savedResult != null ? \" yet!\" : \".\"));\n        return false;\n    }\n\n    /**\n     * Call this from your startActivityForResult() overload. This is required to catch the case\n     * where plugins use Activity.startActivityForResult() + CordovaInterface.setActivityResultCallback()\n     * rather than CordovaInterface.startActivityForResult().\n     */\n    public void setActivityResultRequestCode(int requestCode) {\n        activityResultRequestCode = requestCode;\n    }\n\n    /**\n     * Saves parameters for startActivityForResult().\n     */\n    public void onSaveInstanceState(Bundle outState) {\n        if (activityResultCallback != null) {\n            String serviceName = activityResultCallback.getServiceName();\n            outState.putString(\"callbackService\", serviceName);\n        }\n        if(pluginManager != null){\n            outState.putBundle(\"plugin\", pluginManager.onSaveInstanceState());\n        }\n\n    }\n\n    /**\n     * Call this from onCreate() so that any saved startActivityForResult parameters will be restored.\n     */\n    public void restoreInstanceState(Bundle savedInstanceState) {\n        initCallbackService = savedInstanceState.getString(\"callbackService\");\n        savedPluginState = savedInstanceState.getBundle(\"plugin\");\n        activityWasDestroyed = true;\n    }\n\n    private static class ActivityResultHolder {\n        private int requestCode;\n        private int resultCode;\n        private Intent intent;\n\n        public ActivityResultHolder(int requestCode, int resultCode, Intent intent) {\n            this.requestCode = requestCode;\n            this.resultCode = resultCode;\n            this.intent = intent;\n        }\n    }\n\n    /**\n     * Called by the system when the user grants permissions\n     *\n     * @param requestCode\n     * @param permissions\n     * @param grantResults\n     */\n    public void onRequestPermissionResult(int requestCode, String[] permissions,\n                                          int[] grantResults) throws JSONException {\n        Pair<CordovaPlugin, Integer> callback = permissionResultCallbacks.getAndRemoveCallback(requestCode);\n        if(callback != null) {\n            callback.first.onRequestPermissionResult(callback.second, permissions, grantResults);\n        }\n    }\n\n    @Override\n    public void requestPermission(CordovaPlugin plugin, int requestCode, String permission) {\n        String[] permissions = new String [1];\n        permissions[0] = permission;\n        requestPermissions(plugin, requestCode, permissions);\n    }\n\n    @SuppressLint(\"NewApi\")\n    @Override\n    public void requestPermissions(CordovaPlugin plugin, int requestCode, String [] permissions) {\n        int mappedRequestCode = permissionResultCallbacks.registerCallback(plugin, requestCode);\n        getActivity().requestPermissions(permissions, mappedRequestCode);\n    }\n\n    @Override\n    public boolean hasPermission(String permission)\n    {\n        return PackageManager.PERMISSION_GRANTED == activity.checkSelfPermission(permission);\n    }\n}\n","size_bytes":9052},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaPlugin.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport org.apache.cordova.CordovaArgs;\nimport org.apache.cordova.CordovaWebView;\nimport org.apache.cordova.CordovaInterface;\nimport org.apache.cordova.CallbackContext;\nimport org.json.JSONArray;\nimport org.json.JSONException;\n\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.content.res.Configuration;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.webkit.RenderProcessGoneDetail;\nimport android.webkit.WebView;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\n/**\n * Plugins must extend this class and override one of the execute methods.\n */\npublic class CordovaPlugin {\n    public CordovaWebView webView;\n    public CordovaInterface cordova;\n    protected CordovaPreferences preferences;\n    private String serviceName;\n\n    /**\n     * Call this after constructing to initialize the plugin.\n     * Final because we want to be able to change args without breaking plugins.\n     */\n    public final void privateInitialize(String serviceName, CordovaInterface cordova, CordovaWebView webView, CordovaPreferences preferences) {\n        assert this.cordova == null;\n        this.serviceName = serviceName;\n        this.cordova = cordova;\n        this.webView = webView;\n        this.preferences = preferences;\n        initialize(cordova, webView);\n        pluginInitialize();\n    }\n\n    /**\n     * Called after plugin construction and fields have been initialized.\n     * Prefer to use pluginInitialize instead since there is no value in\n     * having parameters on the initialize() function.\n     *\n     * @deprecated Use {@link #pluginInitialize()} instead. This method is no longer recommended\n     *             and will be removed in future versions.\n     */\n    @Deprecated\n    public void initialize(CordovaInterface cordova, CordovaWebView webView) {\n    }\n\n    /**\n     * Called after plugin construction and fields have been initialized.\n     */\n    protected void pluginInitialize() {\n    }\n\n    /**\n     * @return the plugin's service name (what you'd use when calling pluginManger.getPlugin())\n     */\n    public String getServiceName() {\n        return serviceName;\n    }\n\n    /**\n     * Executes the request.\n     *\n     * <p>This method is called from the WebView thread. To do a non-trivial\n     * amount of work, use:</p>\n     *\n     * <pre>cordova.getThreadPool().execute(runnable);</pre>\n     *\n     * <p>To run on the UI thread, use:</p>\n     *\n     * <pre>cordova.getActivity().runOnUiThread(runnable);</pre>\n     *\n     * @param action          The action to execute.\n     * @param rawArgs         The exec() arguments in JSON form.\n     * @param callbackContext The callback context used when calling back into JavaScript.\n     * @return                Whether the action was valid.\n     */\n    public boolean execute(String action, String rawArgs, CallbackContext callbackContext) throws JSONException {\n        JSONArray args = new JSONArray(rawArgs);\n        return execute(action, args, callbackContext);\n    }\n\n    /**\n     * Executes the request.\n     *\n     * <p>This method is called from the WebView thread. To do a non-trivial amount of work, use:</p>\n     *\n     * <pre>cordova.getThreadPool().execute(runnable);</pre>\n     *\n     * <p>To run on the UI thread, use:</p>\n     *\n     * <pre>cordova.getActivity().runOnUiThread(runnable);</pre>\n     *\n     * @param action          The action to execute.\n     * @param args            The exec() arguments.\n     * @param callbackContext The callback context used when calling back into JavaScript.\n     * @return                Whether the action was valid.\n     */\n    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n        CordovaArgs cordovaArgs = new CordovaArgs(args);\n        return execute(action, cordovaArgs, callbackContext);\n    }\n\n    /**\n     * Executes the request.\n     *\n     * <p>This method is called from the WebView thread. To do a non-trivial amount of work, use:</p>\n     *     cordova.getThreadPool().execute(runnable);\n     *\n     * <p>To run on the UI thread, use:</p>\n     *     cordova.getActivity().runOnUiThread(runnable);\n     *\n     * @param action          The action to execute.\n     * @param args            The exec() arguments, wrapped with some Cordova helpers.\n     * @param callbackContext The callback context used when calling back into JavaScript.\n     * @return                Whether the action was valid.\n     */\n    public boolean execute(String action, CordovaArgs args, CallbackContext callbackContext) throws JSONException {\n        return false;\n    }\n\n    /**\n     * Called when the system is about to start resuming a previous activity.\n     *\n     * @param multitasking\t\tFlag indicating if multitasking is turned on for app\n     */\n    public void onPause(boolean multitasking) {\n    }\n\n    /**\n     * Called when the activity will start interacting with the user.\n     *\n     * @param multitasking\t\tFlag indicating if multitasking is turned on for app\n     */\n    public void onResume(boolean multitasking) {\n    }\n\n    /**\n     * Called when the activity is becoming visible to the user.\n     */\n    public void onStart() {\n    }\n\n    /**\n     * Called when the activity is no longer visible to the user.\n     */\n    public void onStop() {\n    }\n\n    /**\n     * Called when the activity receives a new intent.\n     */\n    public void onNewIntent(Intent intent) {\n    }\n\n    /**\n     * The final call you receive before your activity is destroyed.\n     */\n    public void onDestroy() {\n    }\n\n    /**\n     * Called when the Activity is being destroyed (e.g. if a plugin calls out to an external\n     * Activity and the OS kills the CordovaActivity in the background). The plugin should save its\n     * state in this method only if it is awaiting the result of an external Activity and needs\n     * to preserve some information so as to handle that result; onRestoreStateForActivityResult()\n     * will only be called if the plugin is the recipient of an Activity result\n     *\n     * @return  Bundle containing the state of the plugin or null if state does not need to be saved\n     */\n    public Bundle onSaveInstanceState() {\n        return null;\n    }\n\n    /**\n     * Called when a plugin is the recipient of an Activity result after the CordovaActivity has\n     * been destroyed. The Bundle will be the same as the one the plugin returned in\n     * onSaveInstanceState()\n     *\n     * @param state             Bundle containing the state of the plugin\n     * @param callbackContext   Replacement Context to return the plugin result to\n     */\n    public void onRestoreStateForActivityResult(Bundle state, CallbackContext callbackContext) {}\n\n    /**\n     * Called when a message is sent to plugin.\n     *\n     * @param id            The message id\n     * @param data          The message data\n     * @return              Object to stop propagation or null\n     */\n    public Object onMessage(String id, Object data) {\n        return null;\n    }\n\n    /**\n     * Called when an activity you launched exits, giving you the requestCode you started it with,\n     * the resultCode it returned, and any additional data from it.\n     *\n     * @param requestCode   The request code originally supplied to startActivityForResult(),\n     *                      allowing you to identify who this result came from.\n     * @param resultCode    The integer result code returned by the child activity through its setResult().\n     * @param intent        An Intent, which can return result data to the caller (various data can be\n     *                      attached to Intent \"extras\").\n     */\n    public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    }\n\n    /**\n     * Hook for blocking the loading of external resources.\n     *\n     * <p>This will be called when the WebView's shouldInterceptRequest wants to\n     * know whether to open a connection to an external resource. Return false\n     * to block the request: if any plugin returns false, Cordova will block\n     * the request. If all plugins return null, the default policy will be\n     * enforced. If at least one plugin returns true, and no plugins return\n     * false, then the request will proceed.</p>\n     *\n     * <p>Note that this only affects resource requests which are routed through\n     * WebViewClient.shouldInterceptRequest, such as XMLHttpRequest requests and\n     * img tag loads. WebSockets and media requests (such as <video> and <audio>\n     * tags) are not affected by this method. Use CSP headers to control access\n     * to such resources.</p>\n     */\n    public Boolean shouldAllowRequest(String url) {\n        return null;\n    }\n\n    /**\n     * Hook for blocking navigation by the Cordova WebView. This applies both to top-level and\n     * iframe navigation.\n     *\n     * <p>This will be called when the WebView's needs to know whether to navigate\n     * to a new page. Return false to block the navigation: if any plugin\n     * returns false, Cordova will block the navigation. If all plugins return\n     * null, the default policy will be enforced. It at least one plugin returns\n     * true, and no plugins return false, then the navigation will proceed.</p>\n     */\n    public Boolean shouldAllowNavigation(String url) {\n        return null;\n    }\n\n    /**\n     * Hook for allowing page to call exec(). By default, this returns the result of\n     * shouldAllowNavigation(). It's generally unsafe to allow untrusted content to be loaded\n     * into a CordovaWebView, even within an iframe, so it's best not to touch this.\n     */\n    public Boolean shouldAllowBridgeAccess(String url) {\n        return shouldAllowNavigation(url);\n    }\n\n    /**\n     * Hook for blocking the launching of Intents by the Cordova application.\n     *\n     * <p>This will be called when the WebView will not navigate to a page, but\n     * could launch an intent to handle the URL. Return false to block this: if\n     * any plugin returns false, Cordova will block the navigation. If all\n     * plugins return null, the default policy will be enforced. If at least one\n     * plugin returns true, and no plugins return false, then the URL will be\n     * opened.</p>\n     */\n    public Boolean shouldOpenExternalUrl(String url) {\n        return null;\n    }\n\n    /**\n     * Allows plugins to handle a link being clicked. Return true here to cancel the navigation.\n     *\n     * @param url           The URL that is trying to be loaded in the Cordova WebView.\n     * @return              true to prevent the URL from loading. Default is false.\n     */\n    public boolean onOverrideUrlLoading(String url) {\n        return false;\n    }\n\n    /**\n     * Hook for redirecting requests. Applies to WebView requests as well as requests made by plugins.\n     * To handle the request directly, return a URI in the form:\n     *\n     * <pre>cdvplugin://pluginId/...</pre>\n     *\n     * <p>And implement handleOpenForRead().</p>\n     *\n     * <p>To make this easier, use the toPluginUri() and fromPluginUri() helpers:</p>\n     *\n     * <pre>\n     *     public Uri remapUri(Uri uri) { return toPluginUri(uri); }\n     *\n     *     public CordovaResourceApi.OpenForReadResult handleOpenForRead(Uri uri) throws IOException {\n     *         Uri origUri = fromPluginUri(uri);\n     *         ...\n     *     }\n     * </pre>\n     */\n    public Uri remapUri(Uri uri) {\n        return null;\n    }\n\n    /**\n     * Called to handle CordovaResourceApi.openForRead() calls for a cdvplugin://pluginId/ URL.\n     * Should never return null.\n     * Added in cordova-android@4.0.0\n     */\n    public CordovaResourceApi.OpenForReadResult handleOpenForRead(Uri uri) throws IOException {\n        throw new FileNotFoundException(\"Plugin can't handle uri: \" + uri);\n    }\n\n    /**\n     * Refer to remapUri()\n     * Added in cordova-android@4.0.0\n     */\n    protected Uri toPluginUri(Uri origUri) {\n        return new Uri.Builder()\n            .scheme(CordovaResourceApi.PLUGIN_URI_SCHEME)\n            .authority(serviceName)\n            .appendQueryParameter(\"origUri\", origUri.toString())\n            .build();\n    }\n\n    /**\n     * Refer to remapUri()\n     * Added in cordova-android@4.0.0\n     */\n    protected Uri fromPluginUri(Uri pluginUri) {\n        return Uri.parse(pluginUri.getQueryParameter(\"origUri\"));\n    }\n\n    /**\n     * Called when the WebView does a top-level navigation or refreshes.\n     *\n     * <p>Plugins should stop any long-running processes and clean up internal state.</p>\n     *\n     * <p>Does nothing by default.</p>\n     */\n    public void onReset() {\n    }\n\n    /**\n     * Called when the system received an HTTP authentication request. Plugin can use\n     * the supplied HttpAuthHandler to process this auth challenge.\n     *\n     * @param view              The WebView that is initiating the callback\n     * @param handler           The HttpAuthHandler used to set the WebView's response\n     * @param host              The host requiring authentication\n     * @param realm             The realm for which authentication is required\n     * @return                  true if the plugin will resolve this auth challenge, else false\n     */\n    public boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) {\n        return false;\n    }\n\n    /**\n     * Called when he system received an SSL client certificate request.  Plugin can use\n     * the supplied ClientCertRequest to process this certificate challenge.\n     *\n     * @param view              The WebView that is initiating the callback\n     * @param request           The client certificate request\n     * @return                  True if plugin will resolve this auth challenge, otherwise False\n     */\n    public boolean onReceivedClientCertRequest(CordovaWebView view, ICordovaClientCertRequest request) {\n        return false;\n    }\n\n    /**\n     * Called by the system when the device configuration changes while your activity is running.\n     *\n     * @param newConfig\t\tThe new device configuration\n     */\n    public void onConfigurationChanged(Configuration newConfig) {\n    }\n\n    /**\n     * Called by the Plugin Manager when we need to actually request permissions\n     *\n     * @param requestCode   Passed to the activity to track the request\n     * @return              The permission that was stored in the plugin\n     */\n    public void requestPermissions(int requestCode) {\n    }\n\n    /**\n     * Called by the WebView implementation to check for geolocation permissions, can be used\n     * by other Java methods in the event that a plugin is using this as a dependency.\n     *\n     * @return          True if the plugin has all the permissions it needs to operate.\n     */\n    public boolean hasPermisssion() {\n        return true;\n    }\n\n    /**\n     * Called by the system when the user grants permissions\n     *\n     * @param requestCode\n     * @param permissions\n     * @param grantResults\n     * @deprecated Use {@link #onRequestPermissionsResult} instead.\n     */\n    @Deprecated\n    public void onRequestPermissionResult(int requestCode, String[] permissions,\n                                          int[] grantResults) throws JSONException {\n\n    }\n\n    /**\n     * Called by the system when the user grants permissions\n     *\n     * @param requestCode\n     * @param permissions\n     * @param grantResults\n     */\n    public void onRequestPermissionsResult(int requestCode, String[] permissions,\n                                          int[] grantResults) throws JSONException {\n\n    }\n\n    /**\n     * Allow plugins to supply a PathHandler for the WebViewAssetHandler\n     *\n     * @return a CordovaPluginPathHandler which listen for paths and returns a response\n     */\n    public CordovaPluginPathHandler getPathHandler() {\n        return null;\n    }\n\n    /**\n     * Called when the WebView's render process has exited. Can be used to collect information\n     * regarding the crash for crashlytics or optionally attempt to gracefully handle/recover the\n     * crashed WebView by recreating it.\n     *\n     * <p>See <a href=\"https://developer.android.com/reference/android/webkit/WebViewClient#onRenderProcessGone(android.webkit.WebView,%20android.webkit.RenderProcessGoneDetail)\">WebViewClient#onRenderProcessGone</a></p>\n     *\n     * <p>Note: A plugin must not attempt to recover a WebView that it does not own/manage.</p>\n     *\n     * @return  true if the host application handled the situation that process has exited,\n     *          otherwise, application will crash if render process crashed, or be killed\n     *          if render process was killed by the system.\n     */\n    public boolean onRenderProcessGone(final WebView view, RenderProcessGoneDetail detail) {\n        return false;\n    }\n}\n","size_bytes":17714},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaPluginPathHandler.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport androidx.webkit.WebViewAssetLoader;\n\n/**\n * Wrapper class for path and handler\n */\npublic class CordovaPluginPathHandler {\n\n    private final WebViewAssetLoader.PathHandler handler;\n\n    public  CordovaPluginPathHandler(WebViewAssetLoader.PathHandler handler) {\n        this.handler = handler;\n    }\n\n    public WebViewAssetLoader.PathHandler getPathHandler() {\n        return handler;\n    }\n}\n","size_bytes":1290},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaPreferences.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.apache.cordova.LOG;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class CordovaPreferences {\n    private HashMap<String, String> prefs = new HashMap<String, String>(20);\n    private Bundle preferencesBundleExtras;\n\n    public void setPreferencesBundle(Bundle extras) {\n        preferencesBundleExtras = extras;\n    }\n\n    public void set(String name, String value) {\n        prefs.put(name.toLowerCase(Locale.ENGLISH), value);\n    }\n\n    public void set(String name, boolean value) {\n        set(name, \"\" + value);\n    }\n\n    public void set(String name, int value) {\n        set(name, \"\" + value);\n    }\n\n    public void set(String name, double value) {\n        set(name, \"\" + value);\n    }\n\n    public Map<String, String> getAll() {\n        return prefs;\n    }\n\n    public boolean getBoolean(String name, boolean defaultValue) {\n        name = name.toLowerCase(Locale.ENGLISH);\n        String value = prefs.get(name);\n        if (value != null) {\n            return Boolean.parseBoolean(value);\n        }\n        return defaultValue;\n    }\n\n    // Added in 4.0.0\n    public boolean contains(String name) {\n        return getString(name, null) != null;\n    }\n\n    public int getInteger(String name, int defaultValue) {\n        name = name.toLowerCase(Locale.ENGLISH);\n        String value = prefs.get(name);\n        if (value != null) {\n            // Use Integer.decode() can't handle it if the highest bit is set.\n            return (int)(long)Long.decode(value);\n        }\n        return defaultValue;\n    }\n\n    public double getDouble(String name, double defaultValue) {\n        name = name.toLowerCase(Locale.ENGLISH);\n        String value = prefs.get(name);\n        if (value != null) {\n            return Double.valueOf(value);\n        }\n        return defaultValue;\n    }\n\n    public String getString(String name, String defaultValue) {\n        name = name.toLowerCase(Locale.ENGLISH);\n        String value = prefs.get(name);\n        if (value != null) {\n            return value;\n        }\n        return defaultValue;\n    }\n\n}\n","size_bytes":3031},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaResourceApi.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n */\npackage org.apache.cordova;\n\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.content.res.AssetFileDescriptor;\nimport android.content.res.AssetManager;\nimport android.database.Cursor;\nimport android.net.Uri;\nimport android.os.Looper;\nimport android.util.Base64;\nimport android.webkit.MimeTypeMap;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.channels.FileChannel;\nimport java.util.Locale;\nimport java.util.zip.GZIPInputStream;\n\n/**\n * What this class provides:\n *\n * <ol>\n *   <li>\n *     Helpers for reading & writing to URLs.\n *     <ul>\n *       <li>E.g. handles assets, resources, content providers, files, data URIs, http[s]</li>\n *       <li>E.g. Can be used to query for mime-type & content length.</p></li>\n *     </ul>\n *   </li>\n *   <li>\n *     To allow plugins to redirect URLs (via remapUrl).\n *     <ul>\n *       <li>\n *          All plugins should call remapUrl() on URLs they receive from JS *before* passing the URL onto other utility functions in this class.\n *       </li>\n *       <li>For an example usage of this, refer to the org.apache.cordova.file plugin.</li>\n *     </ul>\n *   </li>\n * </ol>\n *\n * <p>Future Work:</p>\n * <ul>\n *   <li>Consider using a Cursor to query content URLs for their size (like the file plugin does).</li>\n *   <li>\n *     Allow plugins to remapUri to \"cdv-plugin://plugin-name/foo\", which CordovaResourceApi would then delegate to pluginManager.getPlugin(plugin-name).openForRead(url)\n *     <ul>\n *       <li>Currently, plugins *can* do this by remapping to a data: URL, but it's inefficient for large payloads.</li>\n *     </ul>\n *   </li>\n * </ul>\n */\npublic class CordovaResourceApi {\n    @SuppressWarnings(\"unused\")\n    private static final String LOG_TAG = \"CordovaResourceApi\";\n\n    public static final int URI_TYPE_FILE = 0;\n    public static final int URI_TYPE_ASSET = 1;\n    public static final int URI_TYPE_CONTENT = 2;\n    public static final int URI_TYPE_RESOURCE = 3;\n    public static final int URI_TYPE_DATA = 4;\n    public static final int URI_TYPE_HTTP = 5;\n    public static final int URI_TYPE_HTTPS = 6;\n    public static final int URI_TYPE_PLUGIN = 7;\n    public static final int URI_TYPE_UNKNOWN = -1;\n\n    public static final String PLUGIN_URI_SCHEME = \"cdvplugin\";\n\n    private static final String[] LOCAL_FILE_PROJECTION = { \"_data\" };\n\n    public static Thread jsThread;\n\n    private final AssetManager assetManager;\n    private final ContentResolver contentResolver;\n    private final PluginManager pluginManager;\n    private boolean threadCheckingEnabled = true;\n\n\n    public CordovaResourceApi(Context context, PluginManager pluginManager) {\n        this.contentResolver = context.getContentResolver();\n        this.assetManager = context.getAssets();\n        this.pluginManager = pluginManager;\n    }\n\n    public void setThreadCheckingEnabled(boolean value) {\n        threadCheckingEnabled = value;\n    }\n\n    public boolean isThreadCheckingEnabled() {\n        return threadCheckingEnabled;\n    }\n\n\n    public static int getUriType(Uri uri) {\n        assertNonRelative(uri);\n        String scheme = uri.getScheme();\n        if (ContentResolver.SCHEME_CONTENT.equalsIgnoreCase(scheme)) {\n            return URI_TYPE_CONTENT;\n        }\n        if (ContentResolver.SCHEME_ANDROID_RESOURCE.equalsIgnoreCase(scheme)) {\n            return URI_TYPE_RESOURCE;\n        }\n        if (ContentResolver.SCHEME_FILE.equalsIgnoreCase(scheme)) {\n            if (uri.getPath().startsWith(\"/android_asset/\")) {\n                return URI_TYPE_ASSET;\n            }\n            return URI_TYPE_FILE;\n        }\n        if (\"data\".equalsIgnoreCase(scheme)) {\n            return URI_TYPE_DATA;\n        }\n        if (\"http\".equalsIgnoreCase(scheme)) {\n            return URI_TYPE_HTTP;\n        }\n        if (\"https\".equalsIgnoreCase(scheme)) {\n            return URI_TYPE_HTTPS;\n        }\n        if (PLUGIN_URI_SCHEME.equalsIgnoreCase(scheme)) {\n            return URI_TYPE_PLUGIN;\n        }\n        return URI_TYPE_UNKNOWN;\n    }\n\n    public Uri remapUri(Uri uri) {\n        assertNonRelative(uri);\n        Uri pluginUri = pluginManager.remapUri(uri);\n        return pluginUri != null ? pluginUri : uri;\n    }\n\n    public String remapPath(String path) {\n        return remapUri(Uri.fromFile(new File(path))).getPath();\n    }\n\n    /**\n     * @return A file that points to the resource, or null if the resource is not on the local filesystem.\n     */\n    public File mapUriToFile(Uri uri) {\n        assertBackgroundThread();\n        switch (getUriType(uri)) {\n            case URI_TYPE_FILE:\n                return new File(uri.getPath());\n            case URI_TYPE_CONTENT: {\n                Cursor cursor = contentResolver.query(uri, LOCAL_FILE_PROJECTION, null, null, null);\n                if (cursor != null) {\n                    try {\n                        int columnIndex = cursor.getColumnIndex(LOCAL_FILE_PROJECTION[0]);\n                        if (columnIndex != -1 && cursor.getCount() > 0) {\n                            cursor.moveToFirst();\n                            String realPath = cursor.getString(columnIndex);\n                            if (realPath != null) {\n                                return new File(realPath);\n                            }\n                        }\n                    } finally {\n                        cursor.close();\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    public String getMimeType(Uri uri) {\n        switch (getUriType(uri)) {\n            case URI_TYPE_FILE:\n            case URI_TYPE_ASSET:\n                return getMimeTypeFromPath(uri.getPath());\n            case URI_TYPE_CONTENT:\n            case URI_TYPE_RESOURCE:\n                return contentResolver.getType(uri);\n            case URI_TYPE_DATA: {\n                return getDataUriMimeType(uri);\n            }\n            case URI_TYPE_HTTP:\n            case URI_TYPE_HTTPS: {\n                try {\n                    HttpURLConnection conn = (HttpURLConnection)new URL(uri.toString()).openConnection();\n                    conn.setDoInput(false);\n                    conn.setRequestMethod(\"HEAD\");\n                    String mimeType = conn.getHeaderField(\"Content-Type\");\n                    if (mimeType != null) {\n                        mimeType = mimeType.split(\";\")[0];\n                    }\n                    return mimeType;\n                } catch (IOException e) {\n                }\n            }\n        }\n\n        return null;\n    }\n\n\n    //This already exists\n    private String getMimeTypeFromPath(String path) {\n        String extension = path;\n        int lastDot = extension.lastIndexOf('.');\n        if (lastDot != -1) {\n            extension = extension.substring(lastDot + 1);\n        }\n        // Convert the URI string to lower case to ensure compatibility with MimeTypeMap (see CB-2185).\n        extension = extension.toLowerCase(Locale.getDefault());\n        if (extension.equals(\"3ga\")) {\n            return \"audio/3gpp\";\n        } else if (extension.equals(\"js\")) {\n            // Missing from the map :(.\n            return \"text/javascript\";\n        }\n        return MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n    }\n\n    /**\n     * Opens a stream to the given URI, also providing the MIME type & length.\n     *\n     * @return Never returns null.\n     * @throws IllegalArgumentException For relative URIs. Relative URIs should be resolved before\n     *                                  being passed into this function.\n     * @throws IOException              If the URI cannot be opened.\n     * @throws IllegalStateException    If called on a foreground thread.\n     */\n    public OpenForReadResult openForRead(Uri uri) throws IOException {\n        return openForRead(uri, false);\n    }\n\n    /**\n     * Opens a stream to the given URI, also providing the MIME type & length.\n     *\n     * @return Never returns null.\n     * @throws IllegalArgumentException For relative URIs. Relative URIs should be resolved before\n     *                                  being passed into this function.\n     * @throws IOException              If the URI cannot be opened.\n     * @throws IllegalStateException    If called on a foreground thread and skipThreadCheck is false.\n     */\n    public OpenForReadResult openForRead(Uri uri, boolean skipThreadCheck) throws IOException {\n        if (!skipThreadCheck) {\n            assertBackgroundThread();\n        }\n        switch (getUriType(uri)) {\n            case URI_TYPE_FILE: {\n                FileInputStream inputStream = new FileInputStream(uri.getPath());\n                String mimeType = getMimeTypeFromPath(uri.getPath());\n                long length = inputStream.getChannel().size();\n                return new OpenForReadResult(uri, inputStream, mimeType, length, null);\n            }\n            case URI_TYPE_ASSET: {\n                String assetPath = uri.getPath().substring(15);\n                AssetFileDescriptor assetFd = null;\n                InputStream inputStream;\n                long length = -1;\n                try {\n                    assetFd = assetManager.openFd(assetPath);\n                    inputStream = assetFd.createInputStream();\n                    length = assetFd.getLength();\n                } catch (FileNotFoundException e) {\n                    // Will occur if the file is compressed.\n                    inputStream = assetManager.open(assetPath);\n                    length = inputStream.available();\n                }\n                String mimeType = getMimeTypeFromPath(assetPath);\n                return new OpenForReadResult(uri, inputStream, mimeType, length, assetFd);\n            }\n            case URI_TYPE_CONTENT:\n            case URI_TYPE_RESOURCE: {\n                String mimeType = contentResolver.getType(uri);\n                AssetFileDescriptor assetFd = contentResolver.openAssetFileDescriptor(uri, \"r\");\n                InputStream inputStream = assetFd.createInputStream();\n                long length = assetFd.getLength();\n                return new OpenForReadResult(uri, inputStream, mimeType, length, assetFd);\n            }\n            case URI_TYPE_DATA: {\n                OpenForReadResult ret = readDataUri(uri);\n                if (ret == null) {\n                    break;\n                }\n                return ret;\n            }\n            case URI_TYPE_HTTP:\n            case URI_TYPE_HTTPS: {\n                HttpURLConnection conn = (HttpURLConnection)new URL(uri.toString()).openConnection();\n                conn.setRequestProperty(\"Accept-Encoding\", \"gzip\");\n                conn.setDoInput(true);\n                String mimeType = conn.getHeaderField(\"Content-Type\");\n                if (mimeType != null) {\n                    mimeType = mimeType.split(\";\")[0];\n                }\n                int length = conn.getContentLength();\n                InputStream inputStream;\n                if (\"gzip\".equals(conn.getContentEncoding())) {\n                    inputStream = new GZIPInputStream(conn.getInputStream());\n                } else {\n                    inputStream = conn.getInputStream();\n                }\n                return new OpenForReadResult(uri, inputStream, mimeType, length, null);\n            }\n            case URI_TYPE_PLUGIN: {\n                String pluginId = uri.getHost();\n                CordovaPlugin plugin = pluginManager.getPlugin(pluginId);\n                if (plugin == null) {\n                    throw new FileNotFoundException(\"Invalid plugin ID in URI: \" + uri);\n                }\n                return plugin.handleOpenForRead(uri);\n            }\n        }\n        throw new FileNotFoundException(\"URI not supported by CordovaResourceApi: \" + uri);\n    }\n\n    public OutputStream openOutputStream(Uri uri) throws IOException {\n        return openOutputStream(uri, false);\n    }\n\n    /**\n     * Opens a stream to the given URI.\n     *\n     * @return Never returns null.\n     * @throws IllegalArgumentException For relative URIs. Relative URIs should be resolved before\n     *                                  being passed into this function.\n     * @throws IOException              If the URI cannot be opened.\n     */\n    public OutputStream openOutputStream(Uri uri, boolean append) throws IOException {\n        assertBackgroundThread();\n        switch (getUriType(uri)) {\n            case URI_TYPE_FILE: {\n                File localFile = new File(uri.getPath());\n                File parent = localFile.getParentFile();\n                if (parent != null) {\n                    parent.mkdirs();\n                }\n                return new FileOutputStream(localFile, append);\n            }\n            case URI_TYPE_CONTENT:\n            case URI_TYPE_RESOURCE: {\n                AssetFileDescriptor assetFd = contentResolver.openAssetFileDescriptor(uri, append ? \"wa\" : \"w\");\n                return assetFd.createOutputStream();\n            }\n        }\n        throw new FileNotFoundException(\"URI not supported by CordovaResourceApi: \" + uri);\n    }\n\n    public HttpURLConnection createHttpConnection(Uri uri) throws IOException {\n        assertBackgroundThread();\n        return (HttpURLConnection)new URL(uri.toString()).openConnection();\n    }\n\n    // Copies the input to the output in the most efficient manner possible.\n    // Closes both streams.\n    public void copyResource(OpenForReadResult input, OutputStream outputStream) throws IOException {\n        assertBackgroundThread();\n        try {\n            InputStream inputStream = input.inputStream;\n            if (inputStream instanceof FileInputStream && outputStream instanceof FileOutputStream) {\n                FileChannel inChannel = ((FileInputStream)input.inputStream).getChannel();\n                FileChannel outChannel = ((FileOutputStream)outputStream).getChannel();\n                long offset = 0;\n                long length = input.length;\n                if (input.assetFd != null) {\n                    offset = input.assetFd.getStartOffset();\n                }\n                // transferFrom()'s 2nd arg is a relative position. Need to set the absolute\n                // position first.\n                inChannel.position(offset);\n                outChannel.transferFrom(inChannel, 0, length);\n            } else {\n                final int BUFFER_SIZE = 8192;\n                byte[] buffer = new byte[BUFFER_SIZE];\n\n                for (;;) {\n                    int bytesRead = inputStream.read(buffer, 0, BUFFER_SIZE);\n\n                    if (bytesRead <= 0) {\n                        break;\n                    }\n                    outputStream.write(buffer, 0, bytesRead);\n                }\n            }\n        } finally {\n            input.inputStream.close();\n            if (outputStream != null) {\n                outputStream.close();\n            }\n        }\n    }\n\n    public void copyResource(Uri sourceUri, OutputStream outputStream) throws IOException {\n        copyResource(openForRead(sourceUri), outputStream);\n    }\n\n    // Added in 3.5.0.\n    public void copyResource(Uri sourceUri, Uri dstUri) throws IOException {\n        copyResource(openForRead(sourceUri), openOutputStream(dstUri));\n    }\n\n    private void assertBackgroundThread() {\n        if (threadCheckingEnabled) {\n            Thread curThread = Thread.currentThread();\n            if (curThread == Looper.getMainLooper().getThread()) {\n                throw new IllegalStateException(\"Do not perform IO operations on the UI thread. Use CordovaInterface.getThreadPool() instead.\");\n            }\n            if (curThread == jsThread) {\n                throw new IllegalStateException(\"Tried to perform an IO operation on the WebCore thread. Use CordovaInterface.getThreadPool() instead.\");\n            }\n        }\n    }\n\n    private String getDataUriMimeType(Uri uri) {\n        String uriAsString = uri.getSchemeSpecificPart();\n        int commaPos = uriAsString.indexOf(',');\n        if (commaPos == -1) {\n            return null;\n        }\n        String[] mimeParts = uriAsString.substring(0, commaPos).split(\";\");\n        if (mimeParts.length > 0) {\n            return mimeParts[0];\n        }\n        return null;\n    }\n\n    private OpenForReadResult readDataUri(Uri uri) {\n        String uriAsString = uri.getSchemeSpecificPart();\n        int commaPos = uriAsString.indexOf(',');\n        if (commaPos == -1) {\n            return null;\n        }\n        String[] mimeParts = uriAsString.substring(0, commaPos).split(\";\");\n        String contentType = null;\n        boolean base64 = false;\n        if (mimeParts.length > 0) {\n            contentType = mimeParts[0];\n        }\n        for (int i = 1; i < mimeParts.length; ++i) {\n            if (\"base64\".equalsIgnoreCase(mimeParts[i])) {\n                base64 = true;\n            }\n        }\n        String dataPartAsString = uriAsString.substring(commaPos + 1);\n        byte[] data;\n        if (base64) {\n            data = Base64.decode(dataPartAsString, Base64.DEFAULT);\n        } else {\n            try {\n                data = dataPartAsString.getBytes(\"UTF-8\");\n            } catch (UnsupportedEncodingException e) {\n                data = dataPartAsString.getBytes();\n            }\n        }\n        InputStream inputStream = new ByteArrayInputStream(data);\n        return new OpenForReadResult(uri, inputStream, contentType, data.length, null);\n    }\n\n    private static void assertNonRelative(Uri uri) {\n        if (!uri.isAbsolute()) {\n            throw new IllegalArgumentException(\"Relative URIs are not supported.\");\n        }\n    }\n\n    public static final class OpenForReadResult {\n        public final Uri uri;\n        public final InputStream inputStream;\n        public final String mimeType;\n        public final long length;\n        public final AssetFileDescriptor assetFd;\n\n        public OpenForReadResult(Uri uri, InputStream inputStream, String mimeType, long length, AssetFileDescriptor assetFd) {\n            this.uri = uri;\n            this.inputStream = inputStream;\n            this.mimeType = mimeType;\n            this.length = length;\n            this.assetFd = assetFd;\n        }\n    }\n}\n","size_bytes":19322},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaWebView.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n         http://www.apache.org/licenses/LICENSE-2.0\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.view.View;\nimport android.webkit.WebChromeClient.CustomViewCallback;\n\n/**\n * Main interface for interacting with a Cordova WebView - implemented by CordovaWebViewImpl.\n * This is an interface so that it can be easily mocked in tests.\n * Methods may be added to this interface without a major version bump, as plugins/developer\n * are not expected to implement it.\n */\npublic interface CordovaWebView {\n    public static final String CORDOVA_VERSION = \"14.0.1\";\n\n    void init(CordovaInterface cordova, List<PluginEntry> pluginEntries, CordovaPreferences preferences);\n\n    boolean isInitialized();\n\n    View getView();\n\n    void loadUrlIntoView(String url, boolean recreatePlugins);\n\n    void stopLoading();\n\n    boolean canGoBack();\n\n    void clearCache();\n\n    /** Use parameter-less overload */\n    @Deprecated\n    void clearCache(boolean b);\n\n    void clearHistory();\n\n    boolean backHistory();\n\n    void handlePause(boolean keepRunning);\n\n    void onNewIntent(Intent intent);\n\n    void handleResume(boolean keepRunning);\n\n    void handleStart();\n\n    void handleStop();\n\n    void handleDestroy();\n\n    /**\n     * Send JavaScript statement back to JavaScript.\n     *\n     * <p>Deprecated (<a href=\"https://issues.apache.org/jira/browse/CB-6851\">CB-6851</a>)\n     * Instead of executing snippets of JS, you should use the exec bridge\n     * to create a Java->JS communication channel.</p>\n     *\n     * <p>To do this:</p>\n     *\n     * <p>1. Within plugin.xml (to have your JS run before deviceready):</p>\n     *\n     * <pre>\n     * <js-module><runs/></js-module>\n     * </pre>\n     *\n     * <p>2. Within your .js (call exec on start-up):</p>\n     *\n     * <pre>\n     *    require('cordova/channel').onCordovaReady.subscribe(function() {\n     *      require('cordova/exec')(win, null, 'Plugin', 'method', []);\n     *      function win(message) {\n     *        ... process message from java here ...\n     *      }\n     *    });\n     * </pre>\n     *\n     * <p>3. Within your .java:</p>\n     *\n     * <pre>\n     *    PluginResult dataResult = new PluginResult(PluginResult.Status.OK, CODE);\n     *    dataResult.setKeepCallback(true);\n     *    savedCallbackContext.sendPluginResult(dataResult);\n     * </pre>\n     */\n    @Deprecated\n    void sendJavascript(String statememt);\n\n    /**\n     * Load the specified URL in the Cordova WebView or a new browser instance.\n     *\n     * <p>NOTE: If openExternal is false, only allow listed URLs can be loaded.</p>\n     *\n     * @param url           The url to load.\n     * @param openExternal  Load url in browser instead of Cordova WebView.\n     * @param clearHistory  Clear the history stack, so new page becomes top of history\n     * @param params        Parameters for new app\n     */\n    void showWebPage(String url, boolean openExternal, boolean clearHistory, Map<String, Object> params);\n\n    /**\n     * Deprecated in 4.0.0. Use your own View-toggling logic.\n     */\n    @Deprecated\n    boolean isCustomViewShowing();\n\n    /**\n     * Deprecated in 4.0.0. Use your own View-toggling logic.\n     */\n    @Deprecated\n    void showCustomView(View view, CustomViewCallback callback);\n\n    /**\n     * Deprecated in 4.0.0. Use your own View-toggling logic.\n     */\n    @Deprecated\n    void hideCustomView();\n\n    CordovaResourceApi getResourceApi();\n\n    void setButtonPlumbedToJs(int keyCode, boolean override);\n    boolean isButtonPlumbedToJs(int keyCode);\n\n    void sendPluginResult(PluginResult cr, String callbackId);\n\n    PluginManager getPluginManager();\n    CordovaWebViewEngine getEngine();\n    CordovaPreferences getPreferences();\n    ICordovaCookieManager getCookieManager();\n\n    String getUrl();\n\n    // TODO: Work on deleting these by removing refs from plugins.\n    Context getContext();\n    void loadUrl(String url);\n    Object postMessage(String id, Object data);\n}\n","size_bytes":4836},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaWebViewEngine.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.webkit.ValueCallback;\n\n/**\n * Interface for all Cordova engines.\n * No methods will be added to this class (in order to be compatible with existing engines).\n * Instead, we will create a new interface: e.g. CordovaWebViewEngineV2\n */\npublic interface CordovaWebViewEngine {\n    void init(CordovaWebView parentWebView, CordovaInterface cordova, Client client,\n              CordovaResourceApi resourceApi, PluginManager pluginManager,\n              NativeToJsMessageQueue nativeToJsMessageQueue);\n\n    CordovaWebView getCordovaWebView();\n    ICordovaCookieManager getCookieManager();\n    View getView();\n\n    void loadUrl(String url, boolean clearNavigationStack);\n\n    void stopLoading();\n\n    /** Return the currently loaded URL */\n    String getUrl();\n\n    void clearCache();\n\n    /** After calling clearHistory(), canGoBack() should be false. */\n    void clearHistory();\n\n    boolean canGoBack();\n\n    /** Returns whether a navigation occurred */\n    boolean goBack();\n\n    /** Pauses / resumes the WebView's event loop. */\n    void setPaused(boolean value);\n\n    /** Clean up all resources associated with the WebView. */\n    void destroy();\n\n    /** Add the evaluate Javascript method **/\n    void evaluateJavascript(String js, ValueCallback<String> callback);\n\n    /**\n     * Used to retrieve the associated CordovaWebView given a View without knowing the type of Engine.\n     * E.g. ((CordovaWebView.EngineView)activity.findViewById(android.R.id.webView)).getCordovaWebView();\n     */\n    public interface EngineView {\n        CordovaWebView getCordovaWebView();\n    }\n\n    /**\n     * Contains methods that an engine uses to communicate with the parent CordovaWebView.\n     * Methods may be added in future cordova versions, but never removed.\n     */\n    public interface Client {\n        Boolean onDispatchKeyEvent(KeyEvent event);\n        void clearLoadTimeoutTimer();\n        void onPageStarted(String newUrl);\n        void onReceivedError(int errorCode, String description, String failingUrl);\n        void onPageFinishedLoading(String url);\n        boolean onNavigationAttempt(String url);\n    }\n}\n","size_bytes":3070},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CordovaWebViewImpl.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport android.annotation.SuppressLint;\nimport android.content.ActivityNotFoundException;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.view.Gravity;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.WebChromeClient;\nimport android.widget.FrameLayout;\n\nimport org.apache.cordova.engine.SystemWebViewEngine;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.lang.reflect.Constructor;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Main class for interacting with a Cordova WebView. Manages plugins, events, and a CordovaWebViewEngine.\n * Class uses two-phase initialization. You must call init() before calling any other methods.\n */\npublic class CordovaWebViewImpl implements CordovaWebView {\n\n    public static final String TAG = \"CordovaWebViewImpl\";\n\n    private PluginManager pluginManager;\n\n    protected final CordovaWebViewEngine engine;\n    private CordovaInterface cordova;\n\n    // Flag to track that a loadUrl timeout occurred\n    private int loadUrlTimeout = 0;\n\n    private CordovaResourceApi resourceApi;\n    private CordovaPreferences preferences;\n    private CoreAndroid appPlugin;\n    private NativeToJsMessageQueue nativeToJsMessageQueue;\n    private EngineClient engineClient = new EngineClient();\n    private boolean hasPausedEver;\n\n    // The URL passed to loadUrl(), not necessarily the URL of the current page.\n    String loadedUrl;\n\n    /** custom view created by the browser (a video player for example) */\n    private View mCustomView;\n    private WebChromeClient.CustomViewCallback mCustomViewCallback;\n\n    private Set<Integer> boundKeyCodes = new HashSet<Integer>();\n\n    public static CordovaWebViewEngine createEngine(Context context, CordovaPreferences preferences) {\n        String className = preferences.getString(\"webview\", SystemWebViewEngine.class.getCanonicalName());\n        try {\n            Class<?> webViewClass = Class.forName(className);\n            Constructor<?> constructor = webViewClass.getConstructor(Context.class, CordovaPreferences.class);\n            return (CordovaWebViewEngine) constructor.newInstance(context, preferences);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create webview. \", e);\n        }\n    }\n\n    public CordovaWebViewImpl(CordovaWebViewEngine cordovaWebViewEngine) {\n        this.engine = cordovaWebViewEngine;\n    }\n\n    // Convenience method for when creating programmatically (not from Config.xml).\n    public void init(CordovaInterface cordova) {\n        init(cordova, new ArrayList<PluginEntry>(), new CordovaPreferences());\n    }\n\n    @SuppressLint(\"Assert\")\n    @Override\n    public void init(CordovaInterface cordova, List<PluginEntry> pluginEntries, CordovaPreferences preferences) {\n        if (this.cordova != null) {\n            throw new IllegalStateException();\n        }\n        this.cordova = cordova;\n        this.preferences = preferences;\n        pluginManager = new PluginManager(this, this.cordova, pluginEntries);\n        resourceApi = new CordovaResourceApi(engine.getView().getContext(), pluginManager);\n        nativeToJsMessageQueue = new NativeToJsMessageQueue();\n        nativeToJsMessageQueue.addBridgeMode(new NativeToJsMessageQueue.NoOpBridgeMode());\n        nativeToJsMessageQueue.addBridgeMode(new NativeToJsMessageQueue.LoadUrlBridgeMode(engine, cordova));\n\n        if (preferences.getBoolean(\"DisallowOverscroll\", false)) {\n            engine.getView().setOverScrollMode(View.OVER_SCROLL_NEVER);\n        }\n        engine.init(this, cordova, engineClient, resourceApi, pluginManager, nativeToJsMessageQueue);\n        // This isn't enforced by the compiler, so assert here.\n        assert engine.getView() instanceof CordovaWebViewEngine.EngineView;\n\n        pluginManager.addService(CoreAndroid.PLUGIN_NAME, \"org.apache.cordova.CoreAndroid\", true);\n        pluginManager.init();\n    }\n\n    @Override\n    public boolean isInitialized() {\n        return cordova != null;\n    }\n\n    @Override\n    public void loadUrlIntoView(final String url, boolean recreatePlugins) {\n        LOG.d(TAG, \">>> loadUrl(\" + url + \")\");\n        if (url.equals(\"about:blank\") || url.startsWith(\"javascript:\")) {\n            engine.loadUrl(url, false);\n            return;\n        }\n\n        recreatePlugins = recreatePlugins || (loadedUrl == null);\n\n        if (recreatePlugins) {\n            // Don't re-initialize on first load.\n            if (loadedUrl != null) {\n                appPlugin = null;\n                pluginManager.init();\n            }\n            loadedUrl = url;\n        }\n\n        // Create a timeout timer for loadUrl\n        final int currentLoadUrlTimeout = loadUrlTimeout;\n        final int loadUrlTimeoutValue = preferences.getInteger(\"LoadUrlTimeoutValue\", 20000);\n\n        // Timeout error method\n        final Runnable loadError = new Runnable() {\n            @Override\n            public void run() {\n                stopLoading();\n                LOG.e(TAG, \"CordovaWebView: TIMEOUT ERROR!\");\n\n                // Handle other errors by passing them to the WebView in JS\n                JSONObject data = new JSONObject();\n                try {\n                    data.put(\"errorCode\", -6);\n                    data.put(\"description\", \"The connection to the server was unsuccessful.\");\n                    data.put(\"url\", url);\n                } catch (JSONException e) {\n                    // Will never happen.\n                }\n                pluginManager.postMessage(\"onReceivedError\", data);\n            }\n        };\n\n        // Timeout timer method\n        final Runnable timeoutCheck = new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    synchronized (this) {\n                        wait(loadUrlTimeoutValue);\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n\n                // If timeout, then stop loading and handle error (if activity still exists)\n                if (loadUrlTimeout == currentLoadUrlTimeout && cordova.getActivity() != null) {\n                    cordova.getActivity().runOnUiThread(loadError);\n                } else if (cordova.getActivity() == null) {\n                    LOG.d(TAG, \"Cordova activity does not exist.\");\n                }\n            }\n        };\n\n        if (cordova.getActivity() != null) {\n            final boolean _recreatePlugins = recreatePlugins;\n            cordova.getActivity().runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    if (loadUrlTimeoutValue > 0) {\n                        cordova.getThreadPool().execute(timeoutCheck);\n                    }\n                    engine.loadUrl(url, _recreatePlugins);\n                }\n            });\n        } else {\n            LOG.d(TAG, \"Cordova activity does not exist.\");\n        }\n    }\n\n\n    @Override\n    public void loadUrl(String url) {\n        loadUrlIntoView(url, true);\n    }\n\n    @Override\n    public void showWebPage(String url, boolean openExternal, boolean clearHistory, Map<String, Object> params) {\n        LOG.d(TAG, \"showWebPage(%s, %b, %b, HashMap)\", url, openExternal, clearHistory);\n\n        // If clearing history\n        if (clearHistory) {\n            engine.clearHistory();\n        }\n\n        // If loading into our WebView\n        if (!openExternal) {\n            // Make sure url is in allow list\n            if (pluginManager.shouldAllowNavigation(url)) {\n                // TODO: What about params?\n                // Load new URL\n                loadUrlIntoView(url, true);\n                return;\n            } else {\n                LOG.w(TAG, \"showWebPage: Refusing to load URL into webview since it is not in the <allow-navigation> allow list. URL=\" + url);\n                return;\n            }\n        }\n        if (!pluginManager.shouldOpenExternalUrl(url)) {\n            LOG.w(TAG, \"showWebPage: Refusing to send intent for URL since it is not in the <allow-intent> allow list. URL=\" + url);\n            return;\n        }\n\n        Intent intent = null;\n        try {\n            if (url.startsWith(\"intent://\")) {\n                intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);\n            } else {\n                intent = new Intent(Intent.ACTION_VIEW);\n                // To send an intent without CATEGORY_BROWSER, a custom plugin should be used.\n                intent.addCategory(Intent.CATEGORY_BROWSABLE);\n                Uri uri = Uri.parse(url);\n                // Omitting the MIME type for file: URLs causes \"No Activity found to handle Intent\".\n                // Adding the MIME type to http: URLs causes them to not be handled by the downloader.\n                if (\"file\".equals(uri.getScheme())) {\n                    intent.setDataAndType(uri, resourceApi.getMimeType(uri));\n                } else {\n                    intent.setData(uri);\n                }\n            }\n            if (cordova.getActivity() != null) {\n                cordova.getActivity().startActivity(intent);\n            } else {\n                LOG.d(TAG, \"Cordova activity does not exist.\");\n            }\n        } catch (URISyntaxException e) {\n            LOG.e(TAG, \"Error parsing url \" + url, e);\n        } catch (ActivityNotFoundException e) {\n            if (url.startsWith(\"intent://\") && intent != null && intent.getStringExtra(\"browser_fallback_url\") != null) {\n                showWebPage(intent.getStringExtra(\"browser_fallback_url\"), openExternal, clearHistory, params);\n            } else {\n                LOG.e(TAG, \"Error loading url \" + url, e);\n            }\n        }\n    }\n\n    private static class WrapperView extends FrameLayout {\n\n        private final CordovaWebViewEngine engine;\n\n        public WrapperView(Context context, CordovaWebViewEngine engine) {\n            super(context);\n            this.engine = engine;\n        }\n\n        @Override\n        public boolean dispatchKeyEvent(KeyEvent event) {\n            boolean ret = engine.getView().dispatchKeyEvent(event);\n            if (!ret) {\n                // If the engine didn't handle the event, handle it normally.\n                ret = super.dispatchKeyEvent(event);\n            }\n            return ret;\n        }\n    }\n\n    @Override\n    @Deprecated\n    public void showCustomView(View view, WebChromeClient.CustomViewCallback callback) {\n        // This code is adapted from the original Android Browser code, licensed under the Apache License, Version 2.0\n        LOG.d(TAG, \"showing Custom View\");\n        // if a view already exists then immediately terminate the new one\n        if (mCustomView != null) {\n            callback.onCustomViewHidden();\n            return;\n        }\n\n        WrapperView wrapperView = new WrapperView(getContext(), engine);\n        wrapperView.addView(view);\n\n        // Store the view and its callback for later (to kill it properly)\n        mCustomView = wrapperView;\n        mCustomViewCallback = callback;\n\n        // Add the custom view to its container.\n        ViewGroup parent = (ViewGroup) engine.getView().getParent();\n        parent.addView(wrapperView, new FrameLayout.LayoutParams(\n                ViewGroup.LayoutParams.MATCH_PARENT,\n                ViewGroup.LayoutParams.MATCH_PARENT,\n                Gravity.CENTER));\n\n        // Hide the content view.\n        engine.getView().setVisibility(View.GONE);\n\n        // Finally show the custom view container.\n        parent.setVisibility(View.VISIBLE);\n        parent.bringToFront();\n    }\n\n    @Override\n    @Deprecated\n    public void hideCustomView() {\n        // This code is adapted from the original Android Browser code, licensed under the Apache License, Version 2.0\n        if (mCustomView == null) return;\n        LOG.d(TAG, \"Hiding Custom View\");\n\n        // Hide the custom view.\n        mCustomView.setVisibility(View.GONE);\n\n        // Remove the custom view from its container.\n        ViewGroup parent = (ViewGroup) engine.getView().getParent();\n        parent.removeView(mCustomView);\n        mCustomView = null;\n        mCustomViewCallback.onCustomViewHidden();\n\n        // Show the content view.\n        engine.getView().setVisibility(View.VISIBLE);\n        engine.getView().requestFocus();\n    }\n\n    @Override\n    @Deprecated\n    public boolean isCustomViewShowing() {\n        return mCustomView != null;\n    }\n\n    @Override\n    @Deprecated\n    public void sendJavascript(String statement) {\n        nativeToJsMessageQueue.addJavaScript(statement);\n    }\n\n    @Override\n    public void sendPluginResult(PluginResult cr, String callbackId) {\n        nativeToJsMessageQueue.addPluginResult(cr, callbackId);\n    }\n\n    @Override\n    public PluginManager getPluginManager() {\n        return pluginManager;\n    }\n    @Override\n    public CordovaPreferences getPreferences() {\n        return preferences;\n    }\n    @Override\n    public ICordovaCookieManager getCookieManager() {\n        return engine.getCookieManager();\n    }\n    @Override\n    public CordovaResourceApi getResourceApi() {\n        return resourceApi;\n    }\n    @Override\n    public CordovaWebViewEngine getEngine() {\n        return engine;\n    }\n    @Override\n    public View getView() {\n        return engine.getView();\n    }\n    @Override\n    public Context getContext() {\n        return engine.getView().getContext();\n    }\n\n    private void sendJavascriptEvent(String event) {\n        if (appPlugin == null) {\n            appPlugin = (CoreAndroid)pluginManager.getPlugin(CoreAndroid.PLUGIN_NAME);\n        }\n\n        if (appPlugin == null) {\n            LOG.w(TAG, \"Unable to fire event without existing plugin\");\n            return;\n        }\n        appPlugin.fireJavascriptEvent(event);\n    }\n\n    @Override\n    public void setButtonPlumbedToJs(int keyCode, boolean override) {\n        switch (keyCode) {\n            case KeyEvent.KEYCODE_VOLUME_DOWN:\n            case KeyEvent.KEYCODE_VOLUME_UP:\n            case KeyEvent.KEYCODE_BACK:\n            case KeyEvent.KEYCODE_MENU:\n                // TODO: Why are search and menu buttons handled separately?\n                if (override) {\n                    boundKeyCodes.add(keyCode);\n                } else {\n                    boundKeyCodes.remove(keyCode);\n                }\n                return;\n            default:\n                throw new IllegalArgumentException(\"Unsupported keycode: \" + keyCode);\n        }\n    }\n\n    @Override\n    public boolean isButtonPlumbedToJs(int keyCode) {\n        return boundKeyCodes.contains(keyCode);\n    }\n\n    @Override\n    public Object postMessage(String id, Object data) {\n        return pluginManager.postMessage(id, data);\n    }\n\n    // Engine method proxies:\n    @Override\n    public String getUrl() {\n        return engine.getUrl();\n    }\n\n    @Override\n    public void stopLoading() {\n        // Clear timeout flag\n        loadUrlTimeout++;\n    }\n\n    @Override\n    public boolean canGoBack() {\n        return engine.canGoBack();\n    }\n\n    @Override\n    public void clearCache() {\n        engine.clearCache();\n    }\n\n    @Override\n    @Deprecated\n    public void clearCache(boolean b) {\n        engine.clearCache();\n    }\n\n    @Override\n    public void clearHistory() {\n        engine.clearHistory();\n    }\n\n    @Override\n    public boolean backHistory() {\n        return engine.goBack();\n    }\n\n    /////// LifeCycle methods ///////\n    @Override\n    public void onNewIntent(Intent intent) {\n        if (this.pluginManager != null) {\n            this.pluginManager.onNewIntent(intent);\n        }\n    }\n    @Override\n    public void handlePause(boolean keepRunning) {\n        if (!isInitialized()) {\n            return;\n        }\n        hasPausedEver = true;\n        pluginManager.onPause(keepRunning);\n        sendJavascriptEvent(\"pause\");\n\n        // If app doesn't want to run in background\n        if (!keepRunning) {\n            // Pause JavaScript timers. This affects all WebViews within the app!\n            engine.setPaused(true);\n        }\n    }\n    @Override\n    public void handleResume(boolean keepRunning) {\n        if (!isInitialized()) {\n            return;\n        }\n\n        // Resume JavaScript timers. This affects all WebViews within the app!\n        engine.setPaused(false);\n        this.pluginManager.onResume(keepRunning);\n\n        // In order to match the behavior of the other platforms, we only send onResume after an\n        // onPause has occurred. The resume event might still be sent if the Activity was killed\n        // while waiting for the result of an external Activity once the result is obtained\n        if (hasPausedEver) {\n            sendJavascriptEvent(\"resume\");\n        }\n    }\n    @Override\n    public void handleStart() {\n        if (!isInitialized()) {\n            return;\n        }\n        pluginManager.onStart();\n    }\n    @Override\n    public void handleStop() {\n        if (!isInitialized()) {\n            return;\n        }\n        pluginManager.onStop();\n    }\n    @Override\n    public void handleDestroy() {\n        if (!isInitialized()) {\n            return;\n        }\n        // Cancel pending timeout timer.\n        loadUrlTimeout++;\n\n        // Forward to plugins\n        this.pluginManager.onDestroy();\n\n        // TODO: about:blank is a bit special (and the default URL for new frames)\n        // We should use a blank data: url instead so it's more obvious\n        this.loadUrl(\"about:blank\");\n\n        // TODO: Should not destroy WebView until after about:blank is done loading.\n        engine.destroy();\n        hideCustomView();\n    }\n\n    protected class EngineClient implements CordovaWebViewEngine.Client {\n        @Override\n        public void clearLoadTimeoutTimer() {\n            loadUrlTimeout++;\n        }\n\n        @Override\n        public void onPageStarted(String newUrl) {\n            LOG.d(TAG, \"onPageDidNavigate(\" + newUrl + \")\");\n            boundKeyCodes.clear();\n            pluginManager.onReset();\n            pluginManager.postMessage(\"onPageStarted\", newUrl);\n        }\n\n        @Override\n        public void onReceivedError(int errorCode, String description, String failingUrl) {\n            clearLoadTimeoutTimer();\n            JSONObject data = new JSONObject();\n            try {\n                data.put(\"errorCode\", errorCode);\n                data.put(\"description\", description);\n                data.put(\"url\", failingUrl);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n            pluginManager.postMessage(\"onReceivedError\", data);\n        }\n\n        @Override\n        public void onPageFinishedLoading(String url) {\n            LOG.d(TAG, \"onPageFinished(\" + url + \")\");\n\n            clearLoadTimeoutTimer();\n\n            // Broadcast message that page has loaded\n            pluginManager.postMessage(\"onPageFinished\", url);\n\n            // Make app visible after 2 sec in case there was a JS error and Cordova JS never initialized correctly\n            if (engine.getView().getVisibility() != View.VISIBLE) {\n                Thread t = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        try {\n                            Thread.sleep(2000);\n                            if (cordova.getActivity() != null) {\n                                cordova.getActivity().runOnUiThread(new Runnable() {\n                                    @Override\n                                    public void run() {\n                                        pluginManager.postMessage(\"spinner\", \"stop\");\n                                    }\n                                });\n                            } else {\n                                LOG.d(TAG, \"Cordova activity does not exist.\");\n                            }\n                        } catch (InterruptedException e) {\n                        }\n                    }\n                });\n                t.start();\n            }\n\n            // Shutdown if blank loaded\n            if (url.equals(\"about:blank\")) {\n                pluginManager.postMessage(\"exit\", null);\n            }\n        }\n\n        @Override\n        public Boolean onDispatchKeyEvent(KeyEvent event) {\n            int keyCode = event.getKeyCode();\n            boolean isBackButton = keyCode == KeyEvent.KEYCODE_BACK;\n            if (event.getAction() == KeyEvent.ACTION_DOWN) {\n                if (isBackButton && mCustomView != null) {\n                    return true;\n                } else if (boundKeyCodes.contains(keyCode)) {\n                    return true;\n                } else if (isBackButton) {\n                    return engine.canGoBack();\n                }\n            } else if (event.getAction() == KeyEvent.ACTION_UP) {\n                if (isBackButton && mCustomView != null) {\n                    hideCustomView();\n                    return true;\n                } else if (boundKeyCodes.contains(keyCode)) {\n                    String eventName = null;\n                    switch (keyCode) {\n                        case KeyEvent.KEYCODE_VOLUME_DOWN:\n                            eventName = \"volumedownbutton\";\n                            break;\n                        case KeyEvent.KEYCODE_VOLUME_UP:\n                            eventName = \"volumeupbutton\";\n                            break;\n                        case KeyEvent.KEYCODE_SEARCH:\n                            eventName = \"searchbutton\";\n                            break;\n                        case KeyEvent.KEYCODE_MENU:\n                            eventName = \"menubutton\";\n                            break;\n                        case KeyEvent.KEYCODE_BACK:\n                            eventName = \"backbutton\";\n                            break;\n                    }\n                    if (eventName != null) {\n                        sendJavascriptEvent(eventName);\n                        return true;\n                    }\n                } else if (isBackButton) {\n                    return engine.goBack();\n                }\n            }\n            return null;\n        }\n\n        @Override\n        public boolean onNavigationAttempt(String url) {\n            // Give plugins the chance to handle the url\n            if (pluginManager.onOverrideUrlLoading(url)) {\n                return true;\n            } else if (pluginManager.shouldAllowNavigation(url)) {\n                return false;\n            } else if (pluginManager.shouldOpenExternalUrl(url)) {\n                showWebPage(url, true, false, null);\n                return true;\n            }\n            LOG.w(TAG, \"Blocked (possibly sub-frame) navigation to non-allowed URL: \" + url);\n            return true;\n        }\n    }\n}\n","size_bytes":23763},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/CoreAndroid.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport org.apache.cordova.BuildHelper;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.telephony.TelephonyManager;\nimport android.view.KeyEvent;\n\nimport java.util.HashMap;\n\n/**\n * This class exposes methods in Cordova that can be called from JavaScript.\n */\npublic class CoreAndroid extends CordovaPlugin {\n\n    public static final String PLUGIN_NAME = \"CoreAndroid\";\n    protected static final String TAG = \"CordovaApp\";\n    private BroadcastReceiver telephonyReceiver;\n    private CallbackContext messageChannel;\n    private PluginResult pendingResume;\n    private PluginResult pendingPause;\n    private final Object messageChannelLock = new Object();\n\n    /**\n     * Send an event to be fired on the Javascript side.\n     *\n     * @param action The name of the event to be fired\n     */\n    public void fireJavascriptEvent(String action) {\n        sendEventMessage(action);\n    }\n\n    /**\n     * Sets the context of the Command. This can then be used to do things like\n     * get file paths associated with the Activity.\n     */\n    @Override\n    public void pluginInitialize() {\n        this.initTelephonyReceiver();\n    }\n\n    /**\n     * Executes the request and returns PluginResult.\n     *\n     * @param action            The action to execute.\n     * @param args              JSONArray of arguments for the plugin.\n     * @param callbackContext   The callback context from which we were invoked.\n     *\n     * @return                  A PluginResult object with a status and message.\n     */\n    @Override\n    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n        PluginResult.Status status = PluginResult.Status.OK;\n        String result = \"\";\n\n        try {\n            if (action.equals(\"clearCache\")) {\n                this.clearCache();\n            }\n            else if (action.equals(\"show\")) {\n                // This gets called from JavaScript onCordovaReady to show the WebView.\n                // I recommend we change the name of the Message as spinner/stop is not\n                // indicative of what this actually does (shows the WebView).\n                cordova.getActivity().runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        webView.getPluginManager().postMessage(\"spinner\", \"stop\");\n                    }\n                });\n            }\n            else if (action.equals(\"loadUrl\")) {\n                this.loadUrl(args.getString(0), args.optJSONObject(1));\n            }\n            else if (action.equals(\"cancelLoadUrl\")) {\n                //this.cancelLoadUrl();\n            }\n            else if (action.equals(\"clearHistory\")) {\n                this.clearHistory();\n            }\n            else if (action.equals(\"backHistory\")) {\n                this.backHistory();\n            }\n            else if (action.equals(\"overrideButton\")) {\n                this.overrideButton(args.getString(0), args.getBoolean(1));\n            }\n            else if (action.equals(\"overrideBackbutton\")) {\n                this.overrideBackbutton(args.getBoolean(0));\n            }\n            else if (action.equals(\"exitApp\")) {\n                this.exitApp();\n            }\n\t\t\telse if (action.equals(\"messageChannel\")) {\n                synchronized(messageChannelLock) {\n                    messageChannel = callbackContext;\n                    if (pendingPause != null) {\n                        sendEventMessage(pendingPause);\n                        pendingPause = null;\n                    }\n                    if (pendingResume != null) {\n                        sendEventMessage(pendingResume);\n                        pendingResume = null;\n                    }\n                }\n                return true;\n            }\n\n            callbackContext.sendPluginResult(new PluginResult(status, result));\n            return true;\n        } catch (JSONException e) {\n            callbackContext.sendPluginResult(new PluginResult(PluginResult.Status.JSON_EXCEPTION));\n            return false;\n        }\n    }\n\n    //--------------------------------------------------------------------------\n    // LOCAL METHODS\n    //--------------------------------------------------------------------------\n\n    /**\n     * Clear the resource cache.\n     */\n    public void clearCache() {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                webView.clearCache();\n            }\n        });\n    }\n\n    /**\n     * Load the url into the WebView.\n     *\n     * @param url\n     * @param props\t\t\tProperties that can be passed in to the Cordova activity (i.e. loadingDialog, wait, ...)\n     * @throws JSONException\n     */\n    public void loadUrl(String url, JSONObject props) throws JSONException {\n        LOG.d(\"App\", \"App.loadUrl(\"+url+\",\"+props+\")\");\n        int wait = 0;\n        boolean openExternal = false;\n        boolean clearHistory = false;\n\n        // If there are properties, then set them on the Activity\n        HashMap<String, Object> params = new HashMap<String, Object>();\n        if (props != null) {\n            JSONArray keys = props.names();\n            for (int i = 0; i < keys.length(); i++) {\n                String key = keys.getString(i);\n                if (key.equals(\"wait\")) {\n                    wait = props.getInt(key);\n                }\n                else if (key.equalsIgnoreCase(\"openexternal\")) {\n                    openExternal = props.getBoolean(key);\n                }\n                else if (key.equalsIgnoreCase(\"clearhistory\")) {\n                    clearHistory = props.getBoolean(key);\n                }\n                else {\n                    Object value = props.get(key);\n                    if (value == null) {\n\n                    }\n                    else if (value.getClass().equals(String.class)) {\n                        params.put(key, (String)value);\n                    }\n                    else if (value.getClass().equals(Boolean.class)) {\n                        params.put(key, (Boolean)value);\n                    }\n                    else if (value.getClass().equals(Integer.class)) {\n                        params.put(key, (Integer)value);\n                    }\n                }\n            }\n        }\n\n        // If wait property, then delay loading\n\n        if (wait > 0) {\n            try {\n                synchronized(this) {\n                    this.wait(wait);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        this.webView.showWebPage(url, openExternal, clearHistory, params);\n    }\n\n    /**\n     * Clear page history for the app.\n     */\n    public void clearHistory() {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                webView.clearHistory();\n            }\n        });\n    }\n\n    /**\n     * Go to previous page displayed.\n     * This is the same as pressing the backbutton on Android device.\n     */\n    public void backHistory() {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                webView.backHistory();\n            }\n        });\n    }\n\n    /**\n     * Override the default behavior of the Android back button.\n     * If overridden, when the back button is pressed, the \"backKeyDown\" JavaScript event will be fired.\n     *\n     * @param override\t\tT=override, F=cancel override\n     */\n    public void overrideBackbutton(boolean override) {\n        LOG.i(\"App\", \"WARNING: Back Button Default Behavior will be overridden.  The backbutton event will be fired!\");\n        webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_BACK, override);\n    }\n\n    /**\n     * Override the default behavior of the Android volume buttons.\n     * If overridden, when the volume button is pressed, the \"volume[up|down]button\" JavaScript event will be fired.\n     *\n     * @param button        volumeup, volumedown\n     * @param override      T=override, F=cancel override\n     */\n    public void overrideButton(String button, boolean override) {\n        LOG.i(\"App\", \"WARNING: Volume Button Default Behavior will be overridden.  The volume event will be fired!\");\n        if (button.equals(\"volumeup\")) {\n            webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_UP, override);\n        }\n        else if (button.equals(\"volumedown\")) {\n            webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_VOLUME_DOWN, override);\n        }\n        else if (button.equals(\"menubutton\")) {\n            webView.setButtonPlumbedToJs(KeyEvent.KEYCODE_MENU, override);\n        }\n    }\n\n    /**\n     * Return whether the Android back button is overridden by the user.\n     *\n     * @return boolean\n     */\n    public boolean isBackbuttonOverridden() {\n        return webView.isButtonPlumbedToJs(KeyEvent.KEYCODE_BACK);\n    }\n\n    /**\n     * Exit the Android application.\n     */\n    public void exitApp() {\n        this.webView.getPluginManager().postMessage(\"exit\", null);\n    }\n\n\n    /**\n     * Listen for telephony events: RINGING, OFFHOOK and IDLE\n     * Send these events to all plugins using\n     *      CordovaActivity.onMessage(\"telephone\", \"ringing\" | \"offhook\" | \"idle\")\n     */\n    private void initTelephonyReceiver() {\n        IntentFilter intentFilter = new IntentFilter();\n        intentFilter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);\n        //final CordovaInterface mycordova = this.cordova;\n        this.telephonyReceiver = new BroadcastReceiver() {\n\n            @Override\n            public void onReceive(Context context, Intent intent) {\n\n                // If state has changed\n                if ((intent != null) && intent.getAction().equals(TelephonyManager.ACTION_PHONE_STATE_CHANGED)) {\n                    if (intent.hasExtra(TelephonyManager.EXTRA_STATE)) {\n                        String extraData = intent.getStringExtra(TelephonyManager.EXTRA_STATE);\n                        if (extraData.equals(TelephonyManager.EXTRA_STATE_RINGING)) {\n                            LOG.i(TAG, \"Telephone RINGING\");\n                            webView.getPluginManager().postMessage(\"telephone\", \"ringing\");\n                        }\n                        else if (extraData.equals(TelephonyManager.EXTRA_STATE_OFFHOOK)) {\n                            LOG.i(TAG, \"Telephone OFFHOOK\");\n                            webView.getPluginManager().postMessage(\"telephone\", \"offhook\");\n                        }\n                        else if (extraData.equals(TelephonyManager.EXTRA_STATE_IDLE)) {\n                            LOG.i(TAG, \"Telephone IDLE\");\n                            webView.getPluginManager().postMessage(\"telephone\", \"idle\");\n                        }\n                    }\n                }\n            }\n        };\n\n        // Register the receiver\n        webView.getContext().registerReceiver(this.telephonyReceiver, intentFilter);\n    }\n\n    private void sendEventMessage(String action) {\n        JSONObject obj = new JSONObject();\n        try {\n            obj.put(\"action\", action);\n        } catch (JSONException e) {\n            LOG.e(TAG, \"Failed to create event message\", e);\n        }\n        PluginResult result = new PluginResult(PluginResult.Status.OK, obj);\n\n        if (messageChannel == null) {\n            LOG.i(TAG, \"Request to send event before messageChannel initialised: \" + action);\n            if (\"pause\".equals(action)) {\n                pendingPause = result;\n            } else if (\"resume\".equals(action)) {\n                // When starting normally onPause then onResume is called\n                pendingPause = null;\n            }\n        } else {\n            sendEventMessage(result);\n        }\n    }\n\n    private void sendEventMessage(PluginResult payload) {\n        payload.setKeepCallback(true);\n        if (messageChannel != null) {\n            messageChannel.sendPluginResult(payload);\n        }\n    }\n\n    /**\n     * Unregister the receiver\n     */\n    @Override\n    public void onDestroy()\n    {\n        webView.getContext().unregisterReceiver(this.telephonyReceiver);\n    }\n\n    /**\n     * Used to send the resume event in the case that the Activity is destroyed by the OS\n     *\n     * @param resumeEvent PluginResult containing the payload for the resume event to be fired\n     */\n    public void sendResumeEvent(PluginResult resumeEvent) {\n        // This operation must be synchronized because plugin results that trigger resume\n        // events can be processed asynchronously\n        synchronized(messageChannelLock) {\n            if (messageChannel != null) {\n                sendEventMessage(resumeEvent);\n            } else {\n                // Might get called before the page loads, so we need to store it until the\n                // messageChannel gets created\n                this.pendingResume = resumeEvent;\n            }\n        }\n    }\n\n    /*\n     * This needs to be implemented if you wish to use the Camera Plugin or other plugins\n     * that read the Build Configuration.\n     *\n     * Thanks to Phil@Medtronic and Graham Borland for finding the answer and posting it to\n     * StackOverflow.  This is annoying as hell!\n     *\n     * @deprecated Use {@link BuildHelper#getBuildConfigValue} instead.\n     */\n    @Deprecated\n    public static Object getBuildConfigValue(Context ctx, String key)\n    {\n        LOG.w(TAG, \"CoreAndroid.getBuildConfigValue is deprecated and will be removed in a future release. Use BuildHelper.getBuildConfigValue instead.\");\n        return BuildHelper.getBuildConfigValue(ctx, key);\n    }\n}\n","size_bytes":14735},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/ExposedJsApi.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport org.json.JSONException;\n\n/*\n * Any exposed Javascript API MUST implement these three things!\n */\npublic interface ExposedJsApi {\n    public String exec(int bridgeSecret, String service, String action, String callbackId, String arguments) throws JSONException, IllegalAccessException;\n    public void setNativeToJsBridgeMode(int bridgeSecret, int value) throws IllegalAccessException;\n    public String retrieveJsMessages(int bridgeSecret, boolean fromOnlineEvent) throws IllegalAccessException;\n}\n","size_bytes":1393},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/ICordovaClientCertRequest.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport java.security.Principal;\nimport java.security.PrivateKey;\nimport java.security.cert.X509Certificate;\n\n/**\n * Specifies interface for handling certificate requests.\n */\npublic interface ICordovaClientCertRequest {\n    /**\n     * Cancel this request\n     */\n    public void cancel();\n\n    /**\n     * @return the host name of the server requesting the certificate.\n     */\n    public String getHost();\n\n    /**\n     * @return the acceptable types of asymmetric keys (can be null).\n     */\n    public String[] getKeyTypes();\n\n    /**\n     * @return the port number of the server requesting the certificate.\n     */\n    public int getPort();\n\n    /**\n     * @return the acceptable certificate issuers for the certificate matching the private key (can be null).\n     */\n    public Principal[] getPrincipals();\n\n    /**\n     * Ignore the request for now. Do not remember user's choice.\n     */\n    public void ignore();\n\n    /**\n     * Proceed with the specified private key and client certificate chain. Remember the user's positive choice and use it for future requests.\n     *\n     * @param privateKey The privateKey\n     * @param chain The certificate chain\n     */\n    public void proceed(PrivateKey privateKey, X509Certificate[] chain);\n}","size_bytes":2132},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/ICordovaCookieManager.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\npublic interface ICordovaCookieManager {\n\n    public void setCookiesEnabled(boolean accept);\n\n    public void setCookie(final String url, final String value);\n\n    public String getCookie(final String url);\n\n    public void clearCookies();\n\n    public void flush();\n};\n","size_bytes":1158},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/ICordovaHttpAuthHandler.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\n/**\n * Specifies interface for HTTP auth handler object which is used to handle auth requests and\n * specifying user credentials.\n */\n public interface ICordovaHttpAuthHandler {\n    /**\n     * Instructs the WebView to cancel the authentication request.\n     */\n    public void cancel ();\n\n    /**\n     * Instructs the WebView to proceed with the authentication with the given credentials.\n     *\n     * @param username The user name\n     * @param password The password\n     */\n    public void proceed (String username, String password);\n}","size_bytes":1426},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/LOG.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport android.util.Log;\n\n/**\n * Log to Android logging system.\n *\n * <p>Log message can be a string or a printf formatted string with arguments.\n * See <a href=\"http://developer.android.com/reference/java/util/Formatter.html\">Formatter</a></p>\n */\npublic class LOG {\n\n    public static final int VERBOSE = Log.VERBOSE;\n    public static final int DEBUG = Log.DEBUG;\n    public static final int INFO = Log.INFO;\n    public static final int WARN = Log.WARN;\n    public static final int ERROR = Log.ERROR;\n\n    // Current log level\n    public static int LOGLEVEL = Log.ERROR;\n\n    /**\n     * Set the current log level.\n     *\n     * @param logLevel\n     */\n    public static void setLogLevel(int logLevel) {\n        LOGLEVEL = logLevel;\n        Log.i(\"CordovaLog\", \"Changing log level to \" + logLevel);\n    }\n\n    /**\n     * Set the current log level.\n     *\n     * @param logLevel\n     */\n    public static void setLogLevel(String logLevel) {\n        if (\"VERBOSE\".equals(logLevel)) LOGLEVEL = VERBOSE;\n        else if (\"DEBUG\".equals(logLevel)) LOGLEVEL = DEBUG;\n        else if (\"INFO\".equals(logLevel)) LOGLEVEL = INFO;\n        else if (\"WARN\".equals(logLevel)) LOGLEVEL = WARN;\n        else if (\"ERROR\".equals(logLevel)) LOGLEVEL = ERROR;\n        Log.i(\"CordovaLog\", \"Changing log level to \" + logLevel + \"(\" + LOGLEVEL + \")\");\n    }\n\n    /**\n     * Determine if log level will be logged\n     *\n     * @param logLevel\n     * @return true if the parameter passed in is greater than or equal to the current log level\n     */\n    public static boolean isLoggable(int logLevel) {\n        return (logLevel >= LOGLEVEL);\n    }\n\n    /**\n     * Verbose log message.\n     *\n     * @param tag\n     * @param s\n     */\n    public static void v(String tag, String s) {\n        if (LOG.VERBOSE >= LOGLEVEL) Log.v(tag, s);\n    }\n\n    /**\n     * Debug log message.\n     *\n     * @param tag\n     * @param s\n     */\n    public static void d(String tag, String s) {\n        if (LOG.DEBUG >= LOGLEVEL) Log.d(tag, s);\n    }\n\n    /**\n     * Info log message.\n     *\n     * @param tag\n     * @param s\n     */\n    public static void i(String tag, String s) {\n        if (LOG.INFO >= LOGLEVEL) Log.i(tag, s);\n    }\n\n    /**\n     * Warning log message.\n     *\n     * @param tag\n     * @param s\n     */\n    public static void w(String tag, String s) {\n        if (LOG.WARN >= LOGLEVEL) Log.w(tag, s);\n    }\n\n    /**\n     * Error log message.\n     *\n     * @param tag\n     * @param s\n     */\n    public static void e(String tag, String s) {\n        if (LOG.ERROR >= LOGLEVEL) Log.e(tag, s);\n    }\n\n    /**\n     * Verbose log message.\n     *\n     * @param tag\n     * @param s\n     * @param e\n     */\n    public static void v(String tag, String s, Throwable e) {\n        if (LOG.VERBOSE >= LOGLEVEL) Log.v(tag, s, e);\n    }\n\n    /**\n     * Debug log message.\n     *\n     * @param tag\n     * @param s\n     * @param e\n     */\n    public static void d(String tag, String s, Throwable e) {\n        if (LOG.DEBUG >= LOGLEVEL) Log.d(tag, s, e);\n    }\n\n    /**\n     * Info log message.\n     *\n     * @param tag\n     * @param s\n     * @param e\n     */\n    public static void i(String tag, String s, Throwable e) {\n        if (LOG.INFO >= LOGLEVEL) Log.i(tag, s, e);\n    }\n\n    /**\n     * Warning log message.\n     *\n     * @param tag\n     * @param e\n     */\n    public static void w(String tag, Throwable e) {\n        if (LOG.WARN >= LOGLEVEL) Log.w(tag, e);\n    }\n\n    /**\n     * Warning log message.\n     *\n     * @param tag\n     * @param s\n     * @param e\n     */\n    public static void w(String tag, String s, Throwable e) {\n        if (LOG.WARN >= LOGLEVEL) Log.w(tag, s, e);\n    }\n\n    /**\n     * Error log message.\n     *\n     * @param tag\n     * @param s\n     * @param e\n     */\n    public static void e(String tag, String s, Throwable e) {\n        if (LOG.ERROR >= LOGLEVEL) Log.e(tag, s, e);\n    }\n\n    /**\n     * Verbose log message with printf formatting.\n     *\n     * @param tag\n     * @param s\n     * @param args\n     */\n    public static void v(String tag, String s, Object... args) {\n        if (LOG.VERBOSE >= LOGLEVEL) Log.v(tag, String.format(s, args));\n    }\n\n    /**\n     * Debug log message with printf formatting.\n     *\n     * @param tag\n     * @param s\n     * @param args\n     */\n    public static void d(String tag, String s, Object... args) {\n        if (LOG.DEBUG >= LOGLEVEL) Log.d(tag, String.format(s, args));\n    }\n\n    /**\n     * Info log message with printf formatting.\n     *\n     * @param tag\n     * @param s\n     * @param args\n     */\n    public static void i(String tag, String s, Object... args) {\n        if (LOG.INFO >= LOGLEVEL) Log.i(tag, String.format(s, args));\n    }\n\n    /**\n     * Warning log message with printf formatting.\n     *\n     * @param tag\n     * @param s\n     * @param args\n     */\n    public static void w(String tag, String s, Object... args) {\n        if (LOG.WARN >= LOGLEVEL) Log.w(tag, String.format(s, args));\n    }\n\n    /**\n     * Error log message with printf formatting.\n     *\n     * @param tag\n     * @param s\n     * @param args\n     */\n    public static void e(String tag, String s, Object... args) {\n        if (LOG.ERROR >= LOGLEVEL) Log.e(tag, String.format(s, args));\n    }\n\n}\n","size_bytes":6107},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/NativeToJsMessageQueue.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\n/**\n * Holds the list of messages to be sent to the WebView.\n */\npublic class NativeToJsMessageQueue {\n    private static final String LOG_TAG = \"JsMessageQueue\";\n\n    // Set this to true to force plugin results to be encoding as\n    // JS instead of the custom format (useful for benchmarking).\n    // Doesn't work for multipart messages.\n    private static final boolean FORCE_ENCODE_USING_EVAL = false;\n\n    // Disable sending back native->JS messages during an exec() when the active\n    // exec() is asynchronous. Set this to true when running bridge benchmarks.\n    static final boolean DISABLE_EXEC_CHAINING = false;\n\n    // A hopefully reasonable upper limit of how much combined payload data\n    // to send to the JavaScript in one shot.\n    // This currently only chops up on message boundaries.\n    // It may be useful to split and reassemble response messages someday.\n    private static int COMBINED_RESPONSE_CUTOFF = 16 * 1024 * 1024;\n\n    /**\n     * When true, the active listener is not fired upon enqueue. When set to false,\n     * the active listener will be fired if the queue is non-empty.\n     */\n    private boolean paused;\n\n    /**\n     * The list of JavaScript statements to be sent to JavaScript.\n     */\n    private final LinkedList<JsMessage> queue = new LinkedList<JsMessage>();\n\n    /**\n     * The array of listeners that can be used to send messages to JS.\n     */\n    private ArrayList<BridgeMode> bridgeModes = new ArrayList<BridgeMode>();\n\n    /**\n     * When null, the bridge is disabled. This occurs during page transitions.\n     * When disabled, all callbacks are dropped since they are assumed to be\n     * relevant to the previous page.\n     */\n    private BridgeMode activeBridgeMode;\n\n    public void addBridgeMode(BridgeMode bridgeMode) {\n        bridgeModes.add(bridgeMode);\n    }\n\n    public boolean isBridgeEnabled() {\n        return activeBridgeMode != null;\n    }\n\n    public boolean isEmpty() {\n        return queue.isEmpty();\n    }\n\n    /**\n     * Changes the bridge mode.\n     */\n    public void setBridgeMode(int value) {\n        if (value < -1 || value >= bridgeModes.size()) {\n            LOG.d(LOG_TAG, \"Invalid NativeToJsBridgeMode: \" + value);\n        } else {\n            BridgeMode newMode = value < 0 ? null : bridgeModes.get(value);\n            if (newMode != activeBridgeMode) {\n                LOG.d(LOG_TAG, \"Set native->JS mode to \" + (newMode == null ? \"null\" : newMode.getClass().getSimpleName()));\n                synchronized (this) {\n                    activeBridgeMode = newMode;\n                    if (newMode != null) {\n                        newMode.reset();\n                        if (!paused && !queue.isEmpty()) {\n                            newMode.onNativeToJsMessageAvailable(this);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Clears all messages and resets to the default bridge mode.\n     */\n    public void reset() {\n        synchronized (this) {\n            queue.clear();\n            setBridgeMode(-1);\n        }\n    }\n\n    private int calculatePackedMessageLength(JsMessage message) {\n        int messageLen = message.calculateEncodedLength();\n        String messageLenStr = String.valueOf(messageLen);\n        return messageLenStr.length() + messageLen + 1;\n    }\n\n    private void packMessage(JsMessage message, StringBuilder sb) {\n        int len = message.calculateEncodedLength();\n        sb.append(len)\n          .append(' ');\n        message.encodeAsMessage(sb);\n    }\n\n    /**\n     * Combines as many messages as possible, without exceeding\n     * COMBINED_RESPONSE_CUTOFF in case of multiple response messages.\n     *\n     * @return a string of queued messages combined or null if the queue is empty.\n     */\n    public String popAndEncode(boolean fromOnlineEvent) {\n        synchronized (this) {\n            if (activeBridgeMode == null) {\n                return null;\n            }\n            activeBridgeMode.notifyOfFlush(this, fromOnlineEvent);\n            if (queue.isEmpty()) {\n                return null;\n            }\n            int totalPayloadLen = 0;\n            int numMessagesToSend = 0;\n            for (JsMessage message : queue) {\n                int messageSize = calculatePackedMessageLength(message);\n                if (numMessagesToSend > 0 &&\n                    COMBINED_RESPONSE_CUTOFF > 0 &&\n                    totalPayloadLen + messageSize > COMBINED_RESPONSE_CUTOFF\n                   ) {\n                    break;\n                }\n                totalPayloadLen += messageSize;\n                numMessagesToSend += 1;\n            }\n\n            StringBuilder sb = new StringBuilder(totalPayloadLen);\n            for (int i = 0; i < numMessagesToSend; ++i) {\n                JsMessage message = queue.removeFirst();\n                packMessage(message, sb);\n            }\n\n            if (!queue.isEmpty()) {\n                // Attach a char to indicate that there are more messages pending.\n                sb.append('*');\n            }\n            String ret = sb.toString();\n            return ret;\n        }\n    }\n\n    /**\n     * Same as popAndEncode(), except encodes in a form that can be executed as JS.\n     */\n    public String popAndEncodeAsJs() {\n        synchronized (this) {\n            int length = queue.size();\n            if (length == 0) {\n                return null;\n            }\n            int totalPayloadLen = 0;\n            int numMessagesToSend = 0;\n            for (JsMessage message : queue) {\n                int messageSize = message.calculateEncodedLength() + 50; // overestimate.\n                if (numMessagesToSend > 0 &&\n                    COMBINED_RESPONSE_CUTOFF > 0 &&\n                    totalPayloadLen + messageSize > COMBINED_RESPONSE_CUTOFF\n                   ) {\n                    break;\n                }\n                totalPayloadLen += messageSize;\n                numMessagesToSend += 1;\n            }\n            boolean willSendAllMessages = numMessagesToSend == queue.size();\n            StringBuilder sb = new StringBuilder(totalPayloadLen + (willSendAllMessages ? 0 : 100));\n            // Wrap each statement in a try/finally so that if one throws it does\n            // not affect the next.\n            for (int i = 0; i < numMessagesToSend; ++i) {\n                JsMessage message = queue.removeFirst();\n                if (willSendAllMessages && (i + 1 == numMessagesToSend)) {\n                    message.encodeAsJsMessage(sb);\n                } else {\n                    sb.append(\"try{\");\n                    message.encodeAsJsMessage(sb);\n                    sb.append(\"}finally{\");\n                }\n            }\n            if (!willSendAllMessages) {\n                sb.append(\"window.setTimeout(function(){cordova.require('cordova/plugin/android/polling').pollOnce();},0);\");\n            }\n            for (int i = willSendAllMessages ? 1 : 0; i < numMessagesToSend; ++i) {\n                sb.append('}');\n            }\n            String ret = sb.toString();\n            return ret;\n        }\n    }\n\n    /**\n     * Add a JavaScript statement to the list.\n     */\n    public void addJavaScript(String statement) {\n        enqueueMessage(new JsMessage(statement));\n    }\n\n    /**\n     * Add a JavaScript statement to the list.\n     */\n    public void addPluginResult(PluginResult result, String callbackId) {\n        if (callbackId == null) {\n            LOG.e(LOG_TAG, \"Got plugin result with no callbackId\", new Throwable());\n            return;\n        }\n        // Don't send anything if there is no result and there is no need to\n        // clear the callbacks.\n        boolean noResult = result.getStatus() == PluginResult.Status.NO_RESULT.ordinal();\n        boolean keepCallback = result.getKeepCallback();\n        if (noResult && keepCallback) {\n            return;\n        }\n        JsMessage message = new JsMessage(result, callbackId);\n        if (FORCE_ENCODE_USING_EVAL) {\n            StringBuilder sb = new StringBuilder(message.calculateEncodedLength() + 50);\n            message.encodeAsJsMessage(sb);\n            message = new JsMessage(sb.toString());\n        }\n\n        enqueueMessage(message);\n    }\n\n    private void enqueueMessage(JsMessage message) {\n        synchronized (this) {\n            if (activeBridgeMode == null) {\n                LOG.d(LOG_TAG, \"Dropping Native->JS message due to disabled bridge\");\n                return;\n            }\n            queue.add(message);\n            if (!paused) {\n                activeBridgeMode.onNativeToJsMessageAvailable(this);\n            }\n        }\n    }\n\n    public void setPaused(boolean value) {\n        if (paused && value) {\n            // This should never happen. If a use-case for it comes up, we should\n            // change pause to be a counter.\n            LOG.e(LOG_TAG, \"nested call to setPaused detected.\", new Throwable());\n        }\n        paused = value;\n        if (!value) {\n            synchronized (this) {\n                if (!queue.isEmpty() && activeBridgeMode != null) {\n                    activeBridgeMode.onNativeToJsMessageAvailable(this);\n                }\n            }\n        }\n    }\n\n    public static abstract class BridgeMode {\n        public abstract void onNativeToJsMessageAvailable(NativeToJsMessageQueue queue);\n        public void notifyOfFlush(NativeToJsMessageQueue queue, boolean fromOnlineEvent) {}\n        public void reset() {}\n    }\n\n    /** Uses JS polls for messages on a timer.. */\n    public static class NoOpBridgeMode extends BridgeMode {\n        @Override public void onNativeToJsMessageAvailable(NativeToJsMessageQueue queue) {\n        }\n    }\n\n    /** Uses webView.loadUrl(\"javascript:\") to execute messages. */\n    public static class LoadUrlBridgeMode extends BridgeMode {\n        private final CordovaWebViewEngine engine;\n        private final CordovaInterface cordova;\n\n        public LoadUrlBridgeMode(CordovaWebViewEngine engine, CordovaInterface cordova) {\n            this.engine = engine;\n            this.cordova = cordova;\n        }\n\n        @Override\n        public void onNativeToJsMessageAvailable(final NativeToJsMessageQueue queue) {\n            cordova.getActivity().runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    String js = queue.popAndEncodeAsJs();\n                    if (js != null) {\n                        engine.loadUrl(\"javascript:\" + js, false);\n                    }\n                }\n            });\n        }\n    }\n\n    /** Uses online/offline events to tell the JS when to poll for messages. */\n    public static class OnlineEventsBridgeMode extends BridgeMode {\n        private final OnlineEventsBridgeModeDelegate delegate;\n        private boolean online;\n        private boolean ignoreNextFlush;\n\n        public interface OnlineEventsBridgeModeDelegate {\n            void setNetworkAvailable(boolean value);\n            void runOnUiThread(Runnable r);\n        }\n\n        public OnlineEventsBridgeMode(OnlineEventsBridgeModeDelegate delegate) {\n            this.delegate = delegate;\n        }\n\n        @Override\n        public void reset() {\n            delegate.runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    online = false;\n                    // If the following call triggers a notifyOfFlush, then ignore it.\n                    ignoreNextFlush = true;\n                    delegate.setNetworkAvailable(true);\n                }\n            });\n        }\n\n        @Override\n        public void onNativeToJsMessageAvailable(final NativeToJsMessageQueue queue) {\n            delegate.runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    if (!queue.isEmpty()) {\n                        ignoreNextFlush = false;\n                        delegate.setNetworkAvailable(online);\n                    }\n                }\n            });\n        }\n        // Track when online/offline events are fired so that we don't fire excess events.\n        @Override\n        public void notifyOfFlush(final NativeToJsMessageQueue queue, boolean fromOnlineEvent) {\n            if (fromOnlineEvent && !ignoreNextFlush) {\n                online = !online;\n            }\n        }\n    }\n\n    /** Uses webView.evaluateJavascript to execute messages. */\n    public static class EvalBridgeMode extends BridgeMode {\n        private final CordovaWebViewEngine engine;\n        private final CordovaInterface cordova;\n\n        public EvalBridgeMode(CordovaWebViewEngine engine, CordovaInterface cordova) {\n            this.engine = engine;\n            this.cordova = cordova;\n        }\n\n        @Override\n        public void onNativeToJsMessageAvailable(final NativeToJsMessageQueue queue) {\n            cordova.getActivity().runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    String js = queue.popAndEncodeAsJs();\n                    if (js != null) {\n                        engine.evaluateJavascript(js, null);\n                    }\n                }\n            });\n        }\n    }\n\n\n\n    private static class JsMessage {\n        final String jsPayloadOrCallbackId;\n        final PluginResult pluginResult;\n        JsMessage(String js) {\n            if (js == null) {\n                throw new NullPointerException();\n            }\n            jsPayloadOrCallbackId = js;\n            pluginResult = null;\n        }\n        JsMessage(PluginResult pluginResult, String callbackId) {\n            if (callbackId == null || pluginResult == null) {\n                throw new NullPointerException();\n            }\n            jsPayloadOrCallbackId = callbackId;\n            this.pluginResult = pluginResult;\n        }\n\n        static int calculateEncodedLengthHelper(PluginResult pluginResult) {\n            switch (pluginResult.getMessageType()) {\n                case PluginResult.MESSAGE_TYPE_BOOLEAN: // f or t\n                case PluginResult.MESSAGE_TYPE_NULL: // N\n                    return 1;\n                case PluginResult.MESSAGE_TYPE_NUMBER: // n\n                    return 1 + pluginResult.getMessage().length();\n                case PluginResult.MESSAGE_TYPE_STRING: // s\n                    return 1 + pluginResult.getStrMessage().length();\n                case PluginResult.MESSAGE_TYPE_BINARYSTRING:\n                    return 1 + pluginResult.getMessage().length();\n                case PluginResult.MESSAGE_TYPE_ARRAYBUFFER:\n                    return 1 + pluginResult.getMessage().length();\n                case PluginResult.MESSAGE_TYPE_MULTIPART:\n                    int ret = 1;\n                    for (int i = 0; i < pluginResult.getMultipartMessagesSize(); i++) {\n                        int length = calculateEncodedLengthHelper(pluginResult.getMultipartMessage(i));\n                        int argLength = String.valueOf(length).length();\n                        ret += argLength + 1 + length;\n                    }\n                    return ret;\n                case PluginResult.MESSAGE_TYPE_JSON:\n                default:\n                    return pluginResult.getMessage().length();\n            }\n        }\n\n        int calculateEncodedLength() {\n            if (pluginResult == null) {\n                return jsPayloadOrCallbackId.length() + 1;\n            }\n            int statusLen = String.valueOf(pluginResult.getStatus()).length();\n            int ret = 2 + statusLen + 1 + jsPayloadOrCallbackId.length() + 1;\n            return ret + calculateEncodedLengthHelper(pluginResult);\n            }\n\n        static void encodeAsMessageHelper(StringBuilder sb, PluginResult pluginResult) {\n            switch (pluginResult.getMessageType()) {\n                case PluginResult.MESSAGE_TYPE_BOOLEAN:\n                    sb.append(pluginResult.getMessage().charAt(0)); // t or f.\n                    break;\n                case PluginResult.MESSAGE_TYPE_NULL: // N\n                    sb.append('N');\n                    break;\n                case PluginResult.MESSAGE_TYPE_NUMBER: // n\n                    sb.append('n')\n                      .append(pluginResult.getMessage());\n                    break;\n                case PluginResult.MESSAGE_TYPE_STRING: // s\n                    sb.append('s');\n                    sb.append(pluginResult.getStrMessage());\n                    break;\n                case PluginResult.MESSAGE_TYPE_BINARYSTRING: // S\n                    sb.append('S');\n                    sb.append(pluginResult.getMessage());\n                    break;\n                case PluginResult.MESSAGE_TYPE_ARRAYBUFFER: // A\n                    sb.append('A');\n                    sb.append(pluginResult.getMessage());\n                    break;\n                case PluginResult.MESSAGE_TYPE_MULTIPART:\n                    sb.append('M');\n                    for (int i = 0; i < pluginResult.getMultipartMessagesSize(); i++) {\n                        PluginResult multipartMessage = pluginResult.getMultipartMessage(i);\n                        sb.append(String.valueOf(calculateEncodedLengthHelper(multipartMessage)));\n                        sb.append(' ');\n                        encodeAsMessageHelper(sb, multipartMessage);\n                    }\n                    break;\n                case PluginResult.MESSAGE_TYPE_JSON:\n                default:\n                    sb.append(pluginResult.getMessage()); // [ or {\n            }\n        }\n\n        void encodeAsMessage(StringBuilder sb) {\n            if (pluginResult == null) {\n                sb.append('J')\n                  .append(jsPayloadOrCallbackId);\n                return;\n            }\n            int status = pluginResult.getStatus();\n            boolean noResult = status == PluginResult.Status.NO_RESULT.ordinal();\n            boolean resultOk = status == PluginResult.Status.OK.ordinal();\n            boolean keepCallback = pluginResult.getKeepCallback();\n\n            sb.append((noResult || resultOk) ? 'S' : 'F')\n              .append(keepCallback ? '1' : '0')\n              .append(status)\n              .append(' ')\n              .append(jsPayloadOrCallbackId)\n              .append(' ');\n\n            encodeAsMessageHelper(sb, pluginResult);\n        }\n\n        void buildJsMessage(StringBuilder sb) {\n            switch (pluginResult.getMessageType()) {\n                case PluginResult.MESSAGE_TYPE_MULTIPART:\n                    int size = pluginResult.getMultipartMessagesSize();\n                    for (int i=0; i<size; i++) {\n                        PluginResult subresult = pluginResult.getMultipartMessage(i);\n                        JsMessage submessage = new JsMessage(subresult, jsPayloadOrCallbackId);\n                        submessage.buildJsMessage(sb);\n                        if (i < (size-1)) {\n                            sb.append(\",\");\n                        }\n                    }\n                    break;\n                case PluginResult.MESSAGE_TYPE_BINARYSTRING:\n                    sb.append(\"atob('\")\n                            .append(pluginResult.getMessage())\n                            .append(\"')\");\n                    break;\n                case PluginResult.MESSAGE_TYPE_ARRAYBUFFER:\n                    sb.append(\"cordova.require('cordova/base64').toArrayBuffer('\")\n                            .append(pluginResult.getMessage())\n                            .append(\"')\");\n                    break;\n                case PluginResult.MESSAGE_TYPE_NULL:\n                    sb.append(\"null\");\n                    break;\n                default:\n                    sb.append(pluginResult.getMessage());\n            }\n        }\n\n        void encodeAsJsMessage(StringBuilder sb) {\n            if (pluginResult == null) {\n                sb.append(jsPayloadOrCallbackId);\n            } else {\n                int status = pluginResult.getStatus();\n                boolean success = (status == PluginResult.Status.OK.ordinal()) || (status == PluginResult.Status.NO_RESULT.ordinal());\n                sb.append(\"cordova.callbackFromNative('\")\n                        .append(jsPayloadOrCallbackId)\n                        .append(\"',\")\n                        .append(success)\n                        .append(\",\")\n                        .append(status)\n                        .append(\",[\");\n                buildJsMessage(sb);\n                sb.append(\"],\")\n                        .append(pluginResult.getKeepCallback())\n                        .append(\");\");\n            }\n        }\n    }\n}\n","size_bytes":21479},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/PermissionHelper.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport java.util.Arrays;\n\nimport org.json.JSONException;\n\nimport android.content.pm.PackageManager;\n\n/**\n * This class provides reflective methods for permission requesting and checking so that plugins\n * written for cordova-android 5.0.0+ can still compile with earlier cordova-android versions.\n */\npublic class PermissionHelper {\n    private static final String LOG_TAG = \"CordovaPermissionHelper\";\n\n    /**\n     * Requests a \"dangerous\" permission for the application at runtime. This is a helper method\n     * alternative to cordovaInterface.requestPermission() that does not require the project to be\n     * built with cordova-android 5.0.0+\n     *\n     * @param plugin        The plugin the permission is being requested for\n     * @param requestCode   A requestCode to be passed to the plugin's onRequestPermissionResult()\n     *                      along with the result of the permission request\n     * @param permission    The permission to be requested\n     */\n    public static void requestPermission(CordovaPlugin plugin, int requestCode, String permission) {\n        PermissionHelper.requestPermissions(plugin, requestCode, new String[] {permission});\n    }\n\n    /**\n     * Requests \"dangerous\" permissions for the application at runtime. This is a helper method\n     * alternative to cordovaInterface.requestPermissions() that does not require the project to be\n     * built with cordova-android 5.0.0+\n     *\n     * @param plugin        The plugin the permissions are being requested for\n     * @param requestCode   A requestCode to be passed to the plugin's onRequestPermissionResult()\n     *                      along with the result of the permissions request\n     * @param permissions   The permissions to be requested\n     */\n    public static void requestPermissions(CordovaPlugin plugin, int requestCode, String[] permissions) {\n        plugin.cordova.requestPermissions(plugin, requestCode, permissions);\n    }\n\n    /**\n     * Checks at runtime to see if the application has been granted a permission. This is a helper\n     * method alternative to cordovaInterface.hasPermission() that does not require the project to\n     * be built with cordova-android 5.0.0+\n     *\n     * @param plugin        The plugin the permission is being checked against\n     * @param permission    The permission to be checked\n     * @return              True if the permission has already been granted and false otherwise\n     */\n    public static boolean hasPermission(CordovaPlugin plugin, String permission) {\n        return plugin.cordova.hasPermission(permission);\n    }\n\n    private static void deliverPermissionResult(CordovaPlugin plugin, int requestCode, String[] permissions) {\n        // Generate the request results\n        int[] requestResults = new int[permissions.length];\n        Arrays.fill(requestResults, PackageManager.PERMISSION_GRANTED);\n\n        try {\n            // This one is deprecated - see https://github.com/apache/cordova-android/issues/592\n            plugin.onRequestPermissionResult(requestCode, permissions, requestResults);\n            plugin.onRequestPermissionsResult(requestCode, permissions, requestResults);\n        } catch (JSONException e) {\n            LOG.e(LOG_TAG, \"JSONException when delivering permissions results\", e);\n        }\n    }\n}","size_bytes":4180},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/PluginEntry.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n */\npackage org.apache.cordova;\n\nimport org.apache.cordova.CordovaPlugin;\n\n/**\n * This class represents a service entry object.\n */\npublic final class PluginEntry {\n\n    /**\n     * The name of the service that this plugin implements\n     */\n    public final String service;\n\n    /**\n     * The plugin class name that implements the service.\n     */\n    public final String pluginClass;\n\n    /**\n     * The pre-instantiated plugin to use for this entry.\n     */\n    public final CordovaPlugin plugin;\n\n    /**\n     * Flag that indicates the plugin object should be created when PluginManager is initialized.\n     */\n    public final boolean onload;\n\n    /**\n     * Constructs with a CordovaPlugin already instantiated.\n     *\n     * @param service   The name of the service\n     * @param plugin    The plugin class name\n     */\n    public PluginEntry(String service, CordovaPlugin plugin) {\n        this(service, plugin.getClass().getName(), true, plugin);\n    }\n\n    /**\n     * @param service   The name of the service\n     * @param plugin    The CordovaPlugin already instantiated\n     * @param onload    Create plugin object when HTML page is loaded\n     */\n    public PluginEntry(String service, CordovaPlugin plugin, boolean onload) {\n        this(service, plugin.getClass().getName(), onload, plugin);\n    }\n\n    /**\n     * @param service       The name of the service\n     * @param pluginClass   The plugin class name\n     * @param onload        Create plugin object when HTML page is loaded\n     */\n    public PluginEntry(String service, String pluginClass, boolean onload) {\n        this(service, pluginClass, onload, null);\n    }\n\n    /**\n     * @param service       The name of the service\n     * @param pluginClass   The plugin class name\n     * @param onload        Create plugin object when HTML page is loaded\n     * @param plugin        The CordovaPlugin already instantiated\n     */\n    private PluginEntry(String service, String pluginClass, boolean onload, CordovaPlugin plugin) {\n        this.service = service;\n        this.pluginClass = pluginClass;\n        this.onload = onload;\n        this.plugin = plugin;\n    }\n}\n","size_bytes":2995},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/PluginManager.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n */\npackage org.apache.cordova;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.json.JSONException;\n\nimport android.content.Intent;\nimport android.content.res.Configuration;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Debug;\nimport android.os.Build;\nimport android.webkit.RenderProcessGoneDetail;\nimport android.webkit.WebView;\n\n/**\n * PluginManager is exposed to JavaScript in the Cordova WebView.\n *\n * <p>Calling native plugin code can be done by calling PluginManager.exec(...)\n * from JavaScript.</p>\n */\npublic class PluginManager {\n    private static String TAG = \"PluginManager\";\n\n    // @todo same as ConfigXmlParser. Research centralizing ideas, maybe create CordovaConstants\n    private static String SCHEME_HTTPS = \"https\";\n    // @todo same as ConfigXmlParser. Research centralizing ideas, maybe create CordovaConstants\n    private static String DEFAULT_HOSTNAME = \"localhost\";\n\n    private static final int SLOW_EXEC_WARNING_THRESHOLD = Debug.isDebuggerConnected() ? 60 : 16;\n\n    // List of service entries\n    private final Map<String, CordovaPlugin> pluginMap = Collections.synchronizedMap(new LinkedHashMap<String, CordovaPlugin>());\n    private final Map<String, PluginEntry> entryMap = Collections.synchronizedMap(new LinkedHashMap<String, PluginEntry>());\n\n    private final CordovaInterface ctx;\n    private final CordovaWebView app;\n    private boolean isInitialized;\n\n    private CordovaPlugin permissionRequester;\n\n    public PluginManager(CordovaWebView cordovaWebView, CordovaInterface cordova, Collection<PluginEntry> pluginEntries) {\n        this.ctx = cordova;\n        this.app = cordovaWebView;\n        setPluginEntries(pluginEntries);\n    }\n\n    public Collection<PluginEntry> getPluginEntries() {\n        return entryMap.values();\n    }\n\n    public void setPluginEntries(Collection<PluginEntry> pluginEntries) {\n        if (isInitialized) {\n            this.onPause(false);\n            this.onDestroy();\n            pluginMap.clear();\n            entryMap.clear();\n        }\n        for (PluginEntry entry : pluginEntries) {\n            addService(entry);\n        }\n        if (isInitialized) {\n            startupPlugins();\n        }\n    }\n\n    /**\n     * Init when loading a new HTML page into WebView.\n     */\n    public void init() {\n        LOG.d(TAG, \"init()\");\n        isInitialized = true;\n        this.onPause(false);\n        this.onDestroy();\n        pluginMap.clear();\n        this.startupPlugins();\n    }\n\n    /**\n     * Create plugins objects that have onload set.\n     */\n    private void startupPlugins() {\n        synchronized (entryMap) {\n            for (PluginEntry entry : entryMap.values()) {\n                // Add a null entry to for each non-startup plugin to avoid ConcurrentModificationException\n                // When iterating plugins.\n                if (entry.onload) {\n                    getPlugin(entry.service);\n                }\n                else {\n                    LOG.d(TAG, \"startupPlugins: put - \" + entry.service);\n                    pluginMap.put(entry.service, null);\n                }\n            }\n        }\n    }\n\n    /**\n     * Receives a request for execution and fulfills it by finding the appropriate\n     * Java class and calling it's execute method.\n     *\n     * <p>PluginManager.exec can be used either synchronously or async. In either case, a JSON encoded\n     * string is returned that will indicate if any errors have occurred when trying to find\n     * or execute the class denoted by the clazz argument.</p>\n     *\n     * @param service       String containing the service to run\n     * @param action        String containing the action that the class is supposed to perform. This is\n     *                      passed to the plugin execute method and it is up to the plugin developer\n     *                      how to deal with it.\n     * @param callbackId    String containing the id of the callback that is execute in JavaScript if\n     *                      this is an async plugin call.\n     * @param rawArgs       An Array literal string containing any arguments needed in the\n     *                      plugin execute method.\n     */\n    public void exec(final String service, final String action, final String callbackId, final String rawArgs) {\n        CordovaPlugin plugin = getPlugin(service);\n        if (plugin == null) {\n            LOG.d(TAG, \"exec() call to unknown plugin: \" + service);\n            PluginResult cr = new PluginResult(PluginResult.Status.CLASS_NOT_FOUND_EXCEPTION);\n            app.sendPluginResult(cr, callbackId);\n            return;\n        }\n        CallbackContext callbackContext = new CallbackContext(callbackId, app);\n        try {\n            long pluginStartTime = System.currentTimeMillis();\n            boolean wasValidAction = plugin.execute(action, rawArgs, callbackContext);\n            long duration = System.currentTimeMillis() - pluginStartTime;\n\n            if (duration > SLOW_EXEC_WARNING_THRESHOLD) {\n                LOG.w(TAG, \"THREAD WARNING: exec() call to \" + service + \".\" + action + \" blocked the main thread for \" + duration + \"ms. Plugin should use CordovaInterface.getThreadPool().\");\n            }\n            if (!wasValidAction) {\n                PluginResult cr = new PluginResult(PluginResult.Status.INVALID_ACTION);\n                callbackContext.sendPluginResult(cr);\n            }\n        } catch (JSONException e) {\n            PluginResult cr = new PluginResult(PluginResult.Status.JSON_EXCEPTION);\n            callbackContext.sendPluginResult(cr);\n        } catch (Exception e) {\n            LOG.e(TAG, \"Uncaught exception from plugin\", e);\n            callbackContext.error(e.getMessage());\n        }\n    }\n\n    /**\n     * Get the plugin object that implements the service.\n     * If the plugin object does not already exist, then create it.\n     * If the service doesn't exist, then return null.\n     *\n     * @param service       The name of the service.\n     * @return              CordovaPlugin or null\n     */\n    public CordovaPlugin getPlugin(String service) {\n        CordovaPlugin ret = pluginMap.get(service);\n        if (ret == null) {\n            PluginEntry pe = entryMap.get(service);\n            if (pe == null) {\n                return null;\n            }\n            if (pe.plugin != null) {\n                ret = pe.plugin;\n            } else {\n                ret = instantiatePlugin(pe.pluginClass);\n            }\n            ret.privateInitialize(service, ctx, app, app.getPreferences());\n            LOG.d(TAG, \"getPlugin - put: \" + service);\n            pluginMap.put(service, ret);\n        }\n        return ret;\n    }\n\n    /**\n     * Add a plugin class that implements a service to the service entry table.\n     * This does not create the plugin object instance.\n     *\n     * @param service           The service name\n     * @param className         The plugin class name\n     */\n    public void addService(String service, String className) {\n        addService(service, className, false);\n    }\n\n    /**\n     * Add a plugin class that implements a service to the service entry table.\n     * \n     * @param service           The service name\n     * @param className         The plugin class name\n     * @param onload            If true, the plugin will be instantiated immediately\n     */\n    public void addService(String service, String className, boolean onload) {\n        PluginEntry entry = new PluginEntry(service, className, onload);\n        this.addService(entry);\n    }\n\n    /**\n     * Add a plugin class that implements a service to the service entry table.\n     * This does not create the plugin object instance.\n     *\n     * @param entry             The plugin entry\n     */\n    public void addService(PluginEntry entry) {\n        this.entryMap.put(entry.service, entry);\n        if (entry.plugin != null) {\n            entry.plugin.privateInitialize(entry.service, ctx, app, app.getPreferences());\n            LOG.d(TAG, \"addService: put - \" + entry.service);\n            pluginMap.put(entry.service, entry.plugin);\n        }\n    }\n\n    /**\n     * Called when the system is about to start resuming a previous activity.\n     *\n     * @param multitasking      Flag indicating if multitasking is turned on for app\n     */\n    public void onPause(boolean multitasking) {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    plugin.onPause(multitasking);\n                }\n            }\n        }\n    }\n\n    /**\n     * Called when the system received an HTTP authentication request. Plugins can use\n     * the supplied HttpAuthHandler to process this auth challenge.\n     *\n     * @param view              The WebView that is initiating the callback\n     * @param handler           The HttpAuthHandler used to set the WebView's response\n     * @param host              The host requiring authentication\n     * @param realm             The realm for which authentication is required\n     * @return                  True if there is a plugin which will resolve this auth challenge, otherwise False\n     */\n    public boolean onReceivedHttpAuthRequest(CordovaWebView view, ICordovaHttpAuthHandler handler, String host, String realm) {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null && plugin.onReceivedHttpAuthRequest(app, handler, host, realm)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Called when he system received an SSL client certificate request.  Plugin can use\n     * the supplied ClientCertRequest to process this certificate challenge.\n     *\n     * @param view              The WebView that is initiating the callback\n     * @param request           The client certificate request\n     * @return                  True if plugin will resolve this auth challenge, otherwise False\n     */\n    public boolean onReceivedClientCertRequest(CordovaWebView view, ICordovaClientCertRequest request) {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null && plugin.onReceivedClientCertRequest(app, request)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Called when the activity will start interacting with the user.\n     *\n     * @param multitasking      Flag indicating if multitasking is turned on for app\n     */\n    public void onResume(boolean multitasking) {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    plugin.onResume(multitasking);\n                }\n            }\n        }\n    }\n\n    /**\n     * Called when the activity is becoming visible to the user.\n     */\n    public void onStart() {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    plugin.onStart();\n                }\n            }\n        }\n    }\n\n    /**\n     * Called when the activity is no longer visible to the user.\n     */\n    public void onStop() {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    plugin.onStop();\n                }\n            }\n        }\n    }\n\n    /**\n     * The final call you receive before your activity is destroyed.\n     */\n    public void onDestroy() {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    plugin.onDestroy();\n                }\n            }\n        }\n    }\n\n    /**\n     * Send a message to all plugins.\n     *\n     * @param id                The message id\n     * @param data              The message data\n     * @return                  Object to stop propagation or null\n     */\n    public Object postMessage(String id, Object data) {\n        LOG.d(TAG, \"postMessage: \" + id);\n        synchronized (this.pluginMap) {\n            this.pluginMap.forEach((s, plugin) -> {\n                if (plugin != null) {\n                    plugin.onMessage(id, data);\n                }\n            });\n        }\n        return ctx.onMessage(id, data);\n    }\n\n    /**\n     * Called when the activity receives a new intent.\n     */\n    public void onNewIntent(Intent intent) {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    plugin.onNewIntent(intent);\n                }\n            }\n        }\n    }\n\n    /**\n     * TODO: should we move this somewhere public and accessible by all plugins?\n     *\n     * <p>For now, it is placed where it is used and kept private so we can decide later and move without causing a breaking change.\n     * An ideal location might be in the \"ConfigXmlParser\" at the time it generates the \"launchUrl\".</p>\n     *\n     * TODO: should we be restrictive on the \"file://\" return? e.g. \"file:///android_asset/www/\"\n     *\n     * <p>Would be considered as a breaking change if we apply a more granular check.</p>\n     */\n    private String getLaunchUrlPrefix() {\n        if (!app.getPreferences().getBoolean(\"AndroidInsecureFileModeEnabled\", false)) {\n            String scheme = app.getPreferences().getString(\"scheme\", SCHEME_HTTPS).toLowerCase();\n            String hostname = app.getPreferences().getString(\"hostname\", DEFAULT_HOSTNAME).toLowerCase();\n            return scheme + \"://\" + hostname + '/';\n        }\n\n        return \"file://\";\n    }\n\n    /**\n     * Called when the WebView is going to request an external resource.\n     *\n     * <p>This delegates to the installed plugins, and returns true/false for the\n     * first plugin to provide a non-null result.  If no plugins respond, then\n     * the default policy is applied.</p>\n     *\n     * @param url       The URL that is being requested.\n     * @return          true to allow the resource to load,\n     *                  false to block the resource.\n     */\n    public boolean shouldAllowRequest(String url) {\n        synchronized (this.entryMap) {\n            for (PluginEntry entry : this.entryMap.values()) {\n                CordovaPlugin plugin = pluginMap.get(entry.service);\n                if (plugin != null) {\n                    Boolean result = plugin.shouldAllowRequest(url);\n                    if (result != null) {\n                        return result;\n                    }\n                }\n            }\n        }\n\n        // Default policy:\n        if (url.startsWith(\"blob:\") || url.startsWith(\"data:\") || url.startsWith(\"about:blank\")) {\n            return true;\n        }\n        // TalkBack requires this, so allow it by default.\n        if (url.startsWith(\"https://ssl.gstatic.com/accessibility/javascript/android/\")) {\n            return true;\n        }\n        if (url.startsWith(\"file://\")) {\n            //This directory on WebKit/Blink based WebViews contains SQLite databases!\n            //DON'T CHANGE THIS UNLESS YOU KNOW WHAT YOU'RE DOING!\n            return !url.contains(\"/app_webview/\");\n        }\n        return false;\n    }\n\n    /**\n     * Called when the WebView is going to change the URL of the loaded content.\n     *\n     * <p>This delegates to the installed plugins, and returns true/false for the\n     * first plugin to provide a non-null result.  If no plugins respond, then\n     * the default policy is applied.</p>\n     *\n     * @param url       The URL that is being requested.\n     * @return          true to allow the navigation,\n     *                  false to block the navigation.\n     */\n    public boolean shouldAllowNavigation(String url) {\n        synchronized (this.entryMap) {\n            for (PluginEntry entry : this.entryMap.values()) {\n                CordovaPlugin plugin = pluginMap.get(entry.service);\n                if (plugin != null) {\n                    Boolean result = plugin.shouldAllowNavigation(url);\n                    if (result != null) {\n                        return result;\n                    }\n                }\n            }\n        }\n\n        // Default policy:\n        return url.startsWith(getLaunchUrlPrefix()) || url.startsWith(\"about:blank\");\n    }\n\n\n    /**\n     * Called when the WebView is requesting the exec() bridge be enabled.\n     */\n    public boolean shouldAllowBridgeAccess(String url) {\n        synchronized (this.entryMap) {\n            for (PluginEntry entry : this.entryMap.values()) {\n                CordovaPlugin plugin = pluginMap.get(entry.service);\n                if (plugin != null) {\n                    Boolean result = plugin.shouldAllowBridgeAccess(url);\n                    if (result != null) {\n                        return result;\n                    }\n                }\n            }\n        }\n\n        // Default policy:\n        return url.startsWith(getLaunchUrlPrefix());\n    }\n\n    /**\n     * Called when the WebView is going not going to navigate, but may launch\n     * an Intent for an URL.\n     *\n     * <p>This delegates to the installed plugins, and returns true/false for the\n     * first plugin to provide a non-null result.  If no plugins respond, then\n     * the default policy is applied.</p>\n     *\n     * @param url       The URL that is being requested.\n     * @return          true to allow the URL to launch an intent,\n     *                  false to block the intent.\n     */\n    public Boolean shouldOpenExternalUrl(String url) {\n        synchronized (this.entryMap) {\n            for (PluginEntry entry : this.entryMap.values()) {\n                CordovaPlugin plugin = pluginMap.get(entry.service);\n                if (plugin != null) {\n                    Boolean result = plugin.shouldOpenExternalUrl(url);\n                    if (result != null) {\n                        return result;\n                    }\n                }\n            }\n        }\n        // Default policy:\n        // External URLs are not allowed\n        return false;\n    }\n\n    /**\n     * Called when the URL of the WebView changes.\n     *\n     * @param url               The URL that is being changed to.\n     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.\n     */\n    public boolean onOverrideUrlLoading(String url) {\n        synchronized (this.entryMap) {\n            for (PluginEntry entry : this.entryMap.values()) {\n                CordovaPlugin plugin = pluginMap.get(entry.service);\n                if (plugin != null && plugin.onOverrideUrlLoading(url)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Called when the app navigates or refreshes.\n     */\n    public void onReset() {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    plugin.onReset();\n                }\n            }\n        }\n    }\n\n    Uri remapUri(Uri uri) {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    Uri ret = plugin.remapUri(uri);\n                    if (ret != null) {\n                        return ret;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Create a plugin based on class name.\n     */\n    private CordovaPlugin instantiatePlugin(String className) {\n        CordovaPlugin ret = null;\n        try {\n            Class<?> c = null;\n            if ((className != null) && !(\"\".equals(className))) {\n                c = Class.forName(className);\n            }\n            if (c != null & CordovaPlugin.class.isAssignableFrom(c)) {\n                ret = (CordovaPlugin) c.newInstance();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Error adding plugin \" + className + \".\");\n        }\n        return ret;\n    }\n\n    /**\n     * Called by the system when the device configuration changes while your activity is running.\n     *\n     * @param newConfig\t\tThe new device configuration\n     */\n    public void onConfigurationChanged(Configuration newConfig) {\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    plugin.onConfigurationChanged(newConfig);\n                }\n            }\n        }\n    }\n\n    public Bundle onSaveInstanceState() {\n        Bundle state = new Bundle();\n        synchronized (this.pluginMap) {\n            for (CordovaPlugin plugin : this.pluginMap.values()) {\n                if (plugin != null) {\n                    Bundle pluginState = plugin.onSaveInstanceState();\n                    if (pluginState != null) {\n                        state.putBundle(plugin.getServiceName(), pluginState);\n                    }\n                }\n            }\n        }\n        return state;\n    }\n\n    /**\n     * Collect all plugins PathHandlers\n     *\n     * @return list of PathHandlers in no particular order\n     */\n    public ArrayList<CordovaPluginPathHandler> getPluginPathHandlers() {\n        ArrayList<CordovaPluginPathHandler> handlers = new ArrayList<CordovaPluginPathHandler>();\n        for (CordovaPlugin plugin : this.pluginMap.values()) {\n            if (plugin != null && plugin.getPathHandler() != null) {\n                handlers.add(plugin.getPathHandler());\n            }\n        }\n        return handlers;\n    }\n\n    /**\n     * Called when the WebView's render process has exited.\n     *\n     * <p>See <a href=\"https://developer.android.com/reference/android/webkit/WebViewClient#onRenderProcessGone(android.webkit.WebView,%20android.webkit.RenderProcessGoneDetail)\">WebViewClient#onRenderProcessGone</a></p>\n     *\n     * @return true if the host application handled the situation that process has exited,\n     *          otherwise, application will crash if render process crashed, or be killed \n     *          if render process was killed by the system.\n     */\n    public boolean onRenderProcessGone(final WebView view, RenderProcessGoneDetail detail) {\n        boolean result = false;\n        synchronized (this.entryMap) {\n            for (PluginEntry entry : this.entryMap.values()) {\n                CordovaPlugin plugin = pluginMap.get(entry.service);\n                if (plugin != null) {\n                    if (plugin.onRenderProcessGone(view, detail)) {\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}\n","size_bytes":23899},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/PluginResult.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\nimport java.util.List;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport android.util.Base64;\n\npublic class PluginResult {\n    private final int status;\n    private final int messageType;\n    private boolean keepCallback = false;\n    private String strMessage;\n    private String encodedMessage;\n    private List<PluginResult> multipartMessages;\n\n    public PluginResult(Status status) {\n        this(status, PluginResult.StatusMessages[status.ordinal()]);\n    }\n\n    public PluginResult(Status status, String message) {\n        this.status = status.ordinal();\n        this.messageType = message == null ? MESSAGE_TYPE_NULL : MESSAGE_TYPE_STRING;\n        this.strMessage = message;\n    }\n\n    public PluginResult(Status status, JSONArray message) {\n        this.status = status.ordinal();\n        this.messageType = MESSAGE_TYPE_JSON;\n        encodedMessage = message.toString();\n    }\n\n    public PluginResult(Status status, JSONObject message) {\n        this.status = status.ordinal();\n        this.messageType = MESSAGE_TYPE_JSON;\n        encodedMessage = message.toString();\n    }\n\n    public PluginResult(Status status, int i) {\n        this.status = status.ordinal();\n        this.messageType = MESSAGE_TYPE_NUMBER;\n        this.encodedMessage = \"\"+i;\n    }\n\n    public PluginResult(Status status, float f) {\n        this.status = status.ordinal();\n        this.messageType = MESSAGE_TYPE_NUMBER;\n        this.encodedMessage = \"\"+f;\n    }\n\n    public PluginResult(Status status, boolean b) {\n        this.status = status.ordinal();\n        this.messageType = MESSAGE_TYPE_BOOLEAN;\n        this.encodedMessage = Boolean.toString(b);\n    }\n\n    public PluginResult(Status status, byte[] data) {\n        this(status, data, false);\n    }\n\n    public PluginResult(Status status, byte[] data, boolean binaryString) {\n        this.status = status.ordinal();\n        this.messageType = binaryString ? MESSAGE_TYPE_BINARYSTRING : MESSAGE_TYPE_ARRAYBUFFER;\n        this.encodedMessage = Base64.encodeToString(data, Base64.NO_WRAP);\n    }\n\n    // The keepCallback and status of multipartMessages are ignored.\n    public PluginResult(Status status, List<PluginResult> multipartMessages) {\n        this.status = status.ordinal();\n        this.messageType = MESSAGE_TYPE_MULTIPART;\n        this.multipartMessages = multipartMessages;\n    }\n\n    public void setKeepCallback(boolean b) {\n        this.keepCallback = b;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public int getMessageType() {\n        return messageType;\n    }\n\n    public String getMessage() {\n        if (encodedMessage == null) {\n            encodedMessage = JSONObject.quote(strMessage);\n        }\n        return encodedMessage;\n    }\n\n    public int getMultipartMessagesSize() {\n        return multipartMessages.size();\n    }\n\n    public PluginResult getMultipartMessage(int index) {\n        return multipartMessages.get(index);\n    }\n\n    /**\n     * @return message string when messageType is MESSAGE_TYPE_STRING otherwise null.\n     */\n    public String getStrMessage() {\n        return strMessage;\n    }\n\n    public boolean getKeepCallback() {\n        return this.keepCallback;\n    }\n\n    @Deprecated // Use sendPluginResult instead of sendJavascript.\n    public String getJSONString() {\n        return \"{\\\"status\\\":\" + this.status + \",\\\"message\\\":\" + this.getMessage() + \",\\\"keepCallback\\\":\" + this.keepCallback + \"}\";\n    }\n\n    @Deprecated // Use sendPluginResult instead of sendJavascript.\n    public String toCallbackString(String callbackId) {\n        // If no result to be sent and keeping callback, then no need to sent back to JavaScript\n        if ((status == PluginResult.Status.NO_RESULT.ordinal()) && keepCallback) {\n        \treturn null;\n        }\n\n        // Check the success (OK, NO_RESULT & !KEEP_CALLBACK)\n        if ((status == PluginResult.Status.OK.ordinal()) || (status == PluginResult.Status.NO_RESULT.ordinal())) {\n            return toSuccessCallbackString(callbackId);\n        }\n\n        return toErrorCallbackString(callbackId);\n    }\n\n    @Deprecated // Use sendPluginResult instead of sendJavascript.\n    public String toSuccessCallbackString(String callbackId) {\n        return \"cordova.callbackSuccess('\"+callbackId+\"',\"+this.getJSONString()+\");\";\n    }\n\n    @Deprecated // Use sendPluginResult instead of sendJavascript.\n    public String toErrorCallbackString(String callbackId) {\n        return \"cordova.callbackError('\"+callbackId+\"', \" + this.getJSONString()+ \");\";\n    }\n\n    public static final int MESSAGE_TYPE_STRING = 1;\n    public static final int MESSAGE_TYPE_JSON = 2;\n    public static final int MESSAGE_TYPE_NUMBER = 3;\n    public static final int MESSAGE_TYPE_BOOLEAN = 4;\n    public static final int MESSAGE_TYPE_NULL = 5;\n    public static final int MESSAGE_TYPE_ARRAYBUFFER = 6;\n    // Use BINARYSTRING when your string may contain null characters.\n    // This is required to work around a bug in the platform :(.\n    public static final int MESSAGE_TYPE_BINARYSTRING = 7;\n    public static final int MESSAGE_TYPE_MULTIPART = 8;\n\n    public static String[] StatusMessages = new String[] {\n        \"No result\",\n        \"OK\",\n        \"Class not found\",\n        \"Illegal access\",\n        \"Instantiation error\",\n        \"Malformed url\",\n        \"IO error\",\n        \"Invalid action\",\n        \"JSON error\",\n        \"Error\"\n    };\n\n    public enum Status {\n        NO_RESULT,\n        OK,\n        CLASS_NOT_FOUND_EXCEPTION,\n        ILLEGAL_ACCESS_EXCEPTION,\n        INSTANTIATION_EXCEPTION,\n        MALFORMED_URL_EXCEPTION,\n        IO_EXCEPTION,\n        INVALID_ACTION,\n        JSON_EXCEPTION,\n        ERROR\n    }\n}\n","size_bytes":6551},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/ResumeCallback.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova;\n\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ResumeCallback extends CallbackContext {\n    private final String TAG = \"CordovaResumeCallback\";\n    private String serviceName;\n    private PluginManager pluginManager;\n\n    public ResumeCallback(String serviceName, PluginManager pluginManager) {\n        super(\"resumecallback\", null);\n        this.serviceName = serviceName;\n        this.pluginManager = pluginManager;\n    }\n\n    @Override\n    public void sendPluginResult(PluginResult pluginResult) {\n        synchronized (this) {\n            if (finished) {\n                LOG.w(TAG, serviceName + \" attempted to send a second callback to ResumeCallback\\nResult was: \" + pluginResult.getMessage());\n                return;\n            } else {\n                finished = true;\n            }\n        }\n\n        JSONObject event = new JSONObject();\n        JSONObject pluginResultObject = new JSONObject();\n\n        try {\n            pluginResultObject.put(\"pluginServiceName\", this.serviceName);\n            pluginResultObject.put(\"pluginStatus\", PluginResult.StatusMessages[pluginResult.getStatus()]);\n\n            event.put(\"action\", \"resume\");\n            event.put(\"pendingResult\", pluginResultObject);\n        } catch (JSONException e) {\n            LOG.e(TAG, \"Unable to create resume object for Activity Result\");\n        }\n\n        PluginResult eventResult = new PluginResult(PluginResult.Status.OK, event);\n\n        // We send a list of results to the js so that we don't have to decode\n        // the PluginResult passed to this CallbackContext into JSON twice.\n        // The results are combined into an event payload before the event is\n        // fired on the js side of things (see platform.js)\n        List<PluginResult> result = new ArrayList<PluginResult>();\n        result.add(eventResult);\n        result.add(pluginResult);\n\n        CoreAndroid appPlugin = (CoreAndroid) pluginManager.getPlugin(CoreAndroid.PLUGIN_NAME);\n        appPlugin.sendResumeEvent(new PluginResult(PluginResult.Status.OK, result));\n    }\n}\n","size_bytes":3002},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/SplashScreenPlugin.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova;\n\nimport android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.annotation.SuppressLint;\nimport android.os.Handler;\nimport android.view.View;\nimport android.view.animation.AccelerateInterpolator;\n\nimport androidx.annotation.NonNull;\nimport androidx.core.splashscreen.SplashScreen;\nimport androidx.core.splashscreen.SplashScreenViewProvider;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\n\n@SuppressLint(\"LongLogTag\")\npublic class SplashScreenPlugin extends CordovaPlugin {\n    static final String PLUGIN_NAME = \"CordovaSplashScreenPlugin\";\n\n    // Default config preference values\n    private static final boolean DEFAULT_AUTO_HIDE = true;\n    private static final int DEFAULT_DELAY_TIME = -1;\n    private static final boolean DEFAULT_FADE = true;\n    private static final int DEFAULT_FADE_TIME = 500;\n\n    // Config preference values\n    /**\n     * Boolean flag to auto hide splash screen (default=true)\n     */\n    private boolean autoHide;\n    /**\n     * Integer value of how long to delay in milliseconds (default=-1)\n     */\n    private int delayTime;\n    /**\n     * Boolean flag if to fade to fade out splash screen (default=true)\n     */\n    private boolean isFadeEnabled;\n    /**\n     * Integer value of the fade duration in milliseconds (default=500)\n     */\n    private int fadeDuration;\n\n    // Internal variables\n    /**\n     * Boolean flag to determine if the splash screen remains visible.\n     */\n    private boolean keepOnScreen = true;\n\n    @Override\n    protected void pluginInitialize() {\n        // Auto Hide & Delay Settings\n        autoHide = preferences.getBoolean(\"AutoHideSplashScreen\", DEFAULT_AUTO_HIDE);\n        delayTime = preferences.getInteger(\"SplashScreenDelay\", DEFAULT_DELAY_TIME);\n        LOG.d(PLUGIN_NAME, \"Auto Hide: \" + autoHide);\n        if (delayTime != DEFAULT_DELAY_TIME) {\n            LOG.d(PLUGIN_NAME, \"Delay: \" + delayTime + \"ms\");\n        }\n\n        // Fade & Fade Duration\n        isFadeEnabled = preferences.getBoolean(\"FadeSplashScreen\", DEFAULT_FADE);\n        fadeDuration = preferences.getInteger(\"FadeSplashScreenDuration\", DEFAULT_FADE_TIME);\n        LOG.d(PLUGIN_NAME, \"Fade: \" + isFadeEnabled);\n        if (isFadeEnabled) {\n            LOG.d(PLUGIN_NAME, \"Fade Duration: \" + fadeDuration + \"ms\");\n        }\n    }\n\n    @Override\n    public boolean execute(\n        String action,\n        JSONArray args,\n        CallbackContext callbackContext\n    ) throws JSONException {\n        if (action.equals(\"hide\") && autoHide == false) {\n            /*\n             * The `.hide()` method can only be triggered if the `splashScreenAutoHide`\n             * is set to `false`.\n             */\n            keepOnScreen = false;\n        } else {\n            return false;\n        }\n\n        callbackContext.success();\n        return true;\n    }\n\n    @Override\n    public Object onMessage(String id, Object data) {\n        switch (id) {\n            case \"setupSplashScreen\":\n                setupSplashScreen((SplashScreen) data);\n                break;\n\n            case \"onPageFinished\":\n                attemptCloseOnPageFinished();\n                break;\n        }\n\n        return null;\n    }\n\n    private void setupSplashScreen(SplashScreen splashScreen) {\n        // Setup Splash Screen Delay\n        splashScreen.setKeepOnScreenCondition(() -> keepOnScreen);\n\n        // auto hide splash screen when custom delay is defined.\n        if (autoHide && delayTime != DEFAULT_DELAY_TIME) {\n            Handler splashScreenDelayHandler = new Handler(cordova.getContext().getMainLooper());\n            splashScreenDelayHandler.postDelayed(() -> keepOnScreen = false, delayTime);\n        }\n\n        // auto hide splash screen with default delay (-1) delay is controlled by the\n        // `onPageFinished` message.\n\n        // If auto hide is disabled (false), the hiding of the splash screen must be determined &\n        // triggered by the front-end code with the `navigator.splashscreen.hide()` method.\n\n        if (isFadeEnabled) {\n            // Setup the fade\n            splashScreen.setOnExitAnimationListener(new SplashScreen.OnExitAnimationListener() {\n                @Override\n                public void onSplashScreenExit(@NonNull SplashScreenViewProvider splashScreenViewProvider) {\n                    View splashScreenView = splashScreenViewProvider.getView();\n\n                    splashScreenView\n                            .animate()\n                            .alpha(0.0f)\n                            .setDuration(fadeDuration)\n                            .setStartDelay(0)\n                            .setInterpolator(new AccelerateInterpolator())\n                            .setListener(new AnimatorListenerAdapter() {\n                                @Override\n                                public void onAnimationEnd(Animator animation) {\n                                    super.onAnimationEnd(animation);\n                                    splashScreenViewProvider.remove();\n                                }\n                            }).start();\n                }\n            });\n        }\n    }\n\n    private void attemptCloseOnPageFinished() {\n        if (autoHide && delayTime == DEFAULT_DELAY_TIME) {\n            keepOnScreen = false;\n        }\n    }\n}\n","size_bytes":6171},"okul-app/platforms/android/app/src/main/assets/www/cordova.js":{"content":"// Platform: cordova-android\n// cordova-js 6.1.0\n/*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n*/\n;(function() {\nvar PLATFORM_VERSION_BUILD_LABEL = '14.0.1';\n// file: src/scripts/require.js\nvar require;\nvar define;\n\n(function () {\n    var modules = {};\n    // Stack of moduleIds currently being built.\n    var requireStack = [];\n    // Map of module ID -> index into requireStack of modules currently being built.\n    var inProgressModules = {};\n    var SEPARATOR = '.';\n\n    function build (module) {\n        var factory = module.factory;\n        var localRequire = function (id) {\n            var resultantId = id;\n            // Its a relative path, so lop off the last portion and add the id (minus \"./\")\n            if (id.charAt(0) === '.') {\n                resultantId = module.id.slice(0, module.id.lastIndexOf(SEPARATOR)) + SEPARATOR + id.slice(2);\n            }\n            return require(resultantId);\n        };\n        module.exports = {};\n        delete module.factory;\n        factory(localRequire, module.exports, module);\n        return module.exports;\n    }\n\n    require = function (id) {\n        if (!modules[id]) {\n            throw new Error('module ' + id + ' not found');\n        } else if (id in inProgressModules) {\n            var cycle = requireStack.slice(inProgressModules[id]).join('->') + '->' + id;\n            throw new Error('Cycle in require graph: ' + cycle);\n        }\n        if (modules[id].factory) {\n            try {\n                inProgressModules[id] = requireStack.length;\n                requireStack.push(id);\n                return build(modules[id]);\n            } finally {\n                delete inProgressModules[id];\n                requireStack.pop();\n            }\n        }\n        return modules[id].exports;\n    };\n\n    define = function (id, factory) {\n        if (Object.prototype.hasOwnProperty.call(modules, id)) {\n            throw new Error('module ' + id + ' already defined');\n        }\n\n        modules[id] = {\n            id: id,\n            factory: factory\n        };\n    };\n\n    define.remove = function (id) {\n        delete modules[id];\n    };\n\n    define.moduleMap = modules;\n})();\n\n// Export for use in node\nif (typeof module === 'object' && typeof require === 'function') {\n    module.exports.require = require;\n    module.exports.define = define;\n}\n\n// file: src/cordova.js\ndefine(\"cordova\", function(require, exports, module) {\n\n// Workaround for Windows 10 in hosted environment case\n// http://www.w3.org/html/wg/drafts/html/master/browsers.html#named-access-on-the-window-object\nif (window.cordova && !(window.cordova instanceof HTMLElement)) {\n    throw new Error('cordova already defined');\n}\n\nvar channel = require('cordova/channel');\nvar platform = require('cordova/platform');\n\n/**\n * Intercept calls to addEventListener + removeEventListener and handle deviceready,\n * resume, and pause events.\n */\nvar m_document_addEventListener = document.addEventListener;\nvar m_document_removeEventListener = document.removeEventListener;\nvar m_window_addEventListener = window.addEventListener;\nvar m_window_removeEventListener = window.removeEventListener;\n\n/**\n * Houses custom event handlers to intercept on document + window event listeners.\n */\nvar documentEventHandlers = {};\nvar windowEventHandlers = {};\n\ndocument.addEventListener = function (evt, handler, capture) {\n    var e = evt.toLowerCase();\n    if (typeof documentEventHandlers[e] !== 'undefined') {\n        documentEventHandlers[e].subscribe(handler);\n    } else {\n        m_document_addEventListener.call(document, evt, handler, capture);\n    }\n};\n\nwindow.addEventListener = function (evt, handler, capture) {\n    var e = evt.toLowerCase();\n    if (typeof windowEventHandlers[e] !== 'undefined') {\n        windowEventHandlers[e].subscribe(handler);\n    } else {\n        m_window_addEventListener.call(window, evt, handler, capture);\n    }\n};\n\ndocument.removeEventListener = function (evt, handler, capture) {\n    var e = evt.toLowerCase();\n    // If unsubscribing from an event that is handled by a plugin\n    if (typeof documentEventHandlers[e] !== 'undefined') {\n        documentEventHandlers[e].unsubscribe(handler);\n    } else {\n        m_document_removeEventListener.call(document, evt, handler, capture);\n    }\n};\n\nwindow.removeEventListener = function (evt, handler, capture) {\n    var e = evt.toLowerCase();\n    // If unsubscribing from an event that is handled by a plugin\n    if (typeof windowEventHandlers[e] !== 'undefined') {\n        windowEventHandlers[e].unsubscribe(handler);\n    } else {\n        m_window_removeEventListener.call(window, evt, handler, capture);\n    }\n};\n\nfunction createEvent (type, data) {\n    var event = document.createEvent('Events');\n    event.initEvent(type, false, false);\n    if (data) {\n        for (var i in data) {\n            if (Object.prototype.hasOwnProperty.call(data, i)) {\n                event[i] = data[i];\n            }\n        }\n    }\n    return event;\n}\n\nvar cordova = {\n    define: define,\n    require: require,\n    version: PLATFORM_VERSION_BUILD_LABEL,\n    platformVersion: PLATFORM_VERSION_BUILD_LABEL,\n    platformId: platform.id,\n\n    /**\n     * Methods to add/remove your own addEventListener hijacking on document + window.\n     */\n    addWindowEventHandler: function (event) {\n        return (windowEventHandlers[event] = channel.create(event));\n    },\n    addStickyDocumentEventHandler: function (event) {\n        return (documentEventHandlers[event] = channel.createSticky(event));\n    },\n    addDocumentEventHandler: function (event) {\n        return (documentEventHandlers[event] = channel.create(event));\n    },\n    removeWindowEventHandler: function (event) {\n        delete windowEventHandlers[event];\n    },\n    removeDocumentEventHandler: function (event) {\n        delete documentEventHandlers[event];\n    },\n\n    /**\n     * Retrieve original event handlers that were replaced by Cordova\n     *\n     * @return object\n     */\n    getOriginalHandlers: function () {\n        return {\n            document: {\n                addEventListener: m_document_addEventListener,\n                removeEventListener: m_document_removeEventListener\n            },\n            window: {\n                addEventListener: m_window_addEventListener,\n                removeEventListener: m_window_removeEventListener\n            }\n        };\n    },\n\n    /**\n     * Method to fire event from native code\n     * bNoDetach is required for events which cause an exception which needs to be caught in native code\n     */\n    fireDocumentEvent: function (type, data, bNoDetach) {\n        var evt = createEvent(type, data);\n        if (typeof documentEventHandlers[type] !== 'undefined') {\n            if (bNoDetach) {\n                documentEventHandlers[type].fire(evt);\n            } else {\n                setTimeout(function () {\n                    // Fire deviceready on listeners that were registered before cordova.js was loaded.\n                    if (type === 'deviceready') {\n                        document.dispatchEvent(evt);\n                    }\n                    documentEventHandlers[type].fire(evt);\n                }, 0);\n            }\n        } else {\n            document.dispatchEvent(evt);\n        }\n    },\n\n    fireWindowEvent: function (type, data) {\n        var evt = createEvent(type, data);\n        if (typeof windowEventHandlers[type] !== 'undefined') {\n            setTimeout(function () {\n                windowEventHandlers[type].fire(evt);\n            }, 0);\n        } else {\n            window.dispatchEvent(evt);\n        }\n    },\n\n    /**\n     * Plugin callback mechanism.\n     */\n    // Randomize the starting callbackId to avoid collisions after refreshing or navigating.\n    // This way, it's very unlikely that any new callback would get the same callbackId as an old callback.\n    callbackId: Math.floor(Math.random() * 2000000000),\n    callbacks: {},\n    callbackStatus: {\n        NO_RESULT: 0,\n        OK: 1,\n        CLASS_NOT_FOUND_EXCEPTION: 2,\n        ILLEGAL_ACCESS_EXCEPTION: 3,\n        INSTANTIATION_EXCEPTION: 4,\n        MALFORMED_URL_EXCEPTION: 5,\n        IO_EXCEPTION: 6,\n        INVALID_ACTION: 7,\n        JSON_EXCEPTION: 8,\n        ERROR: 9\n    },\n\n    /**\n     * Called by native code when returning successful result from an action.\n     */\n    callbackSuccess: function (callbackId, args) {\n        cordova.callbackFromNative(callbackId, true, args.status, [args.message], args.keepCallback);\n    },\n\n    /**\n     * Called by native code when returning error result from an action.\n     */\n    callbackError: function (callbackId, args) {\n        // TODO: Deprecate callbackSuccess and callbackError in favour of callbackFromNative.\n        // Derive success from status.\n        cordova.callbackFromNative(callbackId, false, args.status, [args.message], args.keepCallback);\n    },\n\n    /**\n     * Called by native code when returning the result from an action.\n     */\n    callbackFromNative: function (callbackId, isSuccess, status, args, keepCallback) {\n        try {\n            var callback = cordova.callbacks[callbackId];\n            if (callback) {\n                if (isSuccess && status === cordova.callbackStatus.OK) {\n                    callback.success && callback.success.apply(null, args);\n                } else if (!isSuccess) {\n                    callback.fail && callback.fail.apply(null, args);\n                }\n                /*\n                else\n                    Note, this case is intentionally not caught.\n                    this can happen if isSuccess is true, but callbackStatus is NO_RESULT\n                    which is used to remove a callback from the list without calling the callbacks\n                    typically keepCallback is false in this case\n                */\n                // Clear callback if not expecting any more results\n                if (!keepCallback) {\n                    delete cordova.callbacks[callbackId];\n                }\n            }\n        } catch (err) {\n            var msg = 'Error in ' + (isSuccess ? 'Success' : 'Error') + ' callbackId: ' + callbackId + ' : ' + err;\n            cordova.fireWindowEvent('cordovacallbackerror', { message: msg, error: err });\n            throw err;\n        }\n    },\n\n    addConstructor: function (func) {\n        channel.onCordovaReady.subscribe(function () {\n            try {\n                func();\n            } catch (e) {\n                console.log('Failed to run constructor: ' + e);\n            }\n        });\n    }\n};\n\nmodule.exports = cordova;\n\n});\n\n// file: ../../cordova-js-src/android/nativeapiprovider.js\ndefine(\"cordova/android/nativeapiprovider\", function(require, exports, module) {\n\n/**\n * Exports the ExposedJsApi.java object if available, otherwise exports the PromptBasedNativeApi.\n */\n\nvar nativeApi = this._cordovaNative || require('cordova/android/promptbasednativeapi');\nvar currentApi = nativeApi;\n\nmodule.exports = {\n    get: function () { return currentApi; },\n    setPreferPrompt: function (value) {\n        currentApi = value ? require('cordova/android/promptbasednativeapi') : nativeApi;\n    },\n    // Used only by tests.\n    set: function (value) {\n        currentApi = value;\n    }\n};\n\n});\n\n// file: ../../cordova-js-src/android/promptbasednativeapi.js\ndefine(\"cordova/android/promptbasednativeapi\", function(require, exports, module) {\n\n/**\n * Implements the API of ExposedJsApi.java, but uses prompt() to communicate.\n * This is used pre-JellyBean, where addJavascriptInterface() is disabled.\n */\n\nmodule.exports = {\n    exec: function (bridgeSecret, service, action, callbackId, argsJson) {\n        return prompt(argsJson, 'gap:' + JSON.stringify([bridgeSecret, service, action, callbackId]));\n    },\n    setNativeToJsBridgeMode: function (bridgeSecret, value) {\n        prompt(value, 'gap_bridge_mode:' + bridgeSecret);\n    },\n    retrieveJsMessages: function (bridgeSecret, fromOnlineEvent) {\n        return prompt(+fromOnlineEvent, 'gap_poll:' + bridgeSecret);\n    }\n};\n\n});\n\n// file: src/common/argscheck.js\ndefine(\"cordova/argscheck\", function(require, exports, module) {\n\nvar utils = require('cordova/utils');\n\nvar moduleExports = module.exports;\n\nvar typeMap = {\n    A: 'Array',\n    D: 'Date',\n    N: 'Number',\n    S: 'String',\n    F: 'Function',\n    O: 'Object'\n};\n\nfunction extractParamName (callee, argIndex) {\n    return (/\\(\\s*([^)]*?)\\s*\\)/).exec(callee)[1].split(/\\s*,\\s*/)[argIndex];\n}\n\n/**\n * Checks the given arguments' types and throws if they are not as expected.\n *\n * `spec` is a string where each character stands for the required type of the\n * argument at the same position. In other words: the character at `spec[i]`\n * specifies the required type for `args[i]`. The characters in `spec` are the\n * first letter of the required type's name. The supported types are:\n *\n *     Array, Date, Number, String, Function, Object\n *\n * Lowercase characters specify arguments that must not be `null` or `undefined`\n * while uppercase characters allow those values to be passed.\n *\n * Finally, `*` can be used to allow any type at the corresponding position.\n *\n * @example\n * function foo (arr, opts) {\n *     // require `arr` to be an Array and `opts` an Object, null or undefined\n *     checkArgs('aO', 'my.package.foo', arguments);\n *     // ...\n * }\n * @param {String} spec - the type specification for `args` as described above\n * @param {String} functionName - full name of the callee.\n * Used in the error message\n * @param {Array|arguments} args - the arguments to be checked against `spec`\n * @param {Function} [opt_callee=args.callee] - the recipient of `args`.\n * Used to extract parameter names for the error message\n * @throws {TypeError} if args do not satisfy spec\n */\nfunction checkArgs (spec, functionName, args, opt_callee) {\n    if (!moduleExports.enableChecks) {\n        return;\n    }\n    var errMsg = null;\n    var typeName;\n    for (var i = 0; i < spec.length; ++i) {\n        var c = spec.charAt(i);\n        var cUpper = c.toUpperCase();\n        var arg = args[i];\n        // Asterix means allow anything.\n        if (c === '*') {\n            continue;\n        }\n        typeName = utils.typeName(arg);\n        if ((arg === null || arg === undefined) && c === cUpper) {\n            continue;\n        }\n        if (typeName !== typeMap[cUpper]) {\n            errMsg = 'Expected ' + typeMap[cUpper];\n            break;\n        }\n    }\n    if (errMsg) {\n        errMsg += ', but got ' + typeName + '.';\n        errMsg = 'Wrong type for parameter \"' + extractParamName(opt_callee || args.callee, i) + '\" of ' + functionName + ': ' + errMsg;\n        // Don't log when running unit tests.\n        if (typeof jasmine === 'undefined') {\n            console.error(errMsg);\n        }\n        throw TypeError(errMsg);\n    }\n}\n\nfunction getValue (value, defaultValue) {\n    return value === undefined ? defaultValue : value;\n}\n\nmoduleExports.checkArgs = checkArgs;\nmoduleExports.getValue = getValue;\nmoduleExports.enableChecks = true;\n\n});\n\n// file: src/common/base64.js\ndefine(\"cordova/base64\", function(require, exports, module) {\n\nvar base64 = exports;\n\nbase64.fromArrayBuffer = function (arrayBuffer) {\n    var array = new Uint8Array(arrayBuffer);\n    return uint8ToBase64(array);\n};\n\nbase64.toArrayBuffer = function (str) {\n    var decodedStr = atob(str);\n    var arrayBuffer = new ArrayBuffer(decodedStr.length);\n    var array = new Uint8Array(arrayBuffer);\n    for (var i = 0, len = decodedStr.length; i < len; i++) {\n        array[i] = decodedStr.charCodeAt(i);\n    }\n    return arrayBuffer;\n};\n\n// ------------------------------------------------------------------------------\n\n/* This code is based on the performance tests at http://jsperf.com/b64tests\n * This 12-bit-at-a-time algorithm was the best performing version on all\n * platforms tested.\n */\n\nvar b64_6bit = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nvar b64_12bit;\n\nvar b64_12bitTable = function () {\n    b64_12bit = [];\n    for (var i = 0; i < 64; i++) {\n        for (var j = 0; j < 64; j++) {\n            b64_12bit[i * 64 + j] = b64_6bit[i] + b64_6bit[j];\n        }\n    }\n    b64_12bitTable = function () { return b64_12bit; };\n    return b64_12bit;\n};\n\nfunction uint8ToBase64 (rawData) {\n    var numBytes = rawData.byteLength;\n    var output = '';\n    var segment;\n    var table = b64_12bitTable();\n    for (var i = 0; i < numBytes - 2; i += 3) {\n        segment = (rawData[i] << 16) + (rawData[i + 1] << 8) + rawData[i + 2];\n        output += table[segment >> 12];\n        output += table[segment & 0xfff];\n    }\n    if (numBytes - i === 2) {\n        segment = (rawData[i] << 16) + (rawData[i + 1] << 8);\n        output += table[segment >> 12];\n        output += b64_6bit[(segment & 0xfff) >> 6];\n        output += '=';\n    } else if (numBytes - i === 1) {\n        segment = (rawData[i] << 16);\n        output += table[segment >> 12];\n        output += '==';\n    }\n    return output;\n}\n\n});\n\n// file: src/common/builder.js\ndefine(\"cordova/builder\", function(require, exports, module) {\n\nvar utils = require('cordova/utils');\n\nfunction each (objects, func, context) {\n    for (var prop in objects) {\n        if (Object.prototype.hasOwnProperty.call(objects, prop)) {\n            func.apply(context, [objects[prop], prop]);\n        }\n    }\n}\n\nfunction clobber (obj, key, value) {\n    var needsProperty = false;\n    try {\n        obj[key] = value;\n    } catch (e) {\n        needsProperty = true;\n    }\n    // Getters can only be overridden by getters.\n    if (needsProperty || obj[key] !== value) {\n        utils.defineGetter(obj, key, function () {\n            return value;\n        });\n    }\n}\n\nfunction assignOrWrapInDeprecateGetter (obj, key, value, message) {\n    if (message) {\n        utils.defineGetter(obj, key, function () {\n            console.log(message);\n            delete obj[key];\n            clobber(obj, key, value);\n            return value;\n        });\n    } else {\n        clobber(obj, key, value);\n    }\n}\n\nfunction include (parent, objects, clobber, merge) {\n    each(objects, function (obj, key) {\n        try {\n            var result = obj.path ? require(obj.path) : {};\n\n            if (clobber) {\n                // Clobber if it doesn't exist.\n                if (typeof parent[key] === 'undefined') {\n                    assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                } else if (typeof obj.path !== 'undefined') {\n                    // If merging, merge properties onto parent, otherwise, clobber.\n                    if (merge) {\n                        recursiveMerge(parent[key], result);\n                    } else {\n                        assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                    }\n                }\n                result = parent[key];\n            } else {\n                // Overwrite if not currently defined.\n                if (typeof parent[key] === 'undefined') {\n                    assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                } else {\n                    // Set result to what already exists, so we can build children into it if they exist.\n                    result = parent[key];\n                }\n            }\n\n            if (obj.children) {\n                include(result, obj.children, clobber, merge);\n            }\n        } catch (e) {\n            utils.alert('Exception building Cordova JS globals: ' + e + ' for key \"' + key + '\"');\n        }\n    });\n}\n\n/**\n * Merge properties from one object onto another recursively.  Properties from\n * the src object will overwrite existing target property.\n *\n * @param target Object to merge properties into.\n * @param src Object to merge properties from.\n */\nfunction recursiveMerge (target, src) {\n    for (var prop in src) {\n        if (Object.prototype.hasOwnProperty.call(src, prop)) {\n            if (target.prototype && target.prototype.constructor === target) {\n                // If the target object is a constructor override off prototype.\n                clobber(target.prototype, prop, src[prop]);\n            } else {\n                if (typeof src[prop] === 'object' && typeof target[prop] === 'object') {\n                    recursiveMerge(target[prop], src[prop]);\n                } else {\n                    clobber(target, prop, src[prop]);\n                }\n            }\n        }\n    }\n}\n\nexports.buildIntoButDoNotClobber = function (objects, target) {\n    include(target, objects, false, false);\n};\nexports.buildIntoAndClobber = function (objects, target) {\n    include(target, objects, true, false);\n};\nexports.buildIntoAndMerge = function (objects, target) {\n    include(target, objects, true, true);\n};\nexports.recursiveMerge = recursiveMerge;\nexports.assignOrWrapInDeprecateGetter = assignOrWrapInDeprecateGetter;\n\n});\n\n// file: src/common/channel.js\ndefine(\"cordova/channel\", function(require, exports, module) {\n\nvar utils = require('cordova/utils');\nvar nextGuid = 1;\n\n/**\n * Custom pub-sub \"channel\" that can have functions subscribed to it\n * This object is used to define and control firing of events for\n * cordova initialization, as well as for custom events thereafter.\n *\n * The order of events during page load and Cordova startup is as follows:\n *\n * onDOMContentLoaded*         Internal event that is received when the web page is loaded and parsed.\n * onNativeReady*              Internal event that indicates the Cordova native side is ready.\n * onCordovaReady*             Internal event fired when all Cordova JavaScript objects have been created.\n * onDeviceReady*              User event fired to indicate that Cordova is ready\n * onResume                    User event fired to indicate a start/resume lifecycle event\n * onPause                     User event fired to indicate a pause lifecycle event\n *\n * The events marked with an * are sticky. Once they have fired, they will stay in the fired state.\n * All listeners that subscribe after the event is fired will be executed right away.\n *\n * The only Cordova events that user code should register for are:\n *      deviceready           Cordova native code is initialized and Cordova APIs can be called from JavaScript\n *      pause                 App has moved to background\n *      resume                App has returned to foreground\n *\n * Listeners can be registered as:\n *      document.addEventListener(\"deviceready\", myDeviceReadyListener, false);\n *      document.addEventListener(\"resume\", myResumeListener, false);\n *      document.addEventListener(\"pause\", myPauseListener, false);\n *\n * The DOM lifecycle events should be used for saving and restoring state\n *      window.onload\n *      window.onunload\n *\n */\n\n/**\n * Channel\n * @constructor\n * @param type  String the channel name\n */\nvar Channel = function (type, sticky) {\n    this.type = type;\n    // Map of guid -> function.\n    this.handlers = {};\n    // 0 = Non-sticky, 1 = Sticky non-fired, 2 = Sticky fired.\n    this.state = sticky ? 1 : 0;\n    // Used in sticky mode to remember args passed to fire().\n    this.fireArgs = null;\n    // Used by onHasSubscribersChange to know if there are any listeners.\n    this.numHandlers = 0;\n    // Function that is called when the first listener is subscribed, or when\n    // the last listener is unsubscribed.\n    this.onHasSubscribersChange = null;\n};\nvar channel = {\n    /**\n     * Calls the provided function only after all of the channels specified\n     * have been fired. All channels must be sticky channels.\n     */\n    join: function (h, c) {\n        var len = c.length;\n        var i = len;\n        var f = function () {\n            if (!(--i)) h();\n        };\n        for (var j = 0; j < len; j++) {\n            if (c[j].state === 0) {\n                throw Error('Can only use join with sticky channels.');\n            }\n            c[j].subscribe(f);\n        }\n        if (!len) h();\n    },\n\n    create: function (type) {\n        return (channel[type] = new Channel(type, false));\n    },\n    createSticky: function (type) {\n        return (channel[type] = new Channel(type, true));\n    },\n\n    /**\n     * cordova Channels that must fire before \"deviceready\" is fired.\n     */\n    deviceReadyChannelsArray: [],\n    deviceReadyChannelsMap: {},\n\n    /**\n     * Indicate that a feature needs to be initialized before it is ready to be used.\n     * This holds up Cordova's \"deviceready\" event until the feature has been initialized\n     * and Cordova.initComplete(feature) is called.\n     *\n     * @param feature {String}     The unique feature name\n     */\n    waitForInitialization: function (feature) {\n        if (feature) {\n            var c = channel[feature] || this.createSticky(feature);\n            this.deviceReadyChannelsMap[feature] = c;\n            this.deviceReadyChannelsArray.push(c);\n        }\n    },\n\n    /**\n     * Indicate that initialization code has completed and the feature is ready to be used.\n     *\n     * @param feature {String}     The unique feature name\n     */\n    initializationComplete: function (feature) {\n        var c = this.deviceReadyChannelsMap[feature];\n        if (c) {\n            c.fire();\n        }\n    }\n};\n\nfunction checkSubscriptionArgument (argument) {\n    if (typeof argument !== 'function' && typeof argument.handleEvent !== 'function') {\n        throw new Error(\n            'Must provide a function or an EventListener object ' +\n                'implementing the handleEvent interface.'\n        );\n    }\n}\n\n/**\n * Subscribes the given function to the channel. Any time that\n * Channel.fire is called so too will the function.\n * Optionally specify an execution context for the function\n * and a guid that can be used to stop subscribing to the channel.\n * Returns the guid.\n */\nChannel.prototype.subscribe = function (eventListenerOrFunction, eventListener) {\n    checkSubscriptionArgument(eventListenerOrFunction);\n    var handleEvent, guid;\n\n    if (eventListenerOrFunction && typeof eventListenerOrFunction === 'object') {\n        // Received an EventListener object implementing the handleEvent interface\n        handleEvent = eventListenerOrFunction.handleEvent;\n        eventListener = eventListenerOrFunction;\n    } else {\n        // Received a function to handle event\n        handleEvent = eventListenerOrFunction;\n    }\n\n    if (this.state === 2) {\n        handleEvent.apply(eventListener || this, this.fireArgs);\n        return;\n    }\n\n    guid = eventListenerOrFunction.observer_guid;\n    if (typeof eventListener === 'object') {\n        handleEvent = utils.close(eventListener, handleEvent);\n    }\n\n    if (!guid) {\n        // First time any channel has seen this subscriber\n        guid = '' + nextGuid++;\n    }\n    handleEvent.observer_guid = guid;\n    eventListenerOrFunction.observer_guid = guid;\n\n    // Don't add the same handler more than once.\n    if (!this.handlers[guid]) {\n        this.handlers[guid] = handleEvent;\n        this.numHandlers++;\n        if (this.numHandlers === 1) {\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n/**\n * Unsubscribes the function with the given guid from the channel.\n */\nChannel.prototype.unsubscribe = function (eventListenerOrFunction) {\n    checkSubscriptionArgument(eventListenerOrFunction);\n    var handleEvent, guid, handler;\n\n    if (eventListenerOrFunction && typeof eventListenerOrFunction === 'object') {\n        // Received an EventListener object implementing the handleEvent interface\n        handleEvent = eventListenerOrFunction.handleEvent;\n    } else {\n        // Received a function to handle event\n        handleEvent = eventListenerOrFunction;\n    }\n\n    guid = handleEvent.observer_guid;\n    handler = this.handlers[guid];\n    if (handler) {\n        delete this.handlers[guid];\n        this.numHandlers--;\n        if (this.numHandlers === 0) {\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n/**\n * Calls all functions subscribed to this channel.\n */\nChannel.prototype.fire = function (e) {\n    var fireArgs = Array.prototype.slice.call(arguments);\n    // Apply stickiness.\n    if (this.state === 1) {\n        this.state = 2;\n        this.fireArgs = fireArgs;\n    }\n    if (this.numHandlers) {\n        // Copy the values first so that it is safe to modify it from within\n        // callbacks.\n        var toCall = [];\n        for (var item in this.handlers) {\n            toCall.push(this.handlers[item]);\n        }\n        for (var i = 0; i < toCall.length; ++i) {\n            toCall[i].apply(this, fireArgs);\n        }\n        if (this.state === 2 && this.numHandlers) {\n            this.numHandlers = 0;\n            this.handlers = {};\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n// defining them here so they are ready super fast!\n// DOM event that is received when the web page is loaded and parsed.\nchannel.createSticky('onDOMContentLoaded');\n\n// Event to indicate the Cordova native side is ready.\nchannel.createSticky('onNativeReady');\n\n// Event to indicate that all Cordova JavaScript objects have been created\n// and it's time to run plugin constructors.\nchannel.createSticky('onCordovaReady');\n\n// Event to indicate that all automatically loaded JS plugins are loaded and ready.\n// FIXME remove this\nchannel.createSticky('onPluginsReady');\n\n// Event to indicate that Cordova is ready\nchannel.createSticky('onDeviceReady');\n\n// Event to indicate a resume lifecycle event\nchannel.create('onResume');\n\n// Event to indicate a pause lifecycle event\nchannel.create('onPause');\n\n// Channels that must fire before \"deviceready\" is fired.\nchannel.waitForInitialization('onCordovaReady');\nchannel.waitForInitialization('onDOMContentLoaded');\n\nmodule.exports = channel;\n\n});\n\n// file: ../../cordova-js-src/exec.js\ndefine(\"cordova/exec\", function(require, exports, module) {\n\n/**\n * Execute a cordova command.  It is up to the native side whether this action\n * is synchronous or asynchronous.  The native side can return:\n *      Synchronous: PluginResult object as a JSON string\n *      Asynchronous: Empty string \"\"\n * If async, the native side will cordova.callbackSuccess or cordova.callbackError,\n * depending upon the result of the action.\n *\n * @param {Function} success    The success callback\n * @param {Function} fail       The fail callback\n * @param {String} service      The name of the service to use\n * @param {String} action       Action to be run in cordova\n * @param {String[]} [args]     Zero or more arguments to pass to the method\n */\nvar cordova = require('cordova');\nvar nativeApiProvider = require('cordova/android/nativeapiprovider');\nvar utils = require('cordova/utils');\nvar base64 = require('cordova/base64');\nvar channel = require('cordova/channel');\nvar jsToNativeModes = {\n    PROMPT: 0,\n    JS_OBJECT: 1\n};\nvar nativeToJsModes = {\n    // Polls for messages using the JS->Native bridge.\n    POLLING: 0,\n    // For LOAD_URL to be viable, it would need to have a work-around for\n    // the bug where the soft-keyboard gets dismissed when a message is sent.\n    LOAD_URL: 1,\n    // For the ONLINE_EVENT to be viable, it would need to intercept all event\n    // listeners (both through addEventListener and window.ononline) as well\n    // as set the navigator property itself.\n    ONLINE_EVENT: 2,\n    EVAL_BRIDGE: 3\n};\nvar jsToNativeBridgeMode; // Set lazily.\nvar nativeToJsBridgeMode = nativeToJsModes.EVAL_BRIDGE;\nvar pollEnabled = false;\nvar bridgeSecret = -1;\n\nvar messagesFromNative = [];\nvar isProcessing = false;\nvar resolvedPromise = typeof Promise === 'undefined' ? null : Promise.resolve();\nvar nextTick = resolvedPromise ? function (fn) { resolvedPromise.then(fn); } : function (fn) { setTimeout(fn); };\n\nfunction androidExec (success, fail, service, action, args) {\n    if (bridgeSecret < 0) {\n        // If we ever catch this firing, we'll need to queue up exec()s\n        // and fire them once we get a secret. For now, I don't think\n        // it's possible for exec() to be called since plugins are parsed but\n        // not run until until after onNativeReady.\n        throw new Error('exec() called without bridgeSecret');\n    }\n    // Set default bridge modes if they have not already been set.\n    // By default, we use the failsafe, since addJavascriptInterface breaks too often\n    if (jsToNativeBridgeMode === undefined) {\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT);\n    }\n\n    // If args is not provided, default to an empty array\n    args = args || [];\n\n    // Process any ArrayBuffers in the args into a string.\n    for (var i = 0; i < args.length; i++) {\n        if (utils.typeName(args[i]) === 'ArrayBuffer') {\n            args[i] = base64.fromArrayBuffer(args[i]);\n        }\n    }\n\n    var callbackId = service + cordova.callbackId++;\n    var argsJson = JSON.stringify(args);\n    if (success || fail) {\n        cordova.callbacks[callbackId] = { success: success, fail: fail };\n    }\n\n    var msgs = nativeApiProvider.get().exec(bridgeSecret, service, action, callbackId, argsJson);\n    // If argsJson was received by Java as null, try again with the PROMPT bridge mode.\n    // This happens in rare circumstances, such as when certain Unicode characters are passed over the bridge on a Galaxy S2.  See CB-2666.\n    if (jsToNativeBridgeMode === jsToNativeModes.JS_OBJECT && msgs === '@Null arguments.') {\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.PROMPT);\n        androidExec(success, fail, service, action, args);\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT);\n    } else if (msgs) {\n        messagesFromNative.push(msgs);\n        // Always process async to avoid exceptions messing up stack.\n        nextTick(processMessages);\n    }\n}\n\nandroidExec.init = function () {\n    bridgeSecret = +prompt('', 'gap_init:' + nativeToJsBridgeMode);\n    channel.onNativeReady.fire();\n};\n\nfunction pollOnceFromOnlineEvent () {\n    pollOnce(true);\n}\n\nfunction pollOnce (opt_fromOnlineEvent) {\n    if (bridgeSecret < 0) {\n        // This can happen when the NativeToJsMessageQueue resets the online state on page transitions.\n        // We know there's nothing to retrieve, so no need to poll.\n        return;\n    }\n    var msgs = nativeApiProvider.get().retrieveJsMessages(bridgeSecret, !!opt_fromOnlineEvent);\n    if (msgs) {\n        messagesFromNative.push(msgs);\n        // Process sync since we know we're already top-of-stack.\n        processMessages();\n    }\n}\n\nfunction pollingTimerFunc () {\n    if (pollEnabled) {\n        pollOnce();\n        setTimeout(pollingTimerFunc, 50);\n    }\n}\n\nfunction hookOnlineApis () {\n    function proxyEvent (e) {\n        cordova.fireWindowEvent(e.type);\n    }\n    // The network module takes care of firing online and offline events.\n    // It currently fires them only on document though, so we bridge them\n    // to window here (while first listening for exec()-releated online/offline\n    // events).\n    window.addEventListener('online', pollOnceFromOnlineEvent, false);\n    window.addEventListener('offline', pollOnceFromOnlineEvent, false);\n    cordova.addWindowEventHandler('online');\n    cordova.addWindowEventHandler('offline');\n    document.addEventListener('online', proxyEvent, false);\n    document.addEventListener('offline', proxyEvent, false);\n}\n\nhookOnlineApis();\n\nandroidExec.jsToNativeModes = jsToNativeModes;\nandroidExec.nativeToJsModes = nativeToJsModes;\n\nandroidExec.setJsToNativeBridgeMode = function (mode) {\n    if (mode === jsToNativeModes.JS_OBJECT && !window._cordovaNative) {\n        mode = jsToNativeModes.PROMPT;\n    }\n    nativeApiProvider.setPreferPrompt(mode === jsToNativeModes.PROMPT);\n    jsToNativeBridgeMode = mode;\n};\n\nandroidExec.setNativeToJsBridgeMode = function (mode) {\n    if (mode === nativeToJsBridgeMode) {\n        return;\n    }\n    if (nativeToJsBridgeMode === nativeToJsModes.POLLING) {\n        pollEnabled = false;\n    }\n\n    nativeToJsBridgeMode = mode;\n    // Tell the native side to switch modes.\n    // Otherwise, it will be set by androidExec.init()\n    if (bridgeSecret >= 0) {\n        nativeApiProvider.get().setNativeToJsBridgeMode(bridgeSecret, mode);\n    }\n\n    if (mode === nativeToJsModes.POLLING) {\n        pollEnabled = true;\n        setTimeout(pollingTimerFunc, 1);\n    }\n};\n\nfunction buildPayload (payload, message) {\n    var payloadKind = message.charAt(0);\n    if (payloadKind === 's') {\n        payload.push(message.slice(1));\n    } else if (payloadKind === 't') {\n        payload.push(true);\n    } else if (payloadKind === 'f') {\n        payload.push(false);\n    } else if (payloadKind === 'N') {\n        payload.push(null);\n    } else if (payloadKind === 'n') {\n        payload.push(+message.slice(1));\n    } else if (payloadKind === 'A') {\n        var data = message.slice(1);\n        payload.push(base64.toArrayBuffer(data));\n    } else if (payloadKind === 'S') {\n        payload.push(window.atob(message.slice(1)));\n    } else if (payloadKind === 'M') {\n        var multipartMessages = message.slice(1);\n        while (multipartMessages !== '') {\n            var spaceIdx = multipartMessages.indexOf(' ');\n            var msgLen = +multipartMessages.slice(0, spaceIdx);\n            var multipartMessage = multipartMessages.substr(spaceIdx + 1, msgLen);\n            multipartMessages = multipartMessages.slice(spaceIdx + msgLen + 1);\n            buildPayload(payload, multipartMessage);\n        }\n    } else {\n        payload.push(JSON.parse(message));\n    }\n}\n\n// Processes a single message, as encoded by NativeToJsMessageQueue.java.\nfunction processMessage (message) {\n    var firstChar = message.charAt(0);\n    if (firstChar === 'J') {\n        // This is deprecated on the .java side. It doesn't work with CSP enabled.\n        // eslint-disable-next-line no-eval\n        eval(message.slice(1));\n    } else if (firstChar === 'S' || firstChar === 'F') {\n        var success = firstChar === 'S';\n        var keepCallback = message.charAt(1) === '1';\n        var spaceIdx = message.indexOf(' ', 2);\n        var status = +message.slice(2, spaceIdx);\n        var nextSpaceIdx = message.indexOf(' ', spaceIdx + 1);\n        var callbackId = message.slice(spaceIdx + 1, nextSpaceIdx);\n        var payloadMessage = message.slice(nextSpaceIdx + 1);\n        var payload = [];\n        buildPayload(payload, payloadMessage);\n        cordova.callbackFromNative(callbackId, success, status, payload, keepCallback);\n    } else {\n        console.log('processMessage failed: invalid message: ' + JSON.stringify(message));\n    }\n}\n\nfunction processMessages () {\n    // Check for the reentrant case.\n    if (isProcessing) {\n        return;\n    }\n    if (messagesFromNative.length === 0) {\n        return;\n    }\n    isProcessing = true;\n    try {\n        var msg = popMessageFromQueue();\n        // The Java side can send a * message to indicate that it\n        // still has messages waiting to be retrieved.\n        if (msg === '*' && messagesFromNative.length === 0) {\n            nextTick(pollOnce);\n            return;\n        }\n        processMessage(msg);\n    } finally {\n        isProcessing = false;\n        if (messagesFromNative.length > 0) {\n            nextTick(processMessages);\n        }\n    }\n}\n\nfunction popMessageFromQueue () {\n    var messageBatch = messagesFromNative.shift();\n    if (messageBatch === '*') {\n        return '*';\n    }\n\n    var spaceIdx = messageBatch.indexOf(' ');\n    var msgLen = +messageBatch.slice(0, spaceIdx);\n    var message = messageBatch.substr(spaceIdx + 1, msgLen);\n    messageBatch = messageBatch.slice(spaceIdx + msgLen + 1);\n    if (messageBatch) {\n        messagesFromNative.unshift(messageBatch);\n    }\n    return message;\n}\n\nmodule.exports = androidExec;\n\n});\n\n// file: src/common/exec/proxy.js\ndefine(\"cordova/exec/proxy\", function(require, exports, module) {\n\n// internal map of proxy function\nvar CommandProxyMap = {};\n\nmodule.exports = {\n\n    // example: cordova.commandProxy.add(\"Accelerometer\",{getCurrentAcceleration: function(successCallback, errorCallback, options) {...},...);\n    add: function (id, proxyObj) {\n        console.log('adding proxy for ' + id);\n        CommandProxyMap[id] = proxyObj;\n        return proxyObj;\n    },\n\n    // cordova.commandProxy.remove(\"Accelerometer\");\n    remove: function (id) {\n        var proxy = CommandProxyMap[id];\n        delete CommandProxyMap[id];\n        CommandProxyMap[id] = null;\n        return proxy;\n    },\n\n    get: function (service, action) {\n        return (CommandProxyMap[service] ? CommandProxyMap[service][action] : null);\n    }\n};\n\n});\n\n// file: src/common/init.js\ndefine(\"cordova/init\", function(require, exports, module) {\n\nvar channel = require('cordova/channel');\nvar cordova = require('cordova');\nvar modulemapper = require('cordova/modulemapper');\nvar platform = require('cordova/platform');\nvar pluginloader = require('cordova/pluginloader');\n\nvar platformInitChannelsArray = [channel.onNativeReady, channel.onPluginsReady];\n\nfunction logUnfiredChannels (arr) {\n    for (var i = 0; i < arr.length; ++i) {\n        if (arr[i].state !== 2) {\n            console.log('Channel not fired: ' + arr[i].type);\n        }\n    }\n}\n\nwindow.setTimeout(function () {\n    if (channel.onDeviceReady.state !== 2) {\n        console.log('deviceready has not fired after 5 seconds.');\n        logUnfiredChannels(platformInitChannelsArray);\n        logUnfiredChannels(channel.deviceReadyChannelsArray);\n    }\n}, 5000);\n\nif (!window.console) {\n    window.console = {\n        log: function () {}\n    };\n}\nif (!window.console.warn) {\n    window.console.warn = function (msg) {\n        this.log('warn: ' + msg);\n    };\n}\n\n// Register pause, resume and deviceready channels as events on document.\nchannel.onPause = cordova.addDocumentEventHandler('pause');\nchannel.onResume = cordova.addDocumentEventHandler('resume');\nchannel.onActivated = cordova.addDocumentEventHandler('activated');\nchannel.onDeviceReady = cordova.addStickyDocumentEventHandler('deviceready');\n\n// Listen for DOMContentLoaded and notify our channel subscribers.\nif (document.readyState === 'complete' || document.readyState === 'interactive') {\n    channel.onDOMContentLoaded.fire();\n} else {\n    document.addEventListener('DOMContentLoaded', function () {\n        channel.onDOMContentLoaded.fire();\n    }, false);\n}\n\n// _nativeReady is global variable that the native side can set\n// to signify that the native code is ready. It is a global since\n// it may be called before any cordova JS is ready.\nif (window._nativeReady) {\n    channel.onNativeReady.fire();\n}\n\nmodulemapper.clobbers('cordova', 'cordova');\nmodulemapper.clobbers('cordova/exec', 'cordova.exec');\nmodulemapper.clobbers('cordova/exec', 'Cordova.exec');\n\n// Call the platform-specific initialization.\nplatform.bootstrap && platform.bootstrap();\n\n// Wrap in a setTimeout to support the use-case of having plugin JS appended to cordova.js.\n// The delay allows the attached modules to be defined before the plugin loader looks for them.\nsetTimeout(function () {\n    pluginloader.load(function () {\n        channel.onPluginsReady.fire();\n    });\n}, 0);\n\n/**\n * Create all cordova objects once native side is ready.\n */\nchannel.join(function () {\n    modulemapper.mapModules(window);\n\n    platform.initialize && platform.initialize();\n\n    // Fire event to notify that all objects are created\n    channel.onCordovaReady.fire();\n\n    // Fire onDeviceReady event once page has fully loaded, all\n    // constructors have run and cordova info has been received from native\n    // side.\n    channel.join(function () {\n        require('cordova').fireDocumentEvent('deviceready');\n    }, channel.deviceReadyChannelsArray);\n}, platformInitChannelsArray);\n\n});\n\n// file: src/common/modulemapper.js\ndefine(\"cordova/modulemapper\", function(require, exports, module) {\n\nvar builder = require('cordova/builder');\nvar moduleMap = define.moduleMap;\nvar symbolList;\nvar deprecationMap;\n\nexports.reset = function () {\n    symbolList = [];\n    deprecationMap = {};\n};\n\nfunction addEntry (strategy, moduleName, symbolPath, opt_deprecationMessage) {\n    if (!(moduleName in moduleMap)) {\n        throw new Error('Module ' + moduleName + ' does not exist.');\n    }\n    symbolList.push(strategy, moduleName, symbolPath);\n    if (opt_deprecationMessage) {\n        deprecationMap[symbolPath] = opt_deprecationMessage;\n    }\n}\n\n// Note: Android 2.3 does have Function.bind().\nexports.clobbers = function (moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('c', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.merges = function (moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('m', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.defaults = function (moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('d', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.runs = function (moduleName) {\n    addEntry('r', moduleName, null);\n};\n\nfunction prepareNamespace (symbolPath, context) {\n    if (!symbolPath) {\n        return context;\n    }\n    return symbolPath.split('.').reduce(function (cur, part) {\n        return (cur[part] = cur[part] || {});\n    }, context);\n}\n\nexports.mapModules = function (context) {\n    var origSymbols = {};\n    context.CDV_origSymbols = origSymbols;\n    for (var i = 0, len = symbolList.length; i < len; i += 3) {\n        var strategy = symbolList[i];\n        var moduleName = symbolList[i + 1];\n        var module = require(moduleName);\n        // <runs/>\n        if (strategy === 'r') {\n            continue;\n        }\n        var symbolPath = symbolList[i + 2];\n        var lastDot = symbolPath.lastIndexOf('.');\n        var namespace = symbolPath.substr(0, lastDot);\n        var lastName = symbolPath.substr(lastDot + 1);\n\n        var deprecationMsg = symbolPath in deprecationMap ? 'Access made to deprecated symbol: ' + symbolPath + '. ' + deprecationMsg : null;\n        var parentObj = prepareNamespace(namespace, context);\n        var target = parentObj[lastName];\n\n        if (strategy === 'm' && target) {\n            builder.recursiveMerge(target, module);\n        } else if ((strategy === 'd' && !target) || (strategy !== 'd')) {\n            if (!(symbolPath in origSymbols)) {\n                origSymbols[symbolPath] = target;\n            }\n            builder.assignOrWrapInDeprecateGetter(parentObj, lastName, module, deprecationMsg);\n        }\n    }\n};\n\nexports.getOriginalSymbol = function (context, symbolPath) {\n    var origSymbols = context.CDV_origSymbols;\n    if (origSymbols && (symbolPath in origSymbols)) {\n        return origSymbols[symbolPath];\n    }\n    var parts = symbolPath.split('.');\n    var obj = context;\n    for (var i = 0; i < parts.length; ++i) {\n        obj = obj && obj[parts[i]];\n    }\n    return obj;\n};\n\nexports.reset();\n\n});\n\n// file: ../../cordova-js-src/platform.js\ndefine(\"cordova/platform\", function(require, exports, module) {\n\n// The last resume event that was received that had the result of a plugin call.\nvar lastResumeEvent = null;\n\nmodule.exports = {\n    id: 'android',\n    bootstrap: function () {\n        var channel = require('cordova/channel');\n        var cordova = require('cordova');\n        var exec = require('cordova/exec');\n        var modulemapper = require('cordova/modulemapper');\n\n        // Get the shared secret needed to use the bridge.\n        exec.init();\n\n        // TODO: Extract this as a proper plugin.\n        modulemapper.clobbers('cordova/plugin/android/app', 'navigator.app');\n\n        // Core Splash Screen\n        modulemapper.clobbers('cordova/plugin/android/splashscreen', 'navigator.splashscreen');\n\n        var APP_PLUGIN_NAME = Number(cordova.platformVersion.split('.')[0]) >= 4 ? 'CoreAndroid' : 'App';\n\n        // Inject a listener for the backbutton on the document.\n        var backButtonChannel = cordova.addDocumentEventHandler('backbutton');\n        backButtonChannel.onHasSubscribersChange = function () {\n            // If we just attached the first handler or detached the last handler,\n            // let native know we need to override the back button.\n            exec(null, null, APP_PLUGIN_NAME, 'overrideBackbutton', [this.numHandlers === 1]);\n        };\n\n        // Add hardware MENU and SEARCH button handlers\n        cordova.addDocumentEventHandler('menubutton');\n        cordova.addDocumentEventHandler('searchbutton');\n\n        function bindButtonChannel (buttonName) {\n            // generic button bind used for volumeup/volumedown buttons\n            var volumeButtonChannel = cordova.addDocumentEventHandler(buttonName + 'button');\n            volumeButtonChannel.onHasSubscribersChange = function () {\n                exec(null, null, APP_PLUGIN_NAME, 'overrideButton', [buttonName, this.numHandlers === 1]);\n            };\n        }\n        // Inject a listener for the volume buttons on the document.\n        bindButtonChannel('volumeup');\n        bindButtonChannel('volumedown');\n\n        // The resume event is not \"sticky\", but it is possible that the event\n        // will contain the result of a plugin call. We need to ensure that the\n        // plugin result is delivered even after the event is fired (CB-10498)\n        var cordovaAddEventListener = document.addEventListener;\n\n        document.addEventListener = function (evt, handler, capture) {\n            cordovaAddEventListener(evt, handler, capture);\n\n            if (evt === 'resume' && lastResumeEvent) {\n                handler(lastResumeEvent);\n            }\n        };\n\n        // Let native code know we are all done on the JS side.\n        // Native code will then un-hide the WebView.\n        channel.onCordovaReady.subscribe(function () {\n            exec(onMessageFromNative, null, APP_PLUGIN_NAME, 'messageChannel', []);\n            exec(null, null, APP_PLUGIN_NAME, 'show', []);\n        });\n    }\n};\n\nfunction onMessageFromNative (msg) {\n    var cordova = require('cordova');\n    var action = msg.action;\n\n    switch (action) {\n    // pause and resume are Android app life cycle events\n    case 'backbutton':\n    case 'menubutton':\n    case 'searchbutton':\n    case 'pause':\n    case 'volumedownbutton':\n    case 'volumeupbutton':\n        cordova.fireDocumentEvent(action);\n        break;\n    case 'resume':\n        if (arguments.length > 1 && msg.pendingResult) {\n            if (arguments.length === 2) {\n                msg.pendingResult.result = arguments[1];\n            } else {\n                // The plugin returned a multipart message\n                var res = [];\n                for (var i = 1; i < arguments.length; i++) {\n                    res.push(arguments[i]);\n                }\n                msg.pendingResult.result = res;\n            }\n\n            // Save the plugin result so that it can be delivered to the js\n            // even if they miss the initial firing of the event\n            lastResumeEvent = msg;\n        }\n        cordova.fireDocumentEvent(action, msg);\n        break;\n    default:\n        throw new Error('Unknown event action ' + action);\n    }\n}\n\n});\n\n// file: ../../cordova-js-src/plugin/android/app.js\ndefine(\"cordova/plugin/android/app\", function(require, exports, module) {\n\nvar exec = require('cordova/exec');\nvar APP_PLUGIN_NAME = Number(require('cordova').platformVersion.split('.')[0]) >= 4 ? 'CoreAndroid' : 'App';\n\nmodule.exports = {\n    /**\n    * Clear the resource cache.\n    */\n    clearCache: function () {\n        exec(null, null, APP_PLUGIN_NAME, 'clearCache', []);\n    },\n\n    /**\n    * Load the url into the WebView or into new browser instance.\n    *\n    * @param url           The URL to load\n    * @param props         Properties that can be passed in to the activity:\n    *      wait: int                           => wait msec before loading URL\n    *      loadingDialog: \"Title,Message\"      => display a native loading dialog\n    *      loadUrlTimeoutValue: int            => time in msec to wait before triggering a timeout error\n    *      clearHistory: boolean              => clear WebView history (default=false)\n    *      openExternal: boolean              => open in a new browser (default=false)\n    *\n    * Example:\n    *      navigator.app.loadUrl(\"http://server/myapp/index.html\", {wait:2000, loadingDialog:\"Wait,Loading App\", loadUrlTimeoutValue: 60000});\n    */\n    loadUrl: function (url, props) {\n        exec(null, null, APP_PLUGIN_NAME, 'loadUrl', [url, props]);\n    },\n\n    /**\n    * Cancel loadUrl that is waiting to be loaded.\n    */\n    cancelLoadUrl: function () {\n        exec(null, null, APP_PLUGIN_NAME, 'cancelLoadUrl', []);\n    },\n\n    /**\n    * Clear web history in this web view.\n    * Instead of BACK button loading the previous web page, it will exit the app.\n    */\n    clearHistory: function () {\n        exec(null, null, APP_PLUGIN_NAME, 'clearHistory', []);\n    },\n\n    /**\n    * Go to previous page displayed.\n    * This is the same as pressing the backbutton on Android device.\n    */\n    backHistory: function () {\n        exec(null, null, APP_PLUGIN_NAME, 'backHistory', []);\n    },\n\n    /**\n    * Override the default behavior of the Android back button.\n    * If overridden, when the back button is pressed, the \"backKeyDown\" JavaScript event will be fired.\n    *\n    * Note: The user should not have to call this method.  Instead, when the user\n    *       registers for the \"backbutton\" event, this is automatically done.\n    *\n    * @param override        T=override, F=cancel override\n    */\n    overrideBackbutton: function (override) {\n        exec(null, null, APP_PLUGIN_NAME, 'overrideBackbutton', [override]);\n    },\n\n    /**\n    * Override the default behavior of the Android volume button.\n    * If overridden, when the volume button is pressed, the \"volume[up|down]button\"\n    * JavaScript event will be fired.\n    *\n    * Note: The user should not have to call this method.  Instead, when the user\n    *       registers for the \"volume[up|down]button\" event, this is automatically done.\n    *\n    * @param button          volumeup, volumedown\n    * @param override        T=override, F=cancel override\n    */\n    overrideButton: function (button, override) {\n        exec(null, null, APP_PLUGIN_NAME, 'overrideButton', [button, override]);\n    },\n\n    /**\n    * Exit and terminate the application.\n    */\n    exitApp: function () {\n        return exec(null, null, APP_PLUGIN_NAME, 'exitApp', []);\n    }\n};\n\n});\n\n// file: ../../cordova-js-src/plugin/android/splashscreen.js\ndefine(\"cordova/plugin/android/splashscreen\", function(require, exports, module) {\n\nvar exec = require('cordova/exec');\n\nvar splashscreen = {\n    show: function () {\n        console.log('\"navigator.splashscreen.show()\" is unsupported on Android.');\n    },\n    hide: function () {\n        exec(null, null, 'CordovaSplashScreenPlugin', 'hide', []);\n    }\n};\n\nmodule.exports = splashscreen;\n\n});\n\n// file: src/common/pluginloader.js\ndefine(\"cordova/pluginloader\", function(require, exports, module) {\n\nvar modulemapper = require('cordova/modulemapper');\n\n// Helper function to inject a <script> tag.\n// Exported for testing.\nexports.injectScript = function (url, onload, onerror) {\n    var script = document.createElement('script');\n    // onload fires even when script fails loads with an error.\n    script.onload = onload;\n    // onerror fires for malformed URLs.\n    script.onerror = onerror;\n    script.src = url;\n    document.head.appendChild(script);\n};\n\nfunction injectIfNecessary (id, url, onload, onerror) {\n    onerror = onerror || onload;\n    if (id in define.moduleMap) {\n        onload();\n    } else {\n        exports.injectScript(url, function () {\n            if (id in define.moduleMap) {\n                onload();\n            } else {\n                onerror();\n            }\n        }, onerror);\n    }\n}\n\nfunction onScriptLoadingComplete (moduleList, finishPluginLoading) {\n    // Loop through all the plugins and then through their clobbers and merges.\n    for (var i = 0, module; (module = moduleList[i]); i++) {\n        if (module.clobbers && module.clobbers.length) {\n            for (var j = 0; j < module.clobbers.length; j++) {\n                modulemapper.clobbers(module.id, module.clobbers[j]);\n            }\n        }\n\n        if (module.merges && module.merges.length) {\n            for (var k = 0; k < module.merges.length; k++) {\n                modulemapper.merges(module.id, module.merges[k]);\n            }\n        }\n\n        // Finally, if runs is truthy we want to simply require() the module.\n        if (module.runs) {\n            modulemapper.runs(module.id);\n        }\n    }\n\n    finishPluginLoading();\n}\n\n// Handler for the cordova_plugins.js content.\n// See plugman's plugin_loader.js for the details of this object.\n// This function is only called if the really is a plugins array that isn't empty.\n// Otherwise the onerror response handler will just call finishPluginLoading().\nfunction handlePluginsObject (path, moduleList, finishPluginLoading) {\n    // Now inject the scripts.\n    var scriptCounter = moduleList.length;\n\n    if (!scriptCounter) {\n        finishPluginLoading();\n        return;\n    }\n    function scriptLoadedCallback () {\n        if (!--scriptCounter) {\n            onScriptLoadingComplete(moduleList, finishPluginLoading);\n        }\n    }\n\n    for (var i = 0; i < moduleList.length; i++) {\n        injectIfNecessary(moduleList[i].id, path + moduleList[i].file, scriptLoadedCallback);\n    }\n}\n\nfunction findCordovaPath () {\n    var path = null;\n    var scripts = document.getElementsByTagName('script');\n    var term = '/cordova.js';\n    for (var n = scripts.length - 1; n > -1; n--) {\n        var src = scripts[n].src.replace(/\\?.*$/, ''); // Strip any query param (CB-6007).\n        if (src.indexOf(term) === (src.length - term.length)) {\n            path = src.substring(0, src.length - term.length) + '/';\n            break;\n        }\n    }\n    return path;\n}\n\n// Tries to load all plugins' js-modules.\n// This is an async process, but onDeviceReady is blocked on onPluginsReady.\n// onPluginsReady is fired when there are no plugins to load, or they are all done.\nexports.load = function (callback) {\n    var pathPrefix = findCordovaPath();\n    if (pathPrefix === null) {\n        console.log('Could not find cordova.js script tag. Plugin loading may fail.');\n        pathPrefix = '';\n    }\n    injectIfNecessary('cordova/plugin_list', pathPrefix + 'cordova_plugins.js', function () {\n        var moduleList = require('cordova/plugin_list');\n        handlePluginsObject(pathPrefix, moduleList, callback);\n    }, callback);\n};\n\n});\n\n// file: src/common/urlutil.js\ndefine(\"cordova/urlutil\", function(require, exports, module) {\n\n/**\n * For already absolute URLs, returns what is passed in.\n * For relative URLs, converts them to absolute ones.\n */\nexports.makeAbsolute = function makeAbsolute (url) {\n    var anchorEl = document.createElement('a');\n    anchorEl.href = url;\n    return anchorEl.href;\n};\n\n});\n\n// file: src/common/utils.js\ndefine(\"cordova/utils\", function(require, exports, module) {\n\nvar utils = exports;\n\n/**\n * Defines a property getter / setter for obj[key].\n */\nutils.defineGetterSetter = function (obj, key, getFunc, opt_setFunc) {\n    if (Object.defineProperty) {\n        var desc = {\n            get: getFunc,\n            configurable: true\n        };\n        if (opt_setFunc) {\n            desc.set = opt_setFunc;\n        }\n        Object.defineProperty(obj, key, desc);\n    } else {\n        obj.__defineGetter__(key, getFunc);\n        if (opt_setFunc) {\n            obj.__defineSetter__(key, opt_setFunc);\n        }\n    }\n};\n\n/**\n * Defines a property getter for obj[key].\n */\nutils.defineGetter = utils.defineGetterSetter;\n\nutils.arrayIndexOf = function (a, item) {\n    if (a.indexOf) {\n        return a.indexOf(item);\n    }\n    var len = a.length;\n    for (var i = 0; i < len; ++i) {\n        if (a[i] === item) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/**\n * Returns whether the item was found in the array.\n */\nutils.arrayRemove = function (a, item) {\n    var index = utils.arrayIndexOf(a, item);\n    if (index !== -1) {\n        a.splice(index, 1);\n    }\n    return index !== -1;\n};\n\nutils.typeName = function (val) {\n    return Object.prototype.toString.call(val).slice(8, -1);\n};\n\n/**\n * Returns an indication of whether the argument is an array or not\n */\nutils.isArray = Array.isArray ||\n                function (a) { return utils.typeName(a) === 'Array'; };\n\n/**\n * Returns an indication of whether the argument is a Date or not\n */\nutils.isDate = function (d) {\n    return (d instanceof Date);\n};\n\n/**\n * Does a deep clone of the object.\n */\nutils.clone = function (obj) {\n    if (!obj || typeof obj === 'function' || utils.isDate(obj) || typeof obj !== 'object') {\n        return obj;\n    }\n\n    var retVal, i;\n\n    if (utils.isArray(obj)) {\n        retVal = [];\n        for (i = 0; i < obj.length; ++i) {\n            retVal.push(utils.clone(obj[i]));\n        }\n        return retVal;\n    }\n\n    retVal = {};\n    for (i in obj) {\n        // 'unknown' type may be returned in custom protocol activation case on\n        // Windows Phone 8.1 causing \"No such interface supported\" exception on\n        // cloning (https://issues.apache.org/jira/browse/CB-11522)\n        // eslint-disable-next-line valid-typeof\n        if ((!(i in retVal) || retVal[i] !== obj[i]) && typeof obj[i] !== 'undefined' && typeof obj[i] !== 'unknown') {\n            retVal[i] = utils.clone(obj[i]);\n        }\n    }\n    return retVal;\n};\n\n/**\n * Returns a wrapped version of the function\n */\nutils.close = function (context, func, params) {\n    return function () {\n        var args = params || arguments;\n        return func.apply(context, args);\n    };\n};\n\n// ------------------------------------------------------------------------------\nfunction UUIDcreatePart (length) {\n    var uuidpart = '';\n    for (var i = 0; i < length; i++) {\n        var uuidchar = parseInt((Math.random() * 256), 10).toString(16);\n        if (uuidchar.length === 1) {\n            uuidchar = '0' + uuidchar;\n        }\n        uuidpart += uuidchar;\n    }\n    return uuidpart;\n}\n\n/**\n * Create a UUID\n */\nutils.createUUID = function () {\n    return UUIDcreatePart(4) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(6);\n};\n\n/**\n * Extends a child object from a parent object using classical inheritance\n * pattern.\n */\nutils.extend = (function () {\n    // proxy used to establish prototype chain\n    var F = function () {};\n    // extend Child from Parent\n    return function (Child, Parent) {\n        F.prototype = Parent.prototype;\n        Child.prototype = new F();\n        Child.__super__ = Parent.prototype;\n        Child.prototype.constructor = Child;\n    };\n}());\n\n/**\n * Alerts a message in any available way: alert or console.log.\n */\nutils.alert = function (msg) {\n    if (window.alert) {\n        window.alert(msg);\n    } else if (console && console.log) {\n        console.log(msg);\n    }\n};\n\n});\n\nwindow.cordova = require('cordova');\n// file: src/scripts/bootstrap.js\nrequire('cordova/init');\n\n})();\n","size_bytes":63747},"okul-app/platforms/android/app/src/main/assets/www/cordova_plugins.js":{"content":"cordova.define('cordova/plugin_list', function(require, exports, module) {\n  module.exports = [\n    {\n      \"id\": \"cordova-plugin-network-information.network\",\n      \"file\": \"plugins/cordova-plugin-network-information/www/network.js\",\n      \"pluginId\": \"cordova-plugin-network-information\",\n      \"clobbers\": [\n        \"navigator.connection\",\n        \"navigator.network.connection\"\n      ]\n    },\n    {\n      \"id\": \"cordova-plugin-network-information.Connection\",\n      \"file\": \"plugins/cordova-plugin-network-information/www/Connection.js\",\n      \"pluginId\": \"cordova-plugin-network-information\",\n      \"clobbers\": [\n        \"Connection\"\n      ]\n    },\n    {\n      \"id\": \"cordova-plugin-splashscreen.SplashScreen\",\n      \"file\": \"plugins/cordova-plugin-splashscreen/www/splashscreen.js\",\n      \"pluginId\": \"cordova-plugin-splashscreen\",\n      \"clobbers\": [\n        \"navigator.splashscreen\"\n      ]\n    }\n  ];\n  module.exports.metadata = {\n    \"cordova-plugin-network-information\": \"2.0.2\",\n    \"cordova-plugin-splashscreen\": \"5.0.4\"\n  };\n});","size_bytes":1042},"okul-app/platforms/android/app/src/main/assets/www/script.js":{"content":"// Database API\nclass DatabaseSync {\n    constructor() {\n        this.isOnline = navigator.onLine;\n        this.pendingChanges = [];\n        this.setupOnlineListener();\n    }\n\n    setupOnlineListener() {\n        window.addEventListener('online', () => {\n            this.isOnline = true;\n            this.syncPendingChanges();\n        });\n        window.addEventListener('offline', () => {\n            this.isOnline = false;\n        });\n    }\n\n    async syncToDatabase(dataType, data) {\n        if (!this.isOnline) {\n            this.pendingChanges.push({ dataType, data });\n            return;\n        }\n\n        try {\n            const response = await fetch('https://8d09f432-5eed-4a64-9e74-04c5c4d04ea5-00-38up2j3p1fryf.pike.replit.dev/api/sync', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ dataType, data })\n            });\n            if (!response.ok) throw new Error('Sync failed');\n        } catch (error) {\n            console.log('Database sync failed, saving for later:', error);\n            this.pendingChanges.push({ dataType, data });\n        }\n    }\n\n    async loadFromDatabase() {\n        if (!this.isOnline) return null;\n        \n        try {\n            const response = await fetch('https://8d09f432-5eed-4a64-9e74-04c5c4d04ea5-00-38up2j3p1fryf.pike.replit.dev/api/data');\n            if (!response.ok) throw new Error('Load failed');\n            return await response.json();\n        } catch (error) {\n            console.log('Database load failed, using localStorage:', error);\n            return null;\n        }\n    }\n\n    async syncPendingChanges() {\n        while (this.pendingChanges.length > 0 && this.isOnline) {\n            const change = this.pendingChanges.shift();\n            await this.syncToDatabase(change.dataType, change.data);\n        }\n    }\n}\n\n// Database instance\nconst dbSync = new DatabaseSync();\n\n// Uygulama durumu (state)\nlet appState = {\n    currentPage: 'anasayfa',\n    currentTab: 'schools',\n    selectedSchoolIndex: null,\n    selectedGrade: null,\n    selectedSchoolForClass: null,\n    selectedClassForStudents: null,\n    schools: [],\n    criteriaByGrade: {\n        5: [],\n        6: [],\n        7: [],\n        8: []\n    },\n    exams: [],\n    selectedCriteria: [],\n    selectedCriteriaWithDeadlines: [],\n    currentExamScores: {}\n};\n\n// Veri yükleme (Database + LocalStorage hybrid)\nasync function loadAppState() {\n    // Önce database'den yüklemeyi dene\n    const dbData = await dbSync.loadFromDatabase();\n    \n    if (dbData) {\n        // Database'den yüklendi\n        appState.schools = dbData.schools || [];\n        appState.criteriaByGrade = dbData.criteriaByGrade || {5: [], 6: [], 7: [], 8: []};\n        appState.exams = dbData.exams || [];\n        \n        // LocalStorage'a da backup olarak kaydet\n        localStorage.setItem('okulYonetimSistemi', JSON.stringify({\n            schools: appState.schools,\n            criteriaByGrade: appState.criteriaByGrade,\n            exams: appState.exams\n        }));\n    } else {\n        // Database başarısızsa localStorage'dan yükle\n        const savedState = localStorage.getItem('okulYonetimSistemi');\n        if (savedState) {\n            const parsed = JSON.parse(savedState);\n            appState.schools = parsed.schools || [];\n            appState.criteriaByGrade = parsed.criteriaByGrade || {5: [], 6: [], 7: [], 8: []};\n            appState.exams = parsed.exams || [];\n            \n            // LocalStorage'daki veriyi database'e sync et\n            dbSync.syncToDatabase('schools', appState.schools);\n            dbSync.syncToDatabase('criteria', appState.criteriaByGrade);\n            dbSync.syncToDatabase('exams', appState.exams);\n        }\n    }\n    \n    // Diğer state değerlerini sıfırla\n    appState.selectedCriteria = [];\n    appState.selectedCriteriaWithDeadlines = [];\n    appState.currentExamScores = {};\n}\n\n// Veri kaydetme (Database + LocalStorage hybrid)\nfunction saveAppState() {\n    const stateToSave = {\n        schools: appState.schools,\n        criteriaByGrade: appState.criteriaByGrade,\n        exams: appState.exams\n    };\n    \n    // LocalStorage'a kaydet (offline backup)\n    localStorage.setItem('okulYonetimSistemi', JSON.stringify(stateToSave));\n    \n    // Database'e sync et\n    dbSync.syncToDatabase('schools', appState.schools);\n    dbSync.syncToDatabase('criteria', appState.criteriaByGrade);\n    dbSync.syncToDatabase('exams', appState.exams);\n}\n\n// Sayfa geçişleri\nfunction navigateTo(page) {\n    // Tüm sayfaları gizle ve scrollable sınıfını kaldır\n    document.querySelectorAll('.page').forEach(p => {\n        p.classList.add('hidden');\n        p.classList.remove('scrollable');\n    });\n    \n    // Seçili sayfayı göster\n    document.getElementById(page).classList.remove('hidden');\n    \n    // Compact mode toggle for okul-ekle and sinif-yonetimi\n    if (page === 'okul-ekle' || page === 'sinif-yonetimi') {\n        document.body.classList.add('compact');\n        document.body.classList.remove('allow-scroll');\n    } else {\n        document.body.classList.remove('compact');\n    }\n    \n    // Scrollbar gerekli sayfalara scrollable sınıfı ekle\n    if (page === 'sinav-olustur' || page === 'sinif-kriterleri' || page === 'sinavlarim' || page === 'rapor-al' || page === 'sinav-puanlama') {\n        document.getElementById(page).classList.add('scrollable');\n    }\n    \n    appState.currentPage = page;\n    \n    // Sayfa yüklendiğinde güncelleme\n    if (page === 'okul-ekle') {\n        updateSchoolList();\n        updateSchoolSelectForClass();\n    } else if (page === 'sinav-olustur') {\n        updateExamSchools();\n        updateExamsList();\n    } else if (page === 'sinavlarim') {\n        updateMyExamsList();\n    } else if (page === 'rapor-al') {\n        updateReportExamSelect();\n    }\n}\n\n// Tab değiştirme\nfunction switchTab(tabName) {\n    const tabs = document.querySelectorAll('.tab');\n    const tabContents = document.querySelectorAll('.tab-content');\n    \n    tabs.forEach(tab => tab.classList.remove('active'));\n    tabContents.forEach(content => content.classList.add('hidden'));\n    \n    document.querySelector(`[onclick=\"switchTab('${tabName}')\"]`).classList.add('active');\n    \n    if (tabName === 'schools') {\n        document.getElementById('school-management').classList.remove('hidden');\n        updateSchoolList();\n    } else if (tabName === 'classes') {\n        document.getElementById('class-management').classList.remove('hidden');\n        updateSchoolSelectForClass();\n    }\n    \n    appState.currentTab = tabName;\n}\n\n// Okul yönetimi\nfunction addSchool() {\n    const schoolNameInput = document.getElementById('school-name');\n    const schoolName = schoolNameInput.value.trim();\n    \n    if (schoolName) {\n        const newSchool = {\n            name: schoolName,\n            classes: [],\n            id: Date.now()\n        };\n        \n        appState.schools.push(newSchool);\n        schoolNameInput.value = '';\n        updateSchoolList();\n        saveAppState();\n    }\n}\n\nfunction deleteSchool(index) {\n    if (confirm('Bu okulu silmek istediğinizden emin misiniz? Tüm sınıfları ve öğrencileri silinecektir.')) {\n        appState.schools.splice(index, 1);\n        updateSchoolList();\n        updateSchoolSelectForClass();\n        saveAppState();\n    }\n}\n\nfunction updateSchoolList() {\n    const schoolsList = document.getElementById('schools-list');\n    const schoolCount = document.getElementById('school-count');\n    \n    schoolCount.textContent = appState.schools.length;\n    \n    if (appState.schools.length === 0) {\n        schoolsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz okul eklenmedi.</div>';\n        return;\n    }\n    \n    schoolsList.innerHTML = appState.schools.map((school, index) => `\n        <div class=\"school-item\">\n            <div class=\"school-header\">\n                <div>\n                    <div class=\"school-name\">${school.name}</div>\n                    <div class=\"class-count\">${school.classes.length} sınıf</div>\n                </div>\n                <div class=\"action-buttons\">\n                    <button class=\"small-button view-button\" onclick=\"selectSchoolForClassManagement(${index})\">\n                        Sınıfları Görüntüle\n                    </button>\n                    <button class=\"small-button delete-button\" onclick=\"deleteSchool(${index})\">\n                        Sil\n                    </button>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\n// Sınıf yönetimi\nfunction selectSchoolForClassManagement(schoolIndex) {\n    switchTab('classes');\n    document.getElementById('selected-school').value = schoolIndex;\n    selectSchoolForClass();\n}\n\nfunction updateSchoolSelectForClass() {\n    const select = document.getElementById('selected-school');\n    select.innerHTML = '<option value=\"\">Okul seçiniz...</option>' +\n        appState.schools.map((school, index) => \n            `<option value=\"${index}\">${school.name}</option>`\n        ).join('');\n}\n\nfunction selectSchoolForClass() {\n    const selectedIndex = document.getElementById('selected-school').value;\n    appState.selectedSchoolForClass = selectedIndex !== '' ? parseInt(selectedIndex) : null;\n    \n    const classManager = document.getElementById('class-manager');\n    \n    if (appState.selectedSchoolForClass !== null) {\n        classManager.classList.remove('hidden');\n        updateClassList();\n    } else {\n        classManager.classList.add('hidden');\n    }\n}\n\nfunction addClass() {\n    const classNameInput = document.getElementById('class-name');\n    const className = classNameInput.value.trim();\n    \n    if (className && appState.selectedSchoolForClass !== null) {\n        const newClass = {\n            name: className,\n            students: [],\n            id: Date.now()\n        };\n        \n        appState.schools[appState.selectedSchoolForClass].classes.push(newClass);\n        classNameInput.value = '';\n        updateClassList();\n        updateSchoolList(); // Ana listeyı de güncelle\n        saveAppState();\n    }\n}\n\nfunction deleteClass(classIndex) {\n    if (confirm('Bu sınıfı silmek istediğinizden emin misiniz? Tüm öğrencileri silinecektir.')) {\n        appState.schools[appState.selectedSchoolForClass].classes.splice(classIndex, 1);\n        updateClassList();\n        updateSchoolList();\n        saveAppState();\n    }\n}\n\nfunction updateClassList() {\n    if (appState.selectedSchoolForClass === null) return;\n    \n    const school = appState.schools[appState.selectedSchoolForClass];\n    const classesList = document.getElementById('classes-list');\n    const classCount = document.getElementById('class-count');\n    \n    classCount.textContent = school.classes.length;\n    \n    if (school.classes.length === 0) {\n        classesList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Bu okulda henüz sınıf bulunmuyor.</div>';\n        return;\n    }\n    \n    classesList.innerHTML = school.classes.map((classItem, index) => `\n        <div class=\"class-item\">\n            <div>\n                <span class=\"class-name\">${classItem.name}</span>\n                <div class=\"student-count\">\n                    ${(classItem.students || []).length} öğrenci\n                </div>\n            </div>\n            <div class=\"action-buttons\">\n                <button class=\"small-button view-button\" onclick=\"navigateToStudentManagement(${appState.selectedSchoolForClass}, ${index})\">\n                    Öğrenci Yönet\n                </button>\n                <button class=\"small-button delete-button\" onclick=\"deleteClass(${index})\">\n                    Sınıfı Sil\n                </button>\n            </div>\n        </div>\n    `).join('');\n}\n\n// Kriter yönetimi\nfunction navigateToGradeCriteria(grade) {\n    appState.selectedGrade = grade;\n    document.getElementById('criteria-grade').textContent = grade;\n    document.getElementById('criteria-grade-title').textContent = grade;\n    navigateTo('sinif-kriterleri');\n    updateCriteriaList();\n}\n\nfunction addCriteria() {\n    const criteriaInput = document.getElementById('criteria-text');\n    const criteriaText = criteriaInput.value.trim();\n    \n    if (criteriaText && appState.selectedGrade) {\n        appState.criteriaByGrade[appState.selectedGrade].push(criteriaText);\n        criteriaInput.value = '';\n        updateCriteriaList();\n        saveAppState();\n    }\n}\n\nfunction deleteCriteria(index) {\n    if (confirm('Bu kriteri silmek istediğinizden emin misiniz?')) {\n        appState.criteriaByGrade[appState.selectedGrade].splice(index, 1);\n        updateCriteriaList();\n        saveAppState();\n    }\n}\n\nfunction updateCriteriaList() {\n    if (!appState.selectedGrade) return;\n    \n    const criteriaList = document.getElementById('criteria-list');\n    const criteriaCount = document.getElementById('criteria-count');\n    const criteria = appState.criteriaByGrade[appState.selectedGrade];\n    \n    criteriaCount.textContent = criteria.length;\n    \n    if (criteria.length === 0) {\n        criteriaList.innerHTML = `<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz ${appState.selectedGrade}. sınıf için kriter eklenmedi.</div>`;\n        return;\n    }\n    \n    criteriaList.innerHTML = criteria.map((criteriaItem, index) => `\n        <div class=\"list-item\" style=\"display: flex; justify-content: space-between; align-items: center;\">\n            <div>\n                <strong>Kriter ${index + 1}:</strong> ${criteriaItem}\n            </div>\n            <button class=\"small-button delete-button\" onclick=\"deleteCriteria(${index})\" style=\"margin-left: 10px;\">\n                Sil\n            </button>\n        </div>\n    `).join('');\n}\n\n// Öğrenci yönetimi\nfunction navigateToStudentManagement(schoolIndex, classIndex) {\n    appState.selectedSchoolIndex = schoolIndex;\n    appState.selectedClassIndex = classIndex;\n    \n    const school = appState.schools[schoolIndex];\n    const classItem = school.classes[classIndex];\n    \n    document.getElementById('student-school-name').textContent = school.name;\n    document.getElementById('student-class-name').textContent = classItem.name;\n    \n    navigateTo('sinif-yonetimi');\n    updateStudentsList();\n}\n\nfunction addStudent() {\n    const numberInput = document.getElementById('student-number');\n    const nameInput = document.getElementById('student-name');\n    const number = numberInput.value.trim();\n    const name = nameInput.value.trim();\n    \n    if (number && name && appState.selectedSchoolIndex !== null && appState.selectedClassIndex !== null) {\n        const student = {\n            number: number,\n            name: name,\n            id: Date.now()\n        };\n        \n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        if (!classItem.students) classItem.students = [];\n        classItem.students.push(student);\n        \n        numberInput.value = '';\n        nameInput.value = '';\n        updateStudentsList();\n        saveAppState();\n    }\n}\n\nfunction deleteStudent(studentId) {\n    if (confirm('Bu öğrenciyi silmek istediğinizden emin misiniz?')) {\n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        classItem.students = classItem.students.filter(s => s.id !== studentId);\n        updateStudentsList();\n        saveAppState();\n    }\n}\n\nfunction uploadStudentFile() {\n    const fileInput = document.getElementById('student-file');\n    const file = fileInput.files[0];\n    \n    if (file && file.type === 'text/plain') {\n        const reader = new FileReader();\n        reader.onload = function(e) {\n            const content = e.target.result;\n            parseAndAddStudents(content);\n        };\n        reader.readAsText(file, 'UTF-8');\n    } else {\n        alert('Lütfen .txt uzantılı bir dosya seçin.');\n    }\n}\n\nfunction parseAndAddStudents(content) {\n    const lines = content.split('\\n').filter(line => line.trim());\n    const newStudents = [];\n    \n    lines.forEach(line => {\n        const parts = line.trim().split('\\t');\n        if (parts.length >= 2) {\n            const number = parts[0].trim();\n            const name = parts[1].trim();\n            if (number && name) {\n                newStudents.push({\n                    number: number,\n                    name: name,\n                    id: Date.now() + Math.random()\n                });\n            }\n        }\n    });\n    \n    if (newStudents.length > 0) {\n        const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n        if (!classItem.students) classItem.students = [];\n        classItem.students.push(...newStudents);\n        \n        updateStudentsList();\n        saveAppState();\n        alert(`${newStudents.length} öğrenci başarıyla eklendi.`);\n    } else {\n        alert('Dosyada geçerli öğrenci bilgisi bulunamadı. Format: Numara[TAB]Ad Soyad');\n    }\n}\n\nfunction updateStudentsList() {\n    if (appState.selectedSchoolIndex === null || appState.selectedClassIndex === null) return;\n    \n    const classItem = appState.schools[appState.selectedSchoolIndex].classes[appState.selectedClassIndex];\n    const students = classItem.students || [];\n    const studentsList = document.getElementById('students-list');\n    const studentsCount = document.getElementById('students-count');\n    \n    studentsCount.textContent = students.length;\n    \n    if (students.length === 0) {\n        studentsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Bu sınıfta henüz öğrenci bulunmuyor.</div>';\n        return;\n    }\n    \n    studentsList.innerHTML = students.map(student => `\n        <div class=\"student-item\">\n            <div class=\"student-info\">\n                <span class=\"student-number\">#${student.number}</span>\n                <span class=\"student-name\">${student.name}</span>\n            </div>\n            <button class=\"small-button delete-button\" onclick=\"deleteStudent(${student.id})\">\n                Sil\n            </button>\n        </div>\n    `).join('');\n}\n\n// Sınav yönetimi\nfunction updateExamSchools() {\n    const select = document.getElementById('exam-school');\n    select.innerHTML = '<option value=\"\">Okul seçiniz...</option>' +\n        appState.schools.map((school, index) => \n            `<option value=\"${index}\">${school.name}</option>`\n        ).join('');\n}\n\nfunction updateExamClasses() {\n    const schoolIndex = document.getElementById('exam-school').value;\n    const classSelect = document.getElementById('exam-class');\n    \n    if (schoolIndex === '') {\n        classSelect.innerHTML = '<option value=\"\">Sınıf seçiniz...</option>';\n        classSelect.disabled = true;\n        return;\n    }\n    \n    const school = appState.schools[parseInt(schoolIndex)];\n    classSelect.disabled = false;\n    classSelect.innerHTML = '<option value=\"\">Sınıf seçiniz...</option>' +\n        school.classes.map((classItem, index) => \n            `<option value=\"${index}\">${classItem.name}</option>`\n        ).join('');\n}\n\nfunction updateExamCriteria() {\n    const grade = document.getElementById('exam-grade').value;\n    const criteriaSection = document.getElementById('criteria-selection-section');\n    const criteriaDiv = document.getElementById('criteria-selection');\n    \n    if (grade === '') {\n        criteriaSection.classList.add('hidden');\n        return;\n    }\n    \n    const criteria = appState.criteriaByGrade[grade] || [];\n    \n    if (criteria.length === 0) {\n        criteriaSection.classList.add('hidden');\n        alert(`${grade}. sınıf için henüz kriter eklenmemiş. Lütfen önce kriterler bölümünden kriter ekleyiniz.`);\n        return;\n    }\n    \n    criteriaSection.classList.remove('hidden');\n    appState.selectedCriteria = [];\n    appState.selectedCriteriaWithDeadlines = [];\n    \n    criteriaDiv.innerHTML = criteria.map((criteria, index) => `\n        <div class=\"criteria-with-deadline\">\n            <div class=\"criteria-checkbox-with-date\" onclick=\"toggleCriteriaWithDeadline('${criteria}', ${index})\">\n                <input type=\"checkbox\" id=\"criteria-${index}\">\n                <span>${criteria}</span>\n                <input type=\"date\" id=\"deadline-${index}\" class=\"date-input\" onclick=\"event.stopPropagation()\" onchange=\"updateCriteriaDeadline('${criteria}', ${index})\">\n            </div>\n        </div>\n    `).join('');\n    \n    updateSelectedCriteriaCount();\n    updateExamSummary();\n}\n\nfunction toggleCriteriaWithDeadline(criteria, index) {\n    const checkbox = document.getElementById(`criteria-${index}`);\n    const criteriaDiv = checkbox.parentElement;\n    const deadlineInput = document.getElementById(`deadline-${index}`);\n    \n    if (appState.selectedCriteria.includes(criteria)) {\n        // Remove criteria\n        appState.selectedCriteria = appState.selectedCriteria.filter(c => c !== criteria);\n        appState.selectedCriteriaWithDeadlines = appState.selectedCriteriaWithDeadlines.filter(c => c.criteria !== criteria);\n        checkbox.checked = false;\n        criteriaDiv.classList.remove('selected');\n        deadlineInput.value = '';\n    } else {\n        // Add criteria\n        appState.selectedCriteria.push(criteria);\n        appState.selectedCriteriaWithDeadlines.push({\n            criteria: criteria,\n            deadline: deadlineInput.value || ''\n        });\n        checkbox.checked = true;\n        criteriaDiv.classList.add('selected');\n    }\n    \n    updateSelectedCriteriaCount();\n    updateExamSummary();\n}\n\nfunction updateCriteriaDeadline(criteria, index) {\n    const deadlineInput = document.getElementById(`deadline-${index}`);\n    const deadlineValue = deadlineInput.value;\n    \n    // Update the deadline in selectedCriteriaWithDeadlines\n    const criteriaItem = appState.selectedCriteriaWithDeadlines.find(c => c.criteria === criteria);\n    if (criteriaItem) {\n        criteriaItem.deadline = deadlineValue;\n        updateExamSummary();\n    }\n}\n\nfunction updateSelectedCriteriaCount() {\n    document.getElementById('selected-criteria-count').textContent = appState.selectedCriteria.length;\n}\n\nfunction updateExamSummary() {\n    const examName = document.getElementById('exam-name').value;\n    const schoolIndex = document.getElementById('exam-school').value;\n    const semester = document.getElementById('exam-semester').value;\n    const classIndex = document.getElementById('exam-class').value;\n    const grade = document.getElementById('exam-grade').value;\n    \n    const summaryDiv = document.getElementById('exam-summary');\n    const summaryContent = document.getElementById('exam-summary-content');\n    \n    if (examName && schoolIndex !== '' && semester && classIndex !== '' && grade && appState.selectedCriteriaWithDeadlines.length > 0) {\n        const school = appState.schools[parseInt(schoolIndex)];\n        const classItem = school.classes[parseInt(classIndex)];\n        \n        const criteriaList = appState.selectedCriteriaWithDeadlines.map(c => \n            `<li>${c.criteria} ${c.deadline ? `(Son Teslim: ${c.deadline})` : ''}</li>`\n        ).join('');\n        \n        summaryDiv.classList.remove('hidden');\n        summaryContent.innerHTML = `\n            <p><strong>Sınav Adı:</strong> ${examName}</p>\n            <p><strong>Okul:</strong> ${school.name}</p>\n            <p><strong>Dönem:</strong> ${semester}. DÖNEM</p>\n            <p><strong>Sınıf:</strong> ${classItem.name}</p>\n            <p><strong>Seviye:</strong> ${grade}. Sınıf</p>\n            <p><strong>Seçilen Kriterler (${appState.selectedCriteriaWithDeadlines.length}):</strong></p>\n            <ul>${criteriaList}</ul>\n        `;\n    } else {\n        summaryDiv.classList.add('hidden');\n    }\n}\n\nfunction createExam() {\n    const examName = document.getElementById('exam-name').value.trim();\n    const schoolIndex = document.getElementById('exam-school').value;\n    const semester = document.getElementById('exam-semester').value;\n    const classIndex = document.getElementById('exam-class').value;\n    const grade = document.getElementById('exam-grade').value;\n    \n    if (examName && schoolIndex !== '' && semester && classIndex !== '' && grade && appState.selectedCriteriaWithDeadlines.length > 0) {\n        const school = appState.schools[parseInt(schoolIndex)];\n        const classItem = school.classes[parseInt(classIndex)];\n        \n        const newExam = {\n            id: Date.now(),\n            name: examName,\n            school: school.name,\n            schoolIndex: parseInt(schoolIndex),\n            semester: semester,\n            class: classItem.name,\n            classIndex: parseInt(classIndex),\n            grade: grade,\n            criteriaWithDeadlines: [...appState.selectedCriteriaWithDeadlines],\n            students: [...(classItem.students || [])],\n            scores: {},\n            createdAt: new Date().toLocaleDateString('tr-TR')\n        };\n        \n        // Initialize scores for all students\n        newExam.students.forEach(student => {\n            newExam.scores[student.id] = {};\n            newExam.criteriaWithDeadlines.forEach(criteria => {\n                newExam.scores[student.id][criteria.criteria] = null; // null = not scored yet\n            });\n        });\n        \n        appState.exams.push(newExam);\n        \n        // Formu temizle\n        document.getElementById('exam-name').value = '';\n        document.getElementById('exam-school').value = '';\n        document.getElementById('exam-semester').value = '';\n        document.getElementById('exam-class').value = '';\n        document.getElementById('exam-grade').value = '';\n        document.getElementById('exam-class').disabled = true;\n        document.getElementById('criteria-selection-section').classList.add('hidden');\n        document.getElementById('exam-summary').classList.add('hidden');\n        appState.selectedCriteria = [];\n        appState.selectedCriteriaWithDeadlines = [];\n        \n        updateExamsList();\n        saveAppState();\n        alert('Sınav başarıyla oluşturuldu!');\n    } else {\n        alert('Lütfen tüm alanları doldurun, dönem seçin ve en az bir kriter seçin.');\n    }\n}\n\nfunction updateExamsList() {\n    const examsListContainer = document.getElementById('exams-list-container');\n    const examsList = document.getElementById('exams-list');\n    const examsCount = document.getElementById('exams-count');\n    \n    examsCount.textContent = appState.exams.length;\n    \n    if (appState.exams.length === 0) {\n        examsListContainer.classList.add('hidden');\n        return;\n    }\n    \n    examsListContainer.classList.remove('hidden');\n    examsList.innerHTML = appState.exams.map(exam => `\n        <div class=\"list-item\">\n            <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                <div>\n                    <strong>${exam.name}</strong><br/>\n                    <small>${exam.school} - ${exam.class} (${exam.grade}. Sınıf) - ${exam.semester}. DÖNEM - ${exam.criteriaWithDeadlines.length} kriter</small><br/>\n                    <small style=\"color: #666;\">Oluşturulma: ${exam.createdAt}</small>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction updateMyExamsList() {\n    const examsList = document.getElementById('my-exams-list');\n    const examsCount = document.getElementById('my-exams-count');\n    \n    examsCount.textContent = appState.exams.length;\n    \n    if (appState.exams.length === 0) {\n        examsList.innerHTML = '<div class=\"list-item\" style=\"font-style: italic; color: #666;\">Henüz sınav oluşturulmamış.</div>';\n        return;\n    }\n    \n    examsList.innerHTML = appState.exams.map(exam => `\n        <div class=\"list-item\" style=\"cursor: pointer;\" onclick=\"openExamScoring(${exam.id})\">\n            <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                <div>\n                    <strong>${exam.class} ${exam.semester}. DÖNEM ${exam.name}</strong><br/>\n                    <small>${exam.school} - ${exam.grade}. Sınıf - ${exam.criteriaWithDeadlines.length} kriter - ${exam.students.length} öğrenci</small><br/>\n                    <small style=\"color: #666;\">Oluşturulma: ${exam.createdAt}</small>\n                </div>\n                <div style=\"color: #667eea;\">\n                    <span style=\"font-size: 24px;\">▶</span>\n                </div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction updateReportExamSelect() {\n    const select = document.getElementById('report-exam-select');\n    select.innerHTML = '<option value=\"\">Rapor alınacak sınavı seçiniz...</option>' +\n        appState.exams.map((exam, index) => \n            `<option value=\"${index}\">${exam.class} ${exam.semester}. DÖNEM ${exam.name} - ${exam.school}</option>`\n        ).join('');\n}\n\nfunction openExamScoring(examId) {\n    const exam = appState.exams.find(e => e.id === examId);\n    if (!exam) return;\n    \n    appState.currentExam = exam;\n    document.getElementById('scoring-exam-title').textContent = \n        `${exam.class} ${exam.semester}. DÖNEM ${exam.name} - Puanlama`;\n    \n    createScoringTable(exam);\n    navigateTo('sinav-puanlama');\n}\n\nfunction createScoringTable(exam) {\n    const container = document.getElementById('scoring-table-container');\n    \n    if (exam.students.length === 0) {\n        container.innerHTML = '<p style=\"color: white; text-align: center;\">Bu sınıfta öğrenci bulunmuyor.</p>';\n        return;\n    }\n    \n    const headerCells = exam.criteriaWithDeadlines.map(c => \n        `<th style=\"min-width: 120px;\">\n            ${c.criteria}<br/>\n            <small>(${c.deadline || 'Tarih yok'})<br/>(20 puan)</small>\n        </th>`\n    ).join('');\n    \n    const studentRows = exam.students.map(student => {\n        const criteriaCells = exam.criteriaWithDeadlines.map(criteria => {\n            const currentScore = exam.scores[student.id][criteria.criteria];\n            return `\n                <td>\n                    <div class=\"score-buttons\">\n                        <button class=\"score-btn g ${currentScore === 10 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 10)\">G</button>\n                        <button class=\"score-btn iyi ${currentScore === 15 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 15)\">İYİ</button>\n                        <button class=\"score-btn ci ${currentScore === 20 ? 'selected' : ''}\" \n                                onclick=\"setStudentScore(${student.id}, '${criteria.criteria}', 20)\">Çİ</button>\n                    </div>\n                </td>\n            `;\n        }).join('');\n        \n        const totalScore = Object.values(exam.scores[student.id]).reduce((sum, score) => {\n            return sum + (score || 0);\n        }, 0);\n        \n        return `\n            <tr>\n                <td class=\"student-number\">${student.number}</td>\n                <td class=\"student-name\">${student.name}</td>\n                ${criteriaCells}\n                <td class=\"total-score\">${totalScore}</td>\n            </tr>\n        `;\n    }).join('');\n    \n    container.innerHTML = `\n        <table class=\"scoring-table\">\n            <thead>\n                <tr>\n                    <th>OKUL NO</th>\n                    <th>AD SOYAD</th>\n                    ${headerCells}\n                    <th>TOPLAM</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${studentRows}\n            </tbody>\n        </table>\n    `;\n}\n\nfunction setStudentScore(studentId, criteria, score) {\n    if (!appState.currentExam) return;\n    \n    // Sanitize criteria to prevent XSS\n    const safeCriteria = criteria.replace(/'/g, \"&#x27;\");\n    \n    // Update score in current exam\n    appState.currentExam.scores[studentId][criteria] = score;\n    \n    // Update score in stored exams\n    const examIndex = appState.exams.findIndex(e => e.id === appState.currentExam.id);\n    if (examIndex !== -1) {\n        appState.exams[examIndex].scores[studentId][criteria] = score;\n    }\n    \n    // Recreate the table to show updated scores\n    createScoringTable(appState.currentExam);\n    saveAppState();\n}\n\nfunction saveExamScores() {\n    saveAppState();\n    alert('Puanlar başarıyla kaydedildi!');\n}\n\nfunction updateReportPreview() {\n    const examIndex = document.getElementById('report-exam-select').value;\n    const previewDiv = document.getElementById('report-preview');\n    const contentDiv = document.getElementById('report-content');\n    \n    if (examIndex === '') {\n        previewDiv.classList.add('hidden');\n        return;\n    }\n    \n    const exam = appState.exams[parseInt(examIndex)];\n    if (!exam) return;\n    \n    const currentYear = new Date().getFullYear();\n    const nextYear = currentYear + 1;\n    \n    const headerCells = exam.criteriaWithDeadlines.map(c => \n        `<th style=\"border: 1px solid #000; padding: 8px; text-align: center; vertical-align: top;\">\n            ${c.criteria}<br/>\n            ${c.deadline || '..../..../.....'}'\n        </th>`\n    ).join('');\n    \n    const scoringCells = exam.criteriaWithDeadlines.map(() => \n        `<th style=\"border: 1px solid #000; padding: 4px;\">\n            <div style=\"display: flex; justify-content: space-around;\">\n                <span>G</span><span>İYİ</span><span>Çİ</span>\n            </div>\n        </th>`\n    ).join('');\n    \n    const studentRows = exam.students.map(student => {\n        const criteriaCells = exam.criteriaWithDeadlines.map(criteria => {\n            const score = exam.scores[student.id][criteria.criteria];\n            const gMark = score === 10 ? '●' : '○';\n            const iyiMark = score === 15 ? '●' : '○';\n            const ciMark = score === 20 ? '●' : '○';\n            \n            return `\n                <td style=\"border: 1px solid #000; padding: 4px;\">\n                    <div style=\"display: flex; justify-content: space-around;\">\n                        <span>${gMark}</span><span>${iyiMark}</span><span>${ciMark}</span>\n                    </div>\n                </td>\n            `;\n        }).join('');\n        \n        const totalScore = Object.values(exam.scores[student.id]).reduce((sum, score) => {\n            return sum + (score || 0);\n        }, 0);\n        \n        return `\n            <tr>\n                <td style=\"border: 1px solid #000; padding: 8px; text-align: center;\">${student.number}</td>\n                <td style=\"border: 1px solid #000; padding: 8px;\">${student.name}</td>\n                ${criteriaCells}\n                <td style=\"border: 1px solid #000; padding: 8px; text-align: center; font-weight: bold;\">${totalScore}</td>\n            </tr>\n        `;\n    }).join('');\n    \n    contentDiv.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 20px; font-weight: bold; font-size: 14px;\">\n            ${currentYear} – ${nextYear} EĞİTİM ÖĞRETİM YILI ${exam.school} ${exam.class} SINIFI ${exam.semester}. DÖNEM ${exam.name}\n        </div>\n        \n        <table style=\"width: 100%; border-collapse: collapse; font-size: 12px; font-family: Arial, sans-serif;\">\n            <thead>\n                <tr>\n                    <th rowspan=\"2\" style=\"border: 1px solid #000; padding: 8px; text-align: center; vertical-align: middle;\">OKUL NO</th>\n                    <th rowspan=\"2\" style=\"border: 1px solid #000; padding: 8px; text-align: center; vertical-align: middle;\">AD SOYAD</th>\n                    ${headerCells}\n                    <th rowspan=\"2\" style=\"border: 1px solid #000; padding: 8px; text-align: center; vertical-align: middle;\">TOPLAM</th>\n                </tr>\n                <tr>\n                    ${scoringCells}\n                </tr>\n            </thead>\n            <tbody>\n                ${studentRows}\n            </tbody>\n        </table>\n        \n        <div style=\"margin-top: 20px; font-size: 12px;\">\n            <strong>G: 10 PUAN &nbsp;&nbsp; İYİ: 15 PUAN &nbsp;&nbsp; Çİ: 20 PUAN</strong>\n        </div>\n    `;\n    \n    previewDiv.classList.remove('hidden');\n}\n\nfunction exportToWord() {\n    const examIndex = document.getElementById('report-exam-select').value;\n    if (examIndex === '') {\n        alert('Lütfen önce bir sınav seçin.');\n        return;\n    }\n    \n    const exam = appState.exams[parseInt(examIndex)];\n    const content = document.getElementById('report-content').innerHTML;\n    \n    // Create a complete HTML document for Word export\n    const fullContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>${exam.class} ${exam.semester}. DÖNEM ${exam.name}</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 20px; }\n                table { border-collapse: collapse; width: 100%; }\n                th, td { border: 1px solid #000; padding: 4px; text-align: center; }\n                .student-name { text-align: left; }\n            </style>\n        </head>\n        <body>\n            ${content}\n        </body>\n        </html>\n    `;\n    \n    // Create and download the file\n    const blob = new Blob([fullContent], { type: 'application/msword' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${exam.class}_${exam.semester}_DONEM_${exam.name}_SINAV_RAPORU.doc`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n    \n    alert('Rapor başarıyla indirildi!');\n}\n\n// Enter tuşu ile form gönderme\ndocument.addEventListener('DOMContentLoaded', async function() {\n    // Database + Local Storage'dan veriyi yükle\n    await loadAppState();\n    \n    // Enter tuşu event listeners\n    document.getElementById('school-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addSchool();\n    });\n    \n    document.getElementById('class-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addClass();\n    });\n    \n    document.getElementById('criteria-text').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addCriteria();\n    });\n    \n    document.getElementById('student-number').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            document.getElementById('student-name').focus();\n        }\n    });\n    \n    document.getElementById('student-name').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') addStudent();\n    });\n    \n    // Sınav formu değişiklik dinleyicileri\n    document.getElementById('exam-name').addEventListener('input', updateExamSummary);\n    document.getElementById('exam-school').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-semester').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-class').addEventListener('change', updateExamSummary);\n    document.getElementById('exam-grade').addEventListener('change', updateExamSummary);\n    \n    // İlk sayfa yüklemesi\n    navigateTo('anasayfa');\n});","size_bytes":39323},"okul-app/platforms/android/app/src/main/assets/www/server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst port = process.env.PORT || 5000;\n\n// JSON file based storage (secure path outside public access)\nconst DATA_FILE = path.join(__dirname, '..', 'private_data.json');\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Only serve specific safe files (not the entire directory)\napp.use('/style.css', express.static(path.join(__dirname, 'style.css')));\napp.use('/script.js', express.static(path.join(__dirname, 'script.js')));\napp.use('/attached_assets', express.static(path.join(__dirname, 'attached_assets')));\n\n// Helper functions for JSON file operations\nfunction readSyncData() {\n  try {\n    if (fs.existsSync(DATA_FILE)) {\n      const data = fs.readFileSync(DATA_FILE, 'utf8');\n      return JSON.parse(data);\n    }\n    return {\n      schools: [],\n      criteriaByGrade: {5: [], 6: [], 7: [], 8: []},\n      exams: []\n    };\n  } catch (error) {\n    console.error('Error reading sync data:', error);\n    return {\n      schools: [],\n      criteriaByGrade: {5: [], 6: [], 7: [], 8: []},\n      exams: []\n    };\n  }\n}\n\nfunction writeSyncData(data) {\n  try {\n    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error writing sync data:', error);\n    return false;\n  }\n}\n\n// Sync API endpoints (JSON file based)\napp.post('/api/sync', async (req, res) => {\n  try {\n    const { dataType, data } = req.body;\n    \n    // Read current data\n    let currentData = readSyncData();\n    \n    // Update specific data type\n    if (dataType === 'schools') {\n      currentData.schools = data;\n    } else if (dataType === 'criteria') {\n      currentData.criteriaByGrade = data;\n    } else if (dataType === 'exams') {\n      currentData.exams = data;\n    }\n    \n    // Write updated data back\n    const success = writeSyncData(currentData);\n    \n    if (success) {\n      res.json({ success: true });\n      console.log(`Synced ${dataType} data successfully`);\n    } else {\n      res.status(500).json({ error: 'Write failed' });\n    }\n  } catch (error) {\n    console.error('Sync error:', error);\n    res.status(500).json({ error: 'Sync failed' });\n  }\n});\n\napp.get('/api/data', async (req, res) => {\n  try {\n    // Read data from JSON file\n    const data = readSyncData();\n    res.json(data);\n    console.log('Data loaded successfully');\n  } catch (error) {\n    console.error('Data load error:', error);\n    res.status(500).json({ error: 'Load failed' });\n  }\n});\n\n// Health check\napp.get('/api/health', async (req, res) => {\n  try {\n    // Check if we can read/write the sync file\n    const testData = readSyncData();\n    res.json({ status: 'healthy', storage: 'json-file' });\n  } catch (error) {\n    res.status(500).json({ status: 'unhealthy', storage: 'error' });\n  }\n});\n\n// Serve static files\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n\napp.listen(port, '0.0.0.0', () => {\n  console.log(`Server running on port ${port}`);\n});","size_bytes":3074},"okul-app/platforms/android/app/src/main/assets/www/style.css":{"content":"/* Genel ayarlar */\n* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\nhtml, body {\n    height: 100%;\n    width: 100%;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n        sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    \n    /* Arkaplan resmi */\n    background-image: url('arkaplan.jpg');\n    background-size: cover;\n    background-position: center;\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n    \n    /* Şeffaf siyah overlay */\n    background-color: rgba(0, 0, 0, 0.4);\n    background-blend-mode: multiply;\n    \n    min-height: 100vh;\n    overflow: hidden;\n}\n\n/* Ana container - ekranın %80'ini kullan */\n#app {\n    width: 80%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n    min-height: 100vh;\n}\n\n/* Sayfa stilleri */\n.page {\n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(10px);\n    border-radius: 12px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\n    padding: 40px;\n    min-height: 600px;\n    margin: 20px 0;\n    color: white;\n}\n\n.page-title {\n    font-size: 22px;\n    font-weight: bold;\n    margin-bottom: 30px;\n    text-align: center;\n    color: white;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);\n}\n\n/* Görünürlük kontrolleri */\n.hidden {\n    display: none !important;\n}\n\n/* Buton stilleri */\n.button {\n    display: block;\n    width: 100%;\n    max-width: 350px;\n    margin: 20px auto;\n    padding: 18px 24px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border: none;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    text-align: center;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n}\n\n.button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n.button:active {\n    transform: translateY(-1px);\n}\n\n.back-button {\n    margin-bottom: 20px;\n    padding: 12px 24px;\n    font-size: 16px;\n    color: #667eea;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #667eea;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(5px);\n}\n\n.back-button:hover {\n    background: #667eea;\n    color: white;\n}\n\n/* Tab sistemi */\n.tabs {\n    display: flex;\n    margin-bottom: 30px;\n    border-bottom: 2px solid #ddd;\n    background: rgba(248, 249, 250, 0.8);\n    border-radius: 8px 8px 0 0;\n}\n\n.tab {\n    flex: 1;\n    padding: 15px 24px;\n    cursor: pointer;\n    border: none;\n    background: transparent;\n    font-size: 16px;\n    font-weight: bold;\n    color: #667eea;\n    border-bottom: 3px solid transparent;\n    transition: all 0.3s ease;\n}\n\n.tab.active {\n    color: #333;\n    border-bottom-color: #667eea;\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.tab:hover {\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.tab-content {\n    animation: fadeIn 0.3s ease;\n}\n\n/* Form stilleri */\n.form-container, .form-section {\n    background: rgba(0, 0, 0, 0.4);\n    padding: 25px;\n    border-radius: 10px;\n    margin: 25px 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.form-section h3 {\n    margin-top: 0;\n    margin-bottom: 20px;\n    color: white;\n    font-size: 15px;\n}\n\n.input-group {\n    display: flex;\n    gap: 12px;\n    margin-bottom: 20px;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n.text-input, .select-input {\n    flex: 1;\n    min-width: 200px;\n    padding: 14px;\n    font-size: 16px;\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n    background: rgba(255, 255, 255, 0.9);\n}\n\n.text-input:focus, .select-input:focus {\n    outline: none;\n    border-color: #667eea;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.add-button {\n    padding: 14px 20px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: #28a745;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);\n}\n\n.add-button:hover {\n    background: #218838;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);\n}\n\n/* Liste stilleri */\n.list-container {\n    margin-top: 30px;\n}\n\n.list-title {\n    font-size: 18px;\n    font-weight: bold;\n    margin-bottom: 20px;\n    color: white;\n    padding: 10px 0;\n    border-bottom: 2px solid #667eea;\n}\n\n.item-list {\n    list-style: none;\n    padding: 0;\n}\n\n.list-item, .school-item, .class-item, .student-item {\n    background: rgba(255, 255, 255, 0.08);\n    margin: 12px 0;\n    padding: 18px;\n    border-radius: 8px;\n    border-left: 4px solid #667eea;\n    font-size: 16px;\n    color: white;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n    transition: all 0.3s ease;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.list-item:hover, .school-item:hover, .class-item:hover, .student-item:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n/* Okul ve sınıf özel stilleri */\n.school-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 15px;\n}\n\n.school-name {\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n}\n\n.class-count, .student-count {\n    color: rgba(255, 255, 255, 0.7);\n    font-size: 14px;\n    margin-top: 5px;\n}\n\n.classes-container {\n    margin-top: 15px;\n    padding-left: 20px;\n    border-left: 2px solid #e9ecef;\n}\n\n.class-item {\n    background: rgba(255, 255, 255, 0.15);\n    margin: 8px 0;\n    padding: 12px 15px;\n    border-radius: 6px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-left: 3px solid #6c757d;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.class-name {\n    font-weight: bold;\n    color: white;\n}\n\n/* Aksiyon butonları */\n.action-buttons {\n    display: flex;\n    gap: 8px;\n    flex-wrap: wrap;\n}\n\n.small-button {\n    padding: 6px 12px;\n    font-size: 12px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n\n.view-button {\n    background: #17a2b8;\n    color: white;\n}\n\n.view-button:hover {\n    background: #138496;\n    transform: translateY(-1px);\n}\n\n.delete-button {\n    background: #dc3545;\n    color: white;\n}\n\n.delete-button:hover {\n    background: #c82333;\n    transform: translateY(-1px);\n}\n\n/* Sınıf seviyeleri butonları */\n.grade-buttons {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.grade-button {\n    padding: 25px;\n    font-size: 16px;\n    font-weight: bold;\n    color: white;\n    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);\n    border: none;\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);\n}\n\n.grade-button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);\n}\n\n/* Dosya yükleme */\n.file-upload {\n    margin: 15px 0;\n    padding: 20px;\n    border: 2px dashed #ddd;\n    border-radius: 8px;\n    text-align: center;\n    background: rgba(248, 249, 250, 0.5);\n    transition: all 0.3s ease;\n}\n\n.file-upload:hover {\n    border-color: #667eea;\n    background: rgba(102, 126, 234, 0.1);\n}\n\n.file-input {\n    margin: 10px 0;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n    background: white;\n    width: 100%;\n    max-width: 300px;\n}\n\n/* Öğrenci özel stilleri */\n.student-item {\n    background: rgba(255, 193, 7, 0.2);\n    border-left: 4px solid #ffc107;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid rgba(255, 193, 7, 0.3);\n}\n\n.student-info {\n    display: flex;\n    gap: 20px;\n    align-items: center;\n}\n\n.student-number {\n    font-weight: bold;\n    color: #ffc107;\n    background: rgba(255, 193, 7, 0.3);\n    padding: 4px 8px;\n    border-radius: 4px;\n}\n\n.student-name {\n    color: white;\n    font-size: 16px;\n}\n\n/* Kriter seçimi */\n.criteria-selection {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 12px;\n    margin: 15px 0;\n}\n\n.criteria-checkbox {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 12px 16px;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.criteria-checkbox:hover {\n    background: rgba(102, 126, 234, 0.1);\n    border-color: #667eea;\n}\n\n.criteria-checkbox.selected {\n    background: rgba(102, 126, 234, 0.2);\n    border-color: #667eea;\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n/* Sınav özeti */\n.exam-summary {\n    background: rgba(40, 167, 69, 0.2);\n    border: 2px solid rgba(40, 167, 69, 0.5);\n    border-radius: 8px;\n    padding: 25px;\n    margin: 25px 0;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n}\n\n.exam-summary h3 {\n    color: #28a745;\n    margin-bottom: 15px;\n}\n\n.exam-summary p {\n    margin: 8px 0;\n    color: white;\n}\n\n/* Animasyonlar */\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.page {\n    animation: fadeIn 0.5s ease;\n}\n\n/* Scrollbar özel ayarları */\n.page.scrollable {\n    overflow-y: auto;\n    max-height: calc(100vh - 40px);\n}\n\n/* Compact mode - okul-ekle ve sinif-yonetimi için */\nbody.compact #app {\n    padding: 4px;\n}\n\nbody.compact .page {\n    margin: 0;\n    padding: 8px;\n    min-height: unset;\n    height: calc(100vh - 8px);\n    overflow: hidden;\n}\n\nbody.compact .form-container,\nbody.compact .form-section {\n    padding: 8px;\n    margin: 4px 0;\n}\n\nbody.compact .list-title {\n    font-size: 14px;\n    margin: 4px 0 6px;\n    padding: 4px 0;\n}\n\nbody.compact .school-item,\nbody.compact .class-item,\nbody.compact .student-item {\n    margin: 3px 0;\n    padding: 6px 10px;\n    font-size: 13px;\n    line-height: 1.2;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    border-width: 1px;\n}\n\n/* Sınıf listesi grid layout - 3 sıra yan yana - Güçlü selector */\n#classes-list {\n    display: grid !important;\n    grid-template-columns: repeat(3, 1fr) !important;\n    gap: 6px !important;\n    margin-top: 8px !important;\n}\n\n#classes-list .class-item {\n    margin: 0 !important;\n    padding: 4px 6px !important;\n    font-size: 11px !important;\n    display: flex !important;\n    flex-direction: column !important;\n    min-height: 45px !important;\n    max-width: none !important;\n    width: 100% !important;\n    line-height: 1.1 !important;\n}\n\n/* Üst satır: Sınıf adı + Butonlar yan yana */\n#classes-list .class-item > div:first-child {\n    display: flex !important;\n    justify-content: space-between !important;\n    align-items: center !important;\n    margin-bottom: 3px !important;\n}\n\n#classes-list .class-name {\n    font-size: 11px !important;\n    font-weight: bold !important;\n    margin: 0 !important;\n    line-height: 1.1 !important;\n    color: white !important;\n    flex-shrink: 0 !important;\n}\n\n#classes-list .action-buttons {\n    gap: 2px !important;\n    flex-direction: row !important;\n    align-items: center !important;\n    flex-shrink: 0 !important;\n}\n\n#classes-list .small-button {\n    padding: 1px 4px !important;\n    font-size: 8px !important;\n    line-height: 1 !important;\n    margin: 0 !important;\n    white-space: nowrap !important;\n    min-width: auto !important;\n}\n\n/* Alt satır: Öğrenci sayısı */\n#classes-list .student-count {\n    font-size: 9px !important;\n    margin: 0 !important;\n    padding: 0 !important;\n    color: rgba(255, 255, 255, 0.6) !important;\n    text-align: left !important;\n    line-height: 1 !important;\n}\n\nbody.compact .school-header {\n    margin-bottom: 8px;\n}\n\nbody.compact .school-name {\n    font-size: 14px;\n}\n\nbody.compact .class-count,\nbody.compact .student-count {\n    font-size: 12px;\n    margin-top: 2px;\n}\n\nbody.compact .action-buttons {\n    gap: 3px;\n}\n\nbody.compact .small-button {\n    padding: 2px 6px;\n    font-size: 10px;\n    line-height: 1.2;\n}\n\n/* Okul listesi için butonlar normal boyutta kalsın */\nbody.compact #schools-list .small-button {\n    padding: 3px 8px;\n    font-size: 10px;\n}\n\n/* Sınıf yönetimi sayfası için ek optimizasyonlar */\n#sinif-yonetimi .form-section {\n    padding: 6px !important;\n    margin: 4px 0 !important;\n}\n\n#sinif-yonetimi .list-title {\n    font-size: 13px !important;\n    margin: 4px 0 6px !important;\n    padding: 2px 0 !important;\n}\n\n/* Yeni Sınıf Ekle alanını daralt */\n#sinif-yonetimi .form-section h3 {\n    margin: 0 0 8px 0 !important;\n    font-size: 13px !important;\n}\n\n#sinif-yonetimi .input-group {\n    margin-bottom: 6px !important;\n    gap: 4px !important;\n}\n\n#sinif-yonetimi .text-input {\n    padding: 4px 6px !important;\n    font-size: 11px !important;\n}\n\n#sinif-yonetimi .primary-button {\n    padding: 4px 8px !important;\n    font-size: 11px !important;\n}\n\nbody.compact .input-group {\n    gap: 6px;\n    margin-bottom: 8px;\n}\n\nbody.compact .text-input,\nbody.compact .select-input {\n    font-size: 13px;\n    padding: 6px;\n}\n\nbody.compact .primary-button {\n    padding: 6px 12px;\n    font-size: 12px;\n}\n\n.page.scrollable::-webkit-scrollbar {\n    width: 8px;\n}\n\n.page.scrollable::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 4px;\n}\n\n.page.scrollable::-webkit-scrollbar-thumb {\n    background: rgba(102, 126, 234, 0.6);\n    border-radius: 4px;\n}\n\n.page.scrollable::-webkit-scrollbar-thumb:hover {\n    background: rgba(102, 126, 234, 0.8);\n}\n\n/* Compact mode'da scrollbar tamamen gizle */\nbody.compact .page {\n    overflow: hidden !important;\n}\n\nbody.compact {\n    overflow: hidden;\n}\n\n/* Genel sayfalarda scrollbar gizleme */\nbody:not(.allow-scroll) {\n    overflow: hidden;\n}\n\n/* Puanlama tablosu stilleri */\n.scoring-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 20px 0;\n    background: rgba(255, 255, 255, 0.95);\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.scoring-table th,\n.scoring-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n    color: #333;\n}\n\n.scoring-table th {\n    background: #667eea;\n    color: white;\n    font-weight: bold;\n    font-size: 14px;\n}\n\n.scoring-table .student-name {\n    text-align: left;\n    font-weight: bold;\n}\n\n.scoring-table .student-number {\n    font-weight: bold;\n    color: #667eea;\n}\n\n.score-buttons {\n    display: flex;\n    gap: 5px;\n    justify-content: center;\n}\n\n.score-btn {\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    border: 2px solid;\n    background: white;\n    cursor: pointer;\n    font-weight: bold;\n    font-size: 12px;\n    transition: all 0.3s ease;\n}\n\n.score-btn.g {\n    border-color: #28a745;\n    color: #28a745;\n}\n\n.score-btn.g.selected {\n    background: #28a745;\n    color: white;\n}\n\n.score-btn.iyi {\n    border-color: #ffc107;\n    color: #ffc107;\n}\n\n.score-btn.iyi.selected {\n    background: #ffc107;\n    color: white;\n}\n\n.score-btn.ci {\n    border-color: #dc3545;\n    color: #dc3545;\n}\n\n.score-btn.ci.selected {\n    background: #dc3545;\n    color: white;\n}\n\n.score-btn:hover {\n    transform: scale(1.1);\n}\n\n.total-score {\n    font-weight: bold;\n    font-size: 16px;\n    color: #333;\n}\n\n.criteria-with-deadline {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    background: rgba(255, 255, 255, 0.1);\n    padding: 15px;\n    border-radius: 8px;\n    margin-bottom: 15px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.criteria-checkbox-with-date {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 12px;\n    background: rgba(255, 255, 255, 0.9);\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.criteria-checkbox-with-date:hover {\n    background: rgba(102, 126, 234, 0.1);\n    border-color: #667eea;\n}\n\n.criteria-checkbox-with-date.selected {\n    background: rgba(102, 126, 234, 0.2);\n    border-color: #667eea;\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);\n}\n\n.date-input {\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    font-size: 14px;\n    margin-left: auto;\n}\n\n/* Responsive tasarım */\n@media (max-width: 768px) {\n    #app {\n        width: 95%;\n        padding: 10px;\n    }\n    \n    .page {\n        padding: 20px;\n        margin: 10px 0;\n    }\n    \n    .input-group {\n        flex-direction: column;\n        align-items: stretch;\n    }\n    \n    .text-input, .select-input {\n        min-width: auto;\n        margin-bottom: 10px;\n    }\n    \n    .grade-buttons {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .school-header, .action-buttons {\n        flex-direction: column;\n        gap: 10px;\n        align-items: flex-start;\n    }\n    \n    .student-item {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 10px;\n    }\n    \n    .criteria-selection {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Küçük ekranlar için */\n@media (max-width: 480px) {\n    .page-title {\n        font-size: 24px;\n    }\n    \n    .button {\n        font-size: 18px;\n        padding: 15px 20px;\n    }\n    \n    .tabs {\n        flex-direction: column;\n    }\n    \n    .tab {\n        padding: 12px;\n        text-align: center;\n    }\n}","size_bytes":17415},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/engine/SystemCookieManager.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova.engine;\n\nimport android.webkit.CookieManager;\nimport android.webkit.WebView;\n\nimport org.apache.cordova.ICordovaCookieManager;\n\nclass SystemCookieManager implements ICordovaCookieManager {\n\n    protected final WebView webView;\n    private final CookieManager cookieManager;\n\n    public SystemCookieManager(WebView webview) {\n        webView = webview;\n        cookieManager = CookieManager.getInstance();\n\n        cookieManager.setAcceptThirdPartyCookies(webView, true);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    public void setAcceptFileSchemeCookies() {\n        cookieManager.setAcceptFileSchemeCookies(true);\n    }\n\n    @Override\n    public void setCookiesEnabled(boolean accept) {\n        cookieManager.setAcceptCookie(accept);\n    }\n\n    @Override\n    public void setCookie(final String url, final String value) {\n        cookieManager.setCookie(url, value);\n    }\n\n    @Override\n    public String getCookie(final String url) {\n        return cookieManager.getCookie(url);\n    }\n\n    @Override\n    public void clearCookies() {\n        cookieManager.removeAllCookies(null);\n    }\n\n    @Override\n    public void flush() {\n        cookieManager.flush();\n    }\n};\n","size_bytes":2058},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/engine/SystemExposedJsApi.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova.engine;\n\nimport android.webkit.JavascriptInterface;\n\nimport org.apache.cordova.CordovaBridge;\nimport org.apache.cordova.ExposedJsApi;\nimport org.json.JSONException;\n\n/**\n * Contains APIs that the JS can call. All functions in here should also have\n * an equivalent entry in CordovaChromeClient.java, and be added to\n * cordova-js/lib/android/plugin/android/promptbasednativeapi.js\n */\nclass SystemExposedJsApi implements ExposedJsApi {\n    private final CordovaBridge bridge;\n\n    SystemExposedJsApi(CordovaBridge bridge) {\n        this.bridge = bridge;\n    }\n\n    @JavascriptInterface\n    @Override\n    public String exec(int bridgeSecret, String service, String action, String callbackId, String arguments) throws JSONException, IllegalAccessException {\n        return bridge.jsExec(bridgeSecret, service, action, callbackId, arguments);\n    }\n\n    @JavascriptInterface\n    @Override\n    public void setNativeToJsBridgeMode(int bridgeSecret, int value) throws IllegalAccessException {\n        bridge.jsSetNativeToJsBridgeMode(bridgeSecret, value);\n    }\n\n    @JavascriptInterface\n    @Override\n    public String retrieveJsMessages(int bridgeSecret, boolean fromOnlineEvent) throws IllegalAccessException {\n        return bridge.jsRetrieveJsMessages(bridgeSecret, fromOnlineEvent);\n    }\n}\n","size_bytes":2177},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/engine/SystemWebChromeClient.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova.engine;\n\nimport java.io.IOException;\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.List;\nimport android.app.Activity;\nimport android.content.ClipData;\nimport android.content.Context;\nimport android.content.ActivityNotFoundException;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.net.Uri;\nimport android.provider.MediaStore;\nimport android.view.Gravity;\nimport android.view.View;\nimport android.view.ViewGroup.LayoutParams;\nimport android.webkit.GeolocationPermissions.Callback;\nimport android.webkit.JsPromptResult;\nimport android.webkit.JsResult;\nimport android.webkit.ValueCallback;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebStorage;\nimport android.webkit.WebView;\nimport android.webkit.PermissionRequest;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.RelativeLayout;\nimport androidx.core.content.FileProvider;\n\nimport org.apache.cordova.CordovaDialogsHelper;\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.LOG;\n\n/**\n * This class is the WebChromeClient that implements callbacks for our web view.\n * The kind of callbacks that happen here are on the chrome outside the document,\n * such as onCreateWindow(), onConsoleMessage(), onProgressChanged(), etc. Related\n * to but different than CordovaWebViewClient.\n */\npublic class SystemWebChromeClient extends WebChromeClient {\n\n    private static final int FILECHOOSER_RESULTCODE = 5173;\n    private static final String LOG_TAG = \"SystemWebChromeClient\";\n    private long MAX_QUOTA = 100 * 1024 * 1024;\n    protected final SystemWebViewEngine parentEngine;\n\n    // the video progress view\n    private View mVideoProgressView;\n\n    private CordovaDialogsHelper dialogsHelper;\n    private Context appContext;\n\n    private WebChromeClient.CustomViewCallback mCustomViewCallback;\n    private View mCustomView;\n\n    public SystemWebChromeClient(SystemWebViewEngine parentEngine) {\n        this.parentEngine = parentEngine;\n        appContext = parentEngine.webView.getContext();\n        dialogsHelper = new CordovaDialogsHelper(appContext);\n    }\n\n    /**\n     * Tell the client to display a javascript alert dialog.\n     */\n    @Override\n    public boolean onJsAlert(WebView view, String url, String message, final JsResult result) {\n        dialogsHelper.showAlert(message, new CordovaDialogsHelper.Result() {\n            @Override public void gotResult(boolean success, String value) {\n                if (success) {\n                    result.confirm();\n                } else {\n                    result.cancel();\n                }\n            }\n        });\n        return true;\n    }\n\n    /**\n     * Tell the client to display a confirm dialog to the user.\n     */\n    @Override\n    public boolean onJsConfirm(WebView view, String url, String message, final JsResult result) {\n        dialogsHelper.showConfirm(message, new CordovaDialogsHelper.Result() {\n            @Override\n            public void gotResult(boolean success, String value) {\n                if (success) {\n                    result.confirm();\n                } else {\n                    result.cancel();\n                }\n            }\n        });\n        return true;\n    }\n\n    /**\n     * Tell the client to display a prompt dialog to the user.\n     * If the client returns true, WebView will assume that the client will\n     * handle the prompt dialog and call the appropriate JsPromptResult method.\n     *\n     * <p>Since we are hacking prompts for our own purposes, we should not be using them for\n     * this purpose, perhaps we should hack console.log to do this instead!</p>\n     */\n    @Override\n    public boolean onJsPrompt(WebView view, String origin, String message, String defaultValue, final JsPromptResult result) {\n        // Unlike the @JavascriptInterface bridge, this method is always called on the UI thread.\n        String handledRet = parentEngine.bridge.promptOnJsPrompt(origin, message, defaultValue);\n        if (handledRet != null) {\n            result.confirm(handledRet);\n        } else {\n            dialogsHelper.showPrompt(message, defaultValue, new CordovaDialogsHelper.Result() {\n                @Override\n                public void gotResult(boolean success, String value) {\n                    if (success) {\n                        result.confirm(value);\n                    } else {\n                        result.cancel();\n                    }\n                }\n            });\n        }\n        return true;\n    }\n\n    /**\n     * Handle database quota exceeded notification.\n     */\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public void onExceededDatabaseQuota(String url, String databaseIdentifier, long currentQuota, long estimatedSize,\n            long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater)\n    {\n        LOG.d(LOG_TAG, \"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d\", estimatedSize, currentQuota, totalUsedQuota);\n        quotaUpdater.updateQuota(MAX_QUOTA);\n    }\n\n    /**\n     * Instructs the client to show a prompt to ask the user to set the Geolocation permission state for the specified origin.\n     *\n     * <p>This also checks for the Geolocation Plugin and requests permission from the application  to use Geolocation.</p>\n     *\n     * @param origin\n     * @param callback\n     */\n    @Override\n    public void onGeolocationPermissionsShowPrompt(String origin, Callback callback) {\n        super.onGeolocationPermissionsShowPrompt(origin, callback);\n        callback.invoke(origin, true, false);\n        //Get the plugin, it should be loaded\n        CordovaPlugin geolocation = parentEngine.pluginManager.getPlugin(\"Geolocation\");\n        if(geolocation != null && !geolocation.hasPermisssion())\n        {\n            geolocation.requestPermissions(0);\n        }\n    }\n\n    // API level 7 is required for this, see if we could lower this using something else\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public void onShowCustomView(View view, WebChromeClient.CustomViewCallback callback) {\n        parentEngine.getCordovaWebView().showCustomView(view, callback);\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public void onHideCustomView() {\n        parentEngine.getCordovaWebView().hideCustomView();\n    }\n\n    /**\n     * Ask the host application for a custom progress view to show while\n     * a <video> is loading.\n     *\n     * @return View The progress view.\n     */\n    @Override\n    public View getVideoLoadingProgressView() {\n        if (mVideoProgressView == null) {\n            // Create a new Loading view programmatically.\n\n            // create the linear layout\n            LinearLayout layout = new LinearLayout(parentEngine.getView().getContext());\n            layout.setOrientation(LinearLayout.VERTICAL);\n            RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n            layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n            layout.setLayoutParams(layoutParams);\n            // the progress bar\n            ProgressBar bar = new ProgressBar(parentEngine.getView().getContext());\n            LinearLayout.LayoutParams barLayoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n            barLayoutParams.gravity = Gravity.CENTER;\n            bar.setLayoutParams(barLayoutParams);\n            layout.addView(bar);\n\n            mVideoProgressView = layout;\n        }\n        return mVideoProgressView;\n    }\n\n    @Override\n    public boolean onShowFileChooser(WebView webView, final ValueCallback<Uri[]> filePathsCallback,\n            final WebChromeClient.FileChooserParams fileChooserParams) {\n        Intent fileIntent = fileChooserParams.createIntent();\n\n        // Check if multiple-select is specified\n        Boolean selectMultiple = false;\n        if (fileChooserParams.getMode() == WebChromeClient.FileChooserParams.MODE_OPEN_MULTIPLE) {\n            selectMultiple = true;\n        }\n        fileIntent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, selectMultiple);\n\n        // Uses Intent.EXTRA_MIME_TYPES to pass multiple mime types.\n        String[] acceptTypes = fileChooserParams.getAcceptTypes();\n        if (acceptTypes.length > 1) {\n            fileIntent.setType(\"*/*\"); // Accept all, filter mime types by Intent.EXTRA_MIME_TYPES.\n            fileIntent.putExtra(Intent.EXTRA_MIME_TYPES, acceptTypes);\n        }\n\n        // Image from camera intent\n        Uri tempUri = null;\n        Intent captureIntent = null;\n        if (fileChooserParams.isCaptureEnabled()) {\n            captureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            Context context = parentEngine.getView().getContext();\n            if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY)\n                    && captureIntent.resolveActivity(context.getPackageManager()) != null) {\n                try {\n                    File tempFile = createTempFile(context);\n                    LOG.d(LOG_TAG, \"Temporary photo capture file: \" + tempFile);\n                    tempUri = createUriForFile(context, tempFile);\n                    LOG.d(LOG_TAG, \"Temporary photo capture URI: \" + tempUri);\n                    captureIntent.putExtra(MediaStore.EXTRA_OUTPUT, tempUri);\n                } catch (IOException e) {\n                    LOG.e(LOG_TAG, \"Unable to create temporary file for photo capture\", e);\n                    captureIntent = null;\n                }\n            } else {\n                LOG.w(LOG_TAG, \"Device does not support photo capture\");\n                captureIntent = null;\n            }\n        }\n        final Uri captureUri = tempUri;\n\n        // Chooser intent\n        Intent chooserIntent = Intent.createChooser(fileIntent, null);\n        if (captureIntent != null) {\n            chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[] { captureIntent });\n        }\n\n        try {\n            LOG.i(LOG_TAG, \"Starting intent for file chooser\");\n            parentEngine.cordova.startActivityForResult(new CordovaPlugin() {\n                @Override\n                public void onActivityResult(int requestCode, int resultCode, Intent intent) {\n                    // Handle result\n                    Uri[] result = null;\n                    if (resultCode == Activity.RESULT_OK) {\n                        List<Uri> uris = new ArrayList<Uri>();\n\n                        if (intent != null && intent.getData() != null) { // single file\n                            LOG.v(LOG_TAG, \"Adding file (single): \" + intent.getData());\n                            uris.add(intent.getData());\n                        } else if (captureUri != null) { // camera\n                            LOG.v(LOG_TAG, \"Adding camera capture: \" + captureUri);\n                            uris.add(captureUri);\n                        } else if (intent != null && intent.getClipData() != null) { // multiple files\n                            ClipData clipData = intent.getClipData();\n                            int count = clipData.getItemCount();\n                            for (int i = 0; i < count; i++) {\n                                Uri uri = clipData.getItemAt(i).getUri();\n                                LOG.v(LOG_TAG, \"Adding file (multiple): \" + uri);\n                                if (uri != null) {\n                                    uris.add(uri);\n                                }\n                            }\n                        }\n\n                        if (!uris.isEmpty()) {\n                            LOG.d(LOG_TAG, \"Receive file chooser URL: \" + uris.toString());\n                            result = uris.toArray(new Uri[uris.size()]);\n                        }\n                    }\n                    filePathsCallback.onReceiveValue(result);\n                }\n            }, chooserIntent, FILECHOOSER_RESULTCODE);\n        } catch (ActivityNotFoundException e) {\n            LOG.w(LOG_TAG, \"No activity found to handle file chooser intent.\", e);\n            filePathsCallback.onReceiveValue(null);\n        }\n        return true;\n    }\n\n    private File createTempFile(Context context) throws IOException {\n        // Create an image file name\n        File tempFile = File.createTempFile(\"temp\", \".jpg\", context.getCacheDir());\n        return tempFile;\n    }\n\n    private Uri createUriForFile(Context context, File tempFile) throws IOException {\n        String appId = context.getPackageName();\n        Uri uri = FileProvider.getUriForFile(context, appId + \".cdv.core.file.provider\", tempFile);\n        return uri;\n    }\n\n    @Override\n    public void onPermissionRequest(final PermissionRequest request) {\n        LOG.d(LOG_TAG, \"onPermissionRequest: \" + Arrays.toString(request.getResources()));\n        request.grant(request.getResources());\n    }\n\n    public void destroyLastDialog(){\n        dialogsHelper.destroyLastDialog();\n    }\n}\n","size_bytes":13902},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/engine/SystemWebView.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova.engine;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.view.KeyEvent;\nimport android.webkit.WebChromeClient;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\nimport org.apache.cordova.CordovaInterface;\nimport org.apache.cordova.CordovaWebView;\nimport org.apache.cordova.CordovaWebViewEngine;\n\n/**\n * Custom WebView subclass that enables us to capture events needed for Cordova.\n */\npublic class SystemWebView extends WebView implements CordovaWebViewEngine.EngineView {\n    private SystemWebViewClient viewClient;\n    SystemWebChromeClient chromeClient;\n    private SystemWebViewEngine parentEngine;\n    private CordovaInterface cordova;\n\n    public SystemWebView(Context context) {\n        this(context, null);\n    }\n\n    public SystemWebView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    // Package visibility to enforce that only SystemWebViewEngine should call this method.\n    void init(SystemWebViewEngine parentEngine, CordovaInterface cordova) {\n        this.cordova = cordova;\n        this.parentEngine = parentEngine;\n        if (this.viewClient == null) {\n            setWebViewClient(new SystemWebViewClient(parentEngine));\n        }\n\n        if (this.chromeClient == null) {\n            setWebChromeClient(new SystemWebChromeClient(parentEngine));\n        }\n    }\n\n    @Override\n    public CordovaWebView getCordovaWebView() {\n        return parentEngine != null ? parentEngine.getCordovaWebView() : null;\n    }\n\n    @Override\n    public void setWebViewClient(WebViewClient client) {\n        viewClient = (SystemWebViewClient)client;\n        super.setWebViewClient(client);\n    }\n\n    @Override\n    public void setWebChromeClient(WebChromeClient client) {\n        chromeClient = (SystemWebChromeClient)client;\n        super.setWebChromeClient(client);\n    }\n\n    @Override\n    public boolean dispatchKeyEvent(KeyEvent event) {\n        Boolean ret = parentEngine.client.onDispatchKeyEvent(event);\n        if (ret != null) {\n            return ret.booleanValue();\n        }\n        return super.dispatchKeyEvent(event);\n    }\n}\n","size_bytes":3016},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/engine/SystemWebViewClient.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova.engine;\n\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.PackageManager.NameNotFoundException;\nimport android.content.res.AssetManager;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.net.http.SslError;\nimport android.webkit.ClientCertRequest;\nimport android.webkit.HttpAuthHandler;\nimport android.webkit.MimeTypeMap;\nimport android.webkit.RenderProcessGoneDetail;\nimport android.webkit.ServiceWorkerClient;\nimport android.webkit.ServiceWorkerController;\nimport android.webkit.SslErrorHandler;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebResourceResponse;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\nimport org.apache.cordova.AuthenticationToken;\nimport org.apache.cordova.CordovaClientCertRequest;\nimport org.apache.cordova.CordovaHttpAuthHandler;\nimport org.apache.cordova.CordovaPluginPathHandler;\nimport org.apache.cordova.CordovaResourceApi;\nimport org.apache.cordova.LOG;\nimport org.apache.cordova.PluginManager;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Hashtable;\n\nimport androidx.webkit.WebViewAssetLoader;\n\n/**\n * This class is the WebViewClient that implements callbacks for our web view.\n * The kind of callbacks that happen here are regarding the rendering of the\n * document instead of the chrome surrounding it, such as onPageStarted(),\n * shouldOverrideUrlLoading(), etc. Related to but different than\n * CordovaChromeClient.\n */\npublic class SystemWebViewClient extends WebViewClient {\n\n    private static final String TAG = \"SystemWebViewClient\";\n    protected final SystemWebViewEngine parentEngine;\n    private final WebViewAssetLoader assetLoader;\n    private boolean doClearHistory = false;\n    boolean isCurrentlyLoading;\n\n    /** The authorization tokens. */\n    private Hashtable<String, AuthenticationToken> authenticationTokens = new Hashtable<String, AuthenticationToken>();\n\n    public SystemWebViewClient(SystemWebViewEngine parentEngine) {\n        this.parentEngine = parentEngine;\n\n        WebViewAssetLoader.Builder assetLoaderBuilder = new WebViewAssetLoader.Builder()\n                .setDomain(parentEngine.preferences.getString(\"hostname\", \"localhost\").toLowerCase())\n                .setHttpAllowed(true);\n\n        assetLoaderBuilder.addPathHandler(\"/\", path -> {\n            try {\n                // Check if there a plugins with pathHandlers\n                PluginManager pluginManager = this.parentEngine.pluginManager;\n                if (pluginManager != null) {\n                    for (CordovaPluginPathHandler handler : pluginManager.getPluginPathHandlers()) {\n                        if (handler.getPathHandler() != null) {\n                            WebResourceResponse response = handler.getPathHandler().handle(path);\n                            if (response != null) {\n                                return response;\n                            }\n                        };\n                    }\n                }\n\n                if (path.isEmpty()) {\n                    path = \"index.html\";\n                }\n                InputStream is = parentEngine.webView.getContext().getAssets().open(\"www/\" + path, AssetManager.ACCESS_STREAMING);\n                String mimeType = \"text/html\";\n                String extension = MimeTypeMap.getFileExtensionFromUrl(path);\n                if (extension != null) {\n                    if (path.endsWith(\".js\") || path.endsWith(\".mjs\")) {\n                        // Make sure JS files get the proper mimetype to support ES modules\n                        mimeType = \"application/javascript\";\n                    } else if (path.endsWith(\".wasm\")) {\n                        mimeType = \"application/wasm\";\n                    } else {\n                        mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n                    }\n                }\n\n                return new WebResourceResponse(mimeType, null, is);\n            } catch (Exception e) {\n                e.printStackTrace();\n                LOG.e(TAG, e.getMessage());\n            }\n            return null;\n        });\n\n        this.assetLoader = assetLoaderBuilder.build();\n        boolean setAsServiceWorkerClient = parentEngine.preferences.getBoolean(\"ResolveServiceWorkerRequests\", true);\n        ServiceWorkerController controller = null;\n\n        if (setAsServiceWorkerClient) {\n            controller = ServiceWorkerController.getInstance();\n            controller.setServiceWorkerClient(new ServiceWorkerClient(){\n                @Override\n                public WebResourceResponse shouldInterceptRequest(WebResourceRequest request) {\n                    return assetLoader.shouldInterceptRequest(request.getUrl());\n                }\n            });\n        }\n    }\n\n    /**\n     * Give the host application a chance to take over the control when a new url\n     * is about to be loaded in the current WebView.\n     *\n     * @param view          The WebView that is initiating the callback.\n     * @param url           The url to be loaded.\n     * @return              true to override, false for default behavior\n     */\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n        return parentEngine.client.onNavigationAttempt(url);\n    }\n\n    /**\n     * On received http auth request.\n     * The method reacts on all registered authentication tokens. There is one and only one authentication token for any host + realm combination\n     */\n    @Override\n    public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm) {\n\n        // Get the authentication token (if specified)\n        AuthenticationToken token = this.getAuthenticationToken(host, realm);\n        if (token != null) {\n            handler.proceed(token.getUserName(), token.getPassword());\n            return;\n        }\n\n        // Check if there is some plugin which can resolve this auth challenge\n        PluginManager pluginManager = this.parentEngine.pluginManager;\n        if (pluginManager != null && pluginManager.onReceivedHttpAuthRequest(null, new CordovaHttpAuthHandler(handler), host, realm)) {\n            parentEngine.client.clearLoadTimeoutTimer();\n            return;\n        }\n\n        // By default handle 401 like we'd normally do!\n        super.onReceivedHttpAuthRequest(view, handler, host, realm);\n    }\n\n    /**\n     * On received client cert request.\n     * The method forwards the request to any running plugins before using the default implementation.\n     *\n     * @param view\n     * @param request\n     */\n    @Override\n    public void onReceivedClientCertRequest (WebView view, ClientCertRequest request)\n    {\n\n        // Check if there is some plugin which can resolve this certificate request\n        PluginManager pluginManager = this.parentEngine.pluginManager;\n        if (pluginManager != null && pluginManager.onReceivedClientCertRequest(null, new CordovaClientCertRequest(request))) {\n            parentEngine.client.clearLoadTimeoutTimer();\n            return;\n        }\n\n        // By default pass to WebViewClient\n        super.onReceivedClientCertRequest(view, request);\n    }\n\n    /**\n     * Notify the host application that a page has started loading.\n     * This method is called once for each main frame load so a page with iframes or framesets will call onPageStarted\n     * one time for the main frame. This also means that onPageStarted will not be called when the contents of an\n     * embedded frame changes, i.e. clicking a link whose target is an iframe.\n     *\n     * @param view          The WebView initiating the callback.\n     * @param url           The url of the page.\n     */\n    @Override\n    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n        super.onPageStarted(view, url, favicon);\n        isCurrentlyLoading = true;\n        // Flush stale messages & reset plugins.\n        parentEngine.bridge.reset();\n        parentEngine.client.onPageStarted(url);\n    }\n\n    /**\n     * Notify the host application that a page has finished loading.\n     * This method is called only for main frame. When onPageFinished() is called, the rendering picture may not be updated yet.\n     *\n     *\n     * @param view          The WebView initiating the callback.\n     * @param url           The url of the page.\n     */\n    @Override\n    public void onPageFinished(WebView view, String url) {\n        super.onPageFinished(view, url);\n        // Ignore excessive calls, if url is not about:blank (CB-8317).\n        if (!isCurrentlyLoading && !url.startsWith(\"about:\")) {\n            return;\n        }\n        isCurrentlyLoading = false;\n\n        /*\n         * Because of a timing issue we need to clear this history in onPageFinished as well as\n         * onPageStarted. However we only want to do this if the doClearHistory boolean is set to\n         * true. You see when you load a url with a # in it which is common in jQuery applications\n         * onPageStared is not called. Clearing the history at that point would break jQuery apps.\n         */\n        if (this.doClearHistory) {\n            view.clearHistory();\n            this.doClearHistory = false;\n        }\n        parentEngine.client.onPageFinishedLoading(url);\n\n    }\n\n    /**\n     * Report an error to the host application. These errors are unrecoverable (i.e. the main resource is unavailable).\n     * The errorCode parameter corresponds to one of the ERROR_* constants.\n     *\n     * @param view          The WebView that is initiating the callback.\n     * @param errorCode     The error code corresponding to an ERROR_* value.\n     * @param description   A String describing the error.\n     * @param failingUrl    The url that failed to load.\n     */\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n        // Ignore error due to stopLoading().\n        if (!isCurrentlyLoading) {\n            return;\n        }\n        LOG.d(TAG, \"CordovaWebViewClient.onReceivedError: Error code=%s Description=%s URL=%s\", errorCode, description, failingUrl);\n\n        // If this is a \"Protocol Not Supported\" error, then revert to the previous\n        // page. If there was no previous page, then punt. The application's config\n        // is likely incorrect (start page set to sms: or something like that)\n        if (errorCode == WebViewClient.ERROR_UNSUPPORTED_SCHEME) {\n            parentEngine.client.clearLoadTimeoutTimer();\n\n            if (view.canGoBack()) {\n                view.goBack();\n                return;\n            } else {\n                super.onReceivedError(view, errorCode, description, failingUrl);\n            }\n        }\n        parentEngine.client.onReceivedError(errorCode, description, failingUrl);\n    }\n\n    /**\n     * Notify the host application that an SSL error occurred while loading a resource.\n     * The host application must call either handler.cancel() or handler.proceed().\n     * Note that the decision may be retained for use in response to future SSL errors.\n     * The default behavior is to cancel the load.\n     *\n     * @param view          The WebView that is initiating the callback.\n     * @param handler       An SslErrorHandler object that will handle the user's response.\n     * @param error         The SSL error object.\n     */\n    @Override\n    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n\n        final String packageName = parentEngine.cordova.getActivity().getPackageName();\n        final PackageManager pm = parentEngine.cordova.getActivity().getPackageManager();\n\n        ApplicationInfo appInfo;\n        try {\n            appInfo = pm.getApplicationInfo(packageName, PackageManager.GET_META_DATA);\n            if ((appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {\n                // debug = true\n                handler.proceed();\n                return;\n            } else {\n                // debug = false\n                super.onReceivedSslError(view, handler, error);\n            }\n        } catch (NameNotFoundException e) {\n            // When it doubt, lock it out!\n            super.onReceivedSslError(view, handler, error);\n        }\n    }\n\n\n    /**\n     * Sets the authentication token.\n     *\n     * @param authenticationToken\n     * @param host\n     * @param realm\n     */\n    public void setAuthenticationToken(AuthenticationToken authenticationToken, String host, String realm) {\n        if (host == null) {\n            host = \"\";\n        }\n        if (realm == null) {\n            realm = \"\";\n        }\n        this.authenticationTokens.put(host.concat(realm), authenticationToken);\n    }\n\n    /**\n     * Removes the authentication token.\n     *\n     * @param host\n     * @param realm\n     * @return the authentication token or null if did not exist\n     */\n    public AuthenticationToken removeAuthenticationToken(String host, String realm) {\n        return this.authenticationTokens.remove(host.concat(realm));\n    }\n\n    /**\n     * Gets the authentication token.\n     *\n     * <p>In order it tries:</p>\n     * <ol>\n     *  <li>host + realm</li>\n     *  <li>host</li>\n     *  <li>realm</li>\n     *  <li>no host, no realm</li>\n     * </ol>\n     *\n     * @param host\n     * @param realm\n     * @return the authentication token\n     */\n    public AuthenticationToken getAuthenticationToken(String host, String realm) {\n        AuthenticationToken token = null;\n        token = this.authenticationTokens.get(host.concat(realm));\n\n        if (token == null) {\n            // try with just the host\n            token = this.authenticationTokens.get(host);\n\n            // Try the realm\n            if (token == null) {\n                token = this.authenticationTokens.get(realm);\n            }\n\n            // if no host found, just query for default\n            if (token == null) {\n                token = this.authenticationTokens.get(\"\");\n            }\n        }\n\n        return token;\n    }\n\n    /**\n     * Clear all authentication tokens.\n     */\n    public void clearAuthenticationTokens() {\n        this.authenticationTokens.clear();\n    }\n\n    @Override\n    @SuppressWarnings(\"deprecation\")\n    public WebResourceResponse shouldInterceptRequest(WebView view, String url) {\n        try {\n            // Check the against the allow list and lock out access to the WebView directory\n            // Changing this will cause problems for your application\n            if (!parentEngine.pluginManager.shouldAllowRequest(url)) {\n                LOG.w(TAG, \"URL blocked by allow list: \" + url);\n                // Results in a 404.\n                return new WebResourceResponse(\"text/plain\", \"UTF-8\", null);\n            }\n\n            CordovaResourceApi resourceApi = parentEngine.resourceApi;\n            Uri origUri = Uri.parse(url);\n            // Allow plugins to intercept WebView requests.\n            Uri remappedUri = resourceApi.remapUri(origUri);\n\n            if (!origUri.equals(remappedUri) || needsSpecialsInAssetUrlFix(origUri) || needsContentUrlFix(origUri)) {\n                CordovaResourceApi.OpenForReadResult result = resourceApi.openForRead(remappedUri, true);\n                return new WebResourceResponse(result.mimeType, \"UTF-8\", result.inputStream);\n            }\n            // If we don't need to special-case the request, let the browser load it.\n            return null;\n        } catch (IOException e) {\n            if (!(e instanceof FileNotFoundException)) {\n                LOG.e(TAG, \"Error occurred while loading a file (returning a 404).\", e);\n            }\n            // Results in a 404.\n            return new WebResourceResponse(\"text/plain\", \"UTF-8\", null);\n        }\n    }\n\n    private static boolean needsContentUrlFix(Uri uri) {\n        return \"content\".equals(uri.getScheme());\n    }\n\n    private static boolean needsSpecialsInAssetUrlFix(Uri uri) {\n        if (CordovaResourceApi.getUriType(uri) != CordovaResourceApi.URI_TYPE_ASSET) {\n            return false;\n        }\n        if (uri.getQuery() != null || uri.getFragment() != null) {\n            return true;\n        }\n\n        if (!uri.toString().contains(\"%\")) {\n            return false;\n        }\n\n        return false;\n    }\n\n    @Override\n    public WebResourceResponse shouldInterceptRequest(WebView view, WebResourceRequest request) {\n        return this.assetLoader.shouldInterceptRequest(request.getUrl());\n    }\n\n    @Override\n    public boolean onRenderProcessGone(final WebView view, RenderProcessGoneDetail detail) {\n        // Check if there is some plugin which can handle this event\n        PluginManager pluginManager = this.parentEngine.pluginManager;\n        if (pluginManager != null && pluginManager.onRenderProcessGone(view, detail)) {\n            return true;\n        }\n\n        return super.onRenderProcessGone(view, detail);\n    }\n}\n","size_bytes":17889},"okul-app/platforms/android/CordovaLib/src/org/apache/cordova/engine/SystemWebViewEngine.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova.engine;\n\nimport android.annotation.SuppressLint;\nimport android.annotation.TargetApi;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.content.pm.ApplicationInfo;\nimport android.os.Build;\nimport android.view.View;\nimport android.webkit.ValueCallback;\nimport android.webkit.WebSettings;\nimport android.webkit.WebSettings.LayoutAlgorithm;\nimport android.webkit.WebView;\n\nimport org.apache.cordova.CordovaBridge;\nimport org.apache.cordova.CordovaInterface;\nimport org.apache.cordova.CordovaPreferences;\nimport org.apache.cordova.CordovaResourceApi;\nimport org.apache.cordova.CordovaWebView;\nimport org.apache.cordova.CordovaWebViewEngine;\nimport org.apache.cordova.ICordovaCookieManager;\nimport org.apache.cordova.LOG;\nimport org.apache.cordova.NativeToJsMessageQueue;\nimport org.apache.cordova.PluginManager;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\n\n/**\n * Glue class between CordovaWebView (main Cordova logic) and SystemWebView (the actual View).\n * We make the Engine separate from the actual View so that:\n *  A) We don't need to worry about WebView methods clashing with CordovaWebViewEngine methods\n *     (e.g.: goBack() is void for WebView, and boolean for CordovaWebViewEngine)\n *  B) Separating the actual View from the Engine makes API surfaces smaller.\n * Class uses two-phase initialization. However, CordovaWebView is responsible for calling .init().\n */\npublic class SystemWebViewEngine implements CordovaWebViewEngine {\n    public static final String TAG = \"SystemWebViewEngine\";\n\n    protected final SystemWebView webView;\n    protected final SystemCookieManager cookieManager;\n    protected CordovaPreferences preferences;\n    protected CordovaBridge bridge;\n    protected CordovaWebViewEngine.Client client;\n    protected CordovaWebView parentWebView;\n    protected CordovaInterface cordova;\n    protected PluginManager pluginManager;\n    protected CordovaResourceApi resourceApi;\n    protected NativeToJsMessageQueue nativeToJsMessageQueue;\n    private BroadcastReceiver receiver;\n\n    /** Used when created via reflection. */\n    public SystemWebViewEngine(Context context, CordovaPreferences preferences) {\n        this(new SystemWebView(context), preferences);\n    }\n\n    public SystemWebViewEngine(SystemWebView webView) {\n        this(webView, null);\n    }\n\n    public SystemWebViewEngine(SystemWebView webView, CordovaPreferences preferences) {\n        this.preferences = preferences;\n        this.webView = webView;\n        cookieManager = new SystemCookieManager(webView);\n    }\n\n    @Override\n    public void init(CordovaWebView parentWebView, CordovaInterface cordova, CordovaWebViewEngine.Client client,\n              CordovaResourceApi resourceApi, PluginManager pluginManager,\n              NativeToJsMessageQueue nativeToJsMessageQueue) {\n        if (this.cordova != null) {\n            throw new IllegalStateException();\n        }\n        // Needed when prefs are not passed by the constructor\n        if (preferences == null) {\n            preferences = parentWebView.getPreferences();\n        }\n        this.parentWebView = parentWebView;\n        this.cordova = cordova;\n        this.client = client;\n        this.resourceApi = resourceApi;\n        this.pluginManager = pluginManager;\n        this.nativeToJsMessageQueue = nativeToJsMessageQueue;\n        webView.init(this, cordova);\n\n        initWebViewSettings();\n\n        nativeToJsMessageQueue.addBridgeMode(new NativeToJsMessageQueue.OnlineEventsBridgeMode(new NativeToJsMessageQueue.OnlineEventsBridgeMode.OnlineEventsBridgeModeDelegate() {\n            @Override\n            public void setNetworkAvailable(boolean value) {\n                //sometimes this can be called after calling webView.destroy() on destroy()\n                //thus resulting in a NullPointerException\n                if(webView!=null) {\n                   webView.setNetworkAvailable(value);\n                }\n            }\n            @Override\n            public void runOnUiThread(Runnable r) {\n                SystemWebViewEngine.this.cordova.getActivity().runOnUiThread(r);\n            }\n        }));\n        nativeToJsMessageQueue.addBridgeMode(new NativeToJsMessageQueue.EvalBridgeMode(this, cordova));\n        bridge = new CordovaBridge(pluginManager, nativeToJsMessageQueue);\n        exposeJsInterface(webView, bridge);\n    }\n\n    @Override\n    public CordovaWebView getCordovaWebView() {\n        return parentWebView;\n    }\n\n    @Override\n    public ICordovaCookieManager getCookieManager() {\n        return cookieManager;\n    }\n\n    @Override\n    public View getView() {\n        return webView;\n    }\n\n    @SuppressLint({\"NewApi\", \"SetJavaScriptEnabled\"})\n    @SuppressWarnings(\"deprecation\")\n    private void initWebViewSettings() {\n        webView.setInitialScale(0);\n        webView.setVerticalScrollBarEnabled(false);\n        // Enable JavaScript\n        final WebSettings settings = webView.getSettings();\n        settings.setJavaScriptEnabled(true);\n        settings.setJavaScriptCanOpenWindowsAutomatically(true);\n        settings.setLayoutAlgorithm(LayoutAlgorithm.NORMAL);\n\n        String manufacturer = android.os.Build.MANUFACTURER;\n        LOG.d(TAG, \"CordovaWebView is running on device made by: \" + manufacturer);\n\n        // We don't save any form data in the application\n        // @todo remove when Cordova drop API level 26 support\n        settings.setSaveFormData(false);\n\n        if (preferences.getBoolean(\"AndroidInsecureFileModeEnabled\", false)) {\n            //These settings are deprecated and loading content via file:// URLs is generally discouraged,\n            //but we allow this for compatibility reasons\n            LOG.d(TAG, \"Enabled insecure file access\");\n            settings.setAllowFileAccess(true);\n            settings.setAllowUniversalAccessFromFileURLs(true);\n            cookieManager.setAcceptFileSchemeCookies();\n        }\n\n        settings.setMediaPlaybackRequiresUserGesture(false);\n\n        // Enable database\n        // We keep this disabled because we use or shim to get around DOM_EXCEPTION_ERROR_16\n        String databasePath = webView.getContext().getApplicationContext().getDir(\"database\", Context.MODE_PRIVATE).getPath();\n        settings.setDatabaseEnabled(true);\n\n        // The default is to use the module's debuggable state to decide if the WebView inspector\n        // should be enabled. However, users can configure InspectableWebView preference to forcefully enable\n        // or disable the WebView inspector.\n        String inspectableWebview = preferences.getString(\"InspectableWebview\", null);\n        boolean shouldEnableInspector = false;\n        if (inspectableWebview == null) {\n            ApplicationInfo appInfo = webView.getContext().getApplicationContext().getApplicationInfo();\n            shouldEnableInspector = (appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;\n        }\n        else if (\"true\".equals(inspectableWebview)) {\n            shouldEnableInspector = true;\n        }\n\n        if (shouldEnableInspector) {\n            enableRemoteDebugging();\n        }\n\n        // @todo remove when Cordova drop API level 24 support\n        settings.setGeolocationDatabasePath(databasePath);\n\n        // Enable DOM storage\n        settings.setDomStorageEnabled(true);\n\n        // Enable built-in geolocation\n        settings.setGeolocationEnabled(true);\n\n        // Fix for CB-1405\n        // Google issue 4641\n        String defaultUserAgent = settings.getUserAgentString();\n\n        // Fix for CB-3360\n        String overrideUserAgent = preferences.getString(\"OverrideUserAgent\", null);\n        if (overrideUserAgent != null) {\n            settings.setUserAgentString(overrideUserAgent);\n        } else {\n            String appendUserAgent = preferences.getString(\"AppendUserAgent\", null);\n            if (appendUserAgent != null) {\n                settings.setUserAgentString(defaultUserAgent + \" \" + appendUserAgent);\n            }\n        }\n        // End CB-3360\n\n        IntentFilter intentFilter = new IntentFilter();\n        intentFilter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);\n        if (this.receiver == null) {\n            this.receiver = new BroadcastReceiver() {\n                @Override\n                public void onReceive(Context context, Intent intent) {\n                    settings.getUserAgentString();\n                }\n            };\n            webView.getContext().registerReceiver(this.receiver, intentFilter);\n        }\n        // end CB-1405\n    }\n\n    private void enableRemoteDebugging() {\n        try {\n            WebView.setWebContentsDebuggingEnabled(true);\n        } catch (IllegalArgumentException e) {\n            LOG.d(TAG, \"You have one job! To turn on Remote Web Debugging! YOU HAVE FAILED! \");\n            e.printStackTrace();\n        }\n    }\n\n    // Yeah, we know. It'd be great if lint was just a little smarter.\n    @SuppressLint(\"AddJavascriptInterface\")\n    private static void exposeJsInterface(WebView webView, CordovaBridge bridge) {\n        SystemExposedJsApi exposedJsApi = new SystemExposedJsApi(bridge);\n        webView.addJavascriptInterface(exposedJsApi, \"_cordovaNative\");\n    }\n\n\n    /**\n     * Load the url into the WebView.\n     */\n    @Override\n    public void loadUrl(final String url, boolean clearNavigationStack) {\n        webView.loadUrl(url);\n    }\n\n    @Override\n    public String getUrl() {\n        return webView.getUrl();\n    }\n\n    @Override\n    public void stopLoading() {\n        webView.stopLoading();\n    }\n\n    @Override\n    public void clearCache() {\n        webView.clearCache(true);\n    }\n\n    @Override\n    public void clearHistory() {\n        webView.clearHistory();\n    }\n\n    @Override\n    public boolean canGoBack() {\n        return webView.canGoBack();\n    }\n\n    /**\n     * Go to previous page in history.  (We manage our own history)\n     *\n     * @return true if we went back, false if we are already at top\n     */\n    @Override\n    public boolean goBack() {\n        // Check WebView first to see if there is a history\n        // This is needed to support curPage#diffLink, since they are added to parentEngine's history, but not our history url array (JQMobile behavior)\n        if (webView.canGoBack()) {\n            webView.goBack();\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public void setPaused(boolean value) {\n        if (value) {\n            webView.onPause();\n            webView.pauseTimers();\n        } else {\n            webView.onResume();\n            webView.resumeTimers();\n        }\n    }\n\n    @Override\n    public void destroy() {\n        webView.chromeClient.destroyLastDialog();\n        webView.destroy();\n        // unregister the receiver\n        if (receiver != null) {\n            try {\n                webView.getContext().unregisterReceiver(receiver);\n            } catch (Exception e) {\n                LOG.e(TAG, \"Error unregistering configuration receiver: \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    @Override\n    public void evaluateJavascript(String js, ValueCallback<String> callback) {\n        webView.evaluateJavascript(js, callback);\n    }\n}\n","size_bytes":12132},"okul-app/platforms/android/app/src/main/java/com/okulapp/yonetim/MainActivity.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n */\n\npackage com.okulapp.yonetim;\n\nimport android.os.Bundle;\n\nimport org.apache.cordova.*;\n\npublic class MainActivity extends CordovaActivity\n{\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n\n        // enable Cordova apps to be started in the background\n        Bundle extras = getIntent().getExtras();\n        if (extras != null && extras.getBoolean(\"cdvStartInBackground\", false)) {\n            moveTaskToBack(true);\n        }\n\n        // Set by <content src=\"index.html\" /> in config.xml\n        loadUrl(launchUrl);\n    }\n}\n","size_bytes":1453},"okul-app/platforms/android/app/src/main/assets/www/plugins/cordova-plugin-network-information/www/Connection.js":{"content":"cordova.define(\"cordova-plugin-network-information.Connection\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * Network status\n */\nmodule.exports = {\n    UNKNOWN: 'unknown',\n    ETHERNET: 'ethernet',\n    WIFI: 'wifi',\n    CELL_2G: '2g',\n    CELL_3G: '3g',\n    CELL_4G: '4g',\n    CELL: 'cellular',\n    NONE: 'none'\n};\n\n});\n","size_bytes":1132},"okul-app/platforms/android/app/src/main/assets/www/plugins/cordova-plugin-network-information/www/network.js":{"content":"cordova.define(\"cordova-plugin-network-information.network\", function(require, exports, module) {\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\nvar cordova = require('cordova');\nvar channel = require('cordova/channel');\nvar utils = require('cordova/utils');\n\n// Link the onLine property with the Cordova-supplied network info.\n// This works because we clobber the navigator object with our own\n// object in bootstrap.js.\n// Browser platform do not need to define this property, because\n// it is already supported by modern browsers\nif (cordova.platformId !== 'browser' && typeof navigator !== 'undefined') {\n    utils.defineGetter(navigator, 'onLine', function () {\n        return this.connection.type !== 'none';\n    });\n}\n\nfunction NetworkConnection () {\n    this.type = 'unknown';\n}\n\n/**\n * Get connection info\n *\n * @param {Function} successCallback The function to call when the Connection data is available\n * @param {Function} errorCallback The function to call when there is an error getting the Connection data. (OPTIONAL)\n */\nNetworkConnection.prototype.getInfo = function (successCallback, errorCallback) {\n    exec(successCallback, errorCallback, 'NetworkStatus', 'getConnectionInfo', []);\n};\n\nvar me = new NetworkConnection();\nvar timerId = null;\nvar timeout = 500;\n\nchannel.createSticky('onCordovaConnectionReady');\nchannel.waitForInitialization('onCordovaConnectionReady');\n\nchannel.onCordovaReady.subscribe(function () {\n    me.getInfo(function (info) {\n        me.type = info;\n        if (info === 'none') {\n            // set a timer if still offline at the end of timer send the offline event\n            timerId = setTimeout(function () {\n                cordova.fireDocumentEvent('offline');\n                timerId = null;\n            }, timeout);\n        } else {\n            // If there is a current offline event pending clear it\n            if (timerId !== null) {\n                clearTimeout(timerId);\n                timerId = null;\n            }\n            cordova.fireDocumentEvent('online');\n        }\n\n        // should only fire this once\n        if (channel.onCordovaConnectionReady.state !== 2) {\n            channel.onCordovaConnectionReady.fire();\n        }\n    },\n    function (e) {\n        // If we can't get the network info we should still tell Cordova\n        // to fire the deviceready event.\n        if (channel.onCordovaConnectionReady.state !== 2) {\n            channel.onCordovaConnectionReady.fire();\n        }\n        console.log('Error initializing Network Connection: ' + e);\n    });\n});\n\nmodule.exports = me;\n\n});\n","size_bytes":3369},"okul-app/platforms/android/app/src/main/assets/www/plugins/cordova-plugin-splashscreen/www/splashscreen.js":{"content":"cordova.define(\"cordova-plugin-splashscreen.SplashScreen\", function(require, exports, module) {\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar exec = require('cordova/exec');\n\nvar splashscreen = {\n    show:function() {\n        exec(null, null, \"SplashScreen\", \"show\", []);\n    },\n    hide:function() {\n        exec(null, null, \"SplashScreen\", \"hide\", []);\n    }\n};\n\nmodule.exports = splashscreen;\n\n});\n","size_bytes":1173},"okul-app/platforms/android/app/src/main/java/org/apache/cordova/networkinformation/NetworkManager.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\npackage org.apache.cordova.networkinformation;\n\nimport org.apache.cordova.CallbackContext;\nimport org.apache.cordova.CordovaInterface;\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.LOG;\nimport org.apache.cordova.PluginResult;\nimport org.apache.cordova.CordovaWebView;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Build;\n\nimport java.util.Locale;\n\npublic class NetworkManager extends CordovaPlugin {\n\n    public static int NOT_REACHABLE = 0;\n    public static int REACHABLE_VIA_CARRIER_DATA_NETWORK = 1;\n    public static int REACHABLE_VIA_WIFI_NETWORK = 2;\n\n    public static final String WIFI = \"wifi\";\n    public static final String WIMAX = \"wimax\";\n    // mobile\n    public static final String MOBILE = \"mobile\";\n\n    // Android L calls this Cellular, because I have no idea!\n    public static final String CELLULAR = \"cellular\";\n    // 2G network types\n    public static final String TWO_G = \"2g\";\n    public static final String GSM = \"gsm\";\n    public static final String GPRS = \"gprs\";\n    public static final String EDGE = \"edge\";\n    // 3G network types\n    public static final String THREE_G = \"3g\";\n    public static final String CDMA = \"cdma\";\n    public static final String UMTS = \"umts\";\n    public static final String HSPA = \"hspa\";\n    public static final String HSUPA = \"hsupa\";\n    public static final String HSDPA = \"hsdpa\";\n    public static final String ONEXRTT = \"1xrtt\";\n    public static final String EHRPD = \"ehrpd\";\n    // 4G network types\n    public static final String FOUR_G = \"4g\";\n    public static final String LTE = \"lte\";\n    public static final String UMB = \"umb\";\n    public static final String HSPA_PLUS = \"hspa+\";\n    // return type\n    public static final String TYPE_UNKNOWN = \"unknown\";\n    public static final String TYPE_ETHERNET = \"ethernet\";\n    public static final String TYPE_ETHERNET_SHORT = \"eth\";\n    public static final String TYPE_WIFI = \"wifi\";\n    public static final String TYPE_2G = \"2g\";\n    public static final String TYPE_3G = \"3g\";\n    public static final String TYPE_4G = \"4g\";\n    public static final String TYPE_NONE = \"none\";\n\n    private static final String LOG_TAG = \"NetworkManager\";\n\n    private CallbackContext connectionCallbackContext;\n\n    ConnectivityManager sockMan;\n    BroadcastReceiver receiver;\n    private JSONObject lastInfo = null;\n\n    /**\n     * Sets the context of the Command. This can then be used to do things like\n     * get file paths associated with the Activity.\n     *\n     * @param cordova The context of the main Activity.\n     * @param webView The CordovaWebView Cordova is running in.\n     */\n    public void initialize(CordovaInterface cordova, CordovaWebView webView) {\n        super.initialize(cordova, webView);\n        this.sockMan = (ConnectivityManager) cordova.getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\n        this.connectionCallbackContext = null;\n\n        this.registerConnectivityActionReceiver();\n    }\n\n    /**\n     * Executes the request and returns PluginResult.\n     *\n     * @param action            The action to execute.\n     * @param args              JSONArry of arguments for the plugin.\n     * @param callbackContext   The callback id used when calling back into JavaScript.\n     * @return                  True if the action was valid, false otherwise.\n     */\n    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) {\n        if (action.equals(\"getConnectionInfo\")) {\n            this.connectionCallbackContext = callbackContext;\n            NetworkInfo info = sockMan.getActiveNetworkInfo();\n            String connectionType = \"\";\n            try {\n                connectionType = this.getConnectionInfo(info).get(\"type\").toString();\n            } catch (JSONException e) {\n                LOG.d(LOG_TAG, e.getLocalizedMessage());\n            }\n\n            PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, connectionType);\n            pluginResult.setKeepCallback(true);\n            callbackContext.sendPluginResult(pluginResult);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Stop network receiver.\n     */\n    public void onDestroy() {\n        this.unregisterReceiver();\n    }\n\n    @Override\n    public void onPause(boolean multitasking) {\n        this.unregisterReceiver();\n    }\n\n    @Override\n    public void onResume(boolean multitasking) {\n        super.onResume(multitasking);\n\n        this.unregisterReceiver();\n        this.registerConnectivityActionReceiver();\n    }\n\n    //--------------------------------------------------------------------------\n    // LOCAL METHODS\n    //--------------------------------------------------------------------------\n\n    private void registerConnectivityActionReceiver() {\n        // We need to listen to connectivity events to update navigator.connection\n        IntentFilter intentFilter = new IntentFilter();\n        intentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);\n        if (this.receiver == null) {\n            this.receiver = new BroadcastReceiver() {\n                @Override\n                public void onReceive(Context context, Intent intent) {\n                    // (The null check is for the ARM Emulator, please use Intel Emulator for better results)\n                    if (NetworkManager.this.webView != null) {\n                        updateConnectionInfo(sockMan.getActiveNetworkInfo());\n                    }\n\n                    String connectionType = null;\n                    if(NetworkManager.this.lastInfo == null) {\n                        connectionType = TYPE_NONE;\n                    } else {\n                        try {\n                            connectionType = NetworkManager.this.lastInfo.get(\"type\").toString();\n                        } catch (JSONException e) {\n                            LOG.d(LOG_TAG, e.getLocalizedMessage());\n                            connectionType = TYPE_NONE;\n                        }\n                    }\n\n                    // Lollipop always returns false for the EXTRA_NO_CONNECTIVITY flag => fix for Android M and above.\n                    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && TYPE_NONE.equals(connectionType)) {\n                        boolean noConnectivity = intent.getBooleanExtra(ConnectivityManager.EXTRA_NO_CONNECTIVITY, false);\n                        LOG.d(LOG_TAG, \"Intent no connectivity: \" + noConnectivity);\n                        if(noConnectivity) {\n                            LOG.d(LOG_TAG, \"Really no connectivity\");\n                        } else {\n                            LOG.d(LOG_TAG, \"!!! Switching to unknown, Intent states there is a connectivity.\");\n                            sendUpdate(TYPE_UNKNOWN);\n                        }\n                    }\n                }\n            };\n        }\n\n        webView.getContext().registerReceiver(this.receiver, intentFilter);\n    }\n\n    private void unregisterReceiver() {\n        if (this.receiver != null) {\n            try {\n                webView.getContext().unregisterReceiver(this.receiver);\n            } catch (Exception e) {\n                LOG.e(LOG_TAG, \"Error unregistering network receiver: \" + e.getMessage(), e);\n            } finally {\n                receiver = null;\n            }\n        }\n    }\n\n    /**\n     * Updates the JavaScript side whenever the connection changes\n     *\n     * @param info the current active network info\n     * @return\n     */\n    private void updateConnectionInfo(NetworkInfo info) {\n        // send update to javascript \"navigator.network.connection\"\n        // Jellybean sends its own info\n        JSONObject thisInfo = this.getConnectionInfo(info);\n        if(!thisInfo.equals(lastInfo))\n        {\n            String connectionType = \"\";\n            try {\n                connectionType = thisInfo.get(\"type\").toString();\n            } catch (JSONException e) {\n                LOG.d(LOG_TAG, e.getLocalizedMessage());\n            }\n\n            sendUpdate(connectionType);\n            lastInfo = thisInfo;\n        }\n    }\n\n    /**\n     * Get the latest network connection information\n     *\n     * @param info the current active network info\n     * @return a JSONObject that represents the network info\n     */\n    private JSONObject getConnectionInfo(NetworkInfo info) {\n        String type = TYPE_NONE;\n        String extraInfo = \"\";\n        if (info != null) {\n            // If we are not connected to any network set type to none\n            if (!info.isConnected()) {\n                type = TYPE_NONE;\n            }\n            else {\n                type = getType(info);\n            }\n            extraInfo = info.getExtraInfo();\n        }\n\n        LOG.d(LOG_TAG, \"Connection Type: \" + type);\n        LOG.d(LOG_TAG, \"Connection Extra Info: \" + extraInfo);\n\n        JSONObject connectionInfo = new JSONObject();\n\n        try {\n            connectionInfo.put(\"type\", type);\n            connectionInfo.put(\"extraInfo\", extraInfo);\n        } catch (JSONException e) {\n            LOG.d(LOG_TAG, e.getLocalizedMessage());\n        }\n\n        return connectionInfo;\n    }\n\n    /**\n     * Create a new plugin result and send it back to JavaScript\n     *\n     * @param connection the network info to set as navigator.connection\n     */\n    private void sendUpdate(String type) {\n        if (connectionCallbackContext != null) {\n            PluginResult result = new PluginResult(PluginResult.Status.OK, type);\n            result.setKeepCallback(true);\n            connectionCallbackContext.sendPluginResult(result);\n        }\n        webView.postMessage(\"networkconnection\", type);\n    }\n\n    /**\n     * Determine the type of connection\n     *\n     * @param info the network info so we can determine connection type.\n     * @return the type of mobile network we are on\n     */\n    private String getType(NetworkInfo info) {\n        if (info != null) {\n            String type = info.getTypeName().toLowerCase(Locale.US);\n\n            LOG.d(LOG_TAG, \"toLower : \" + type.toLowerCase());\n            LOG.d(LOG_TAG, \"wifi : \" + WIFI);\n            if (type.equals(WIFI)) {\n                return TYPE_WIFI;\n            }\n            else if (type.toLowerCase().equals(TYPE_ETHERNET) || type.toLowerCase().startsWith(TYPE_ETHERNET_SHORT)) {\n                return TYPE_ETHERNET;\n            }\n            else if (type.equals(MOBILE) || type.equals(CELLULAR)) {\n                type = info.getSubtypeName().toLowerCase(Locale.US);\n                if (type.equals(GSM) ||\n                    type.equals(GPRS) ||\n                    type.equals(EDGE) ||\n                    type.equals(TWO_G)) {\n                    return TYPE_2G;\n                }\n                else if (type.startsWith(CDMA) ||\n                    type.equals(UMTS) ||\n                    type.equals(ONEXRTT) ||\n                    type.equals(EHRPD) ||\n                    type.equals(HSUPA) ||\n                    type.equals(HSDPA) ||\n                    type.equals(HSPA) ||\n                    type.equals(THREE_G)) {\n                    return TYPE_3G;\n                }\n                else if (type.equals(LTE) ||\n                    type.equals(UMB) ||\n                    type.equals(HSPA_PLUS) ||\n                    type.equals(FOUR_G)) {\n                    return TYPE_4G;\n                }\n            }\n        }\n        else {\n            return TYPE_NONE;\n        }\n        return TYPE_UNKNOWN;\n    }\n}\n","size_bytes":12560},"okul-app/platforms/android/app/src/main/java/org/apache/cordova/splashscreen/SplashScreen.java":{"content":"/*\n       Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.\n*/\n\npackage org.apache.cordova.splashscreen;\n\nimport android.app.Dialog;\nimport android.app.ProgressDialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.res.Configuration;\nimport android.content.res.ColorStateList;\nimport android.graphics.Color;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Handler;\nimport android.view.Display;\nimport android.view.Gravity;\nimport android.view.View;\nimport android.view.ViewGroup.LayoutParams;\nimport android.view.WindowManager;\nimport android.view.animation.Animation;\nimport android.view.animation.AlphaAnimation;\nimport android.view.animation.DecelerateInterpolator;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.ProgressBar;\nimport android.widget.RelativeLayout;\n\nimport org.apache.cordova.CallbackContext;\nimport org.apache.cordova.CordovaPlugin;\nimport org.apache.cordova.CordovaWebView;\nimport org.json.JSONArray;\nimport org.json.JSONException;\n\npublic class SplashScreen extends CordovaPlugin {\n    private static final String LOG_TAG = \"SplashScreen\";\n    // Cordova 3.x.x has a copy of this plugin bundled with it (SplashScreenInternal.java).\n    // Enable functionality only if running on 4.x.x.\n    private static final boolean HAS_BUILT_IN_SPLASH_SCREEN = Integer.valueOf(CordovaWebView.CORDOVA_VERSION.split(\"\\\\.\")[0]) < 4;\n    private static final int DEFAULT_SPLASHSCREEN_DURATION = 3000;\n    private static final int DEFAULT_FADE_DURATION = 500;\n    private static Dialog splashDialog;\n    private static ProgressDialog spinnerDialog;\n    private static boolean firstShow = true;\n    private static boolean lastHideAfterDelay; // https://issues.apache.org/jira/browse/CB-9094\n\n    /**\n     * Displays the splash drawable.\n     */\n    private ImageView splashImageView;\n\n    /**\n     * Remember last device orientation to detect orientation changes.\n     */\n    private int orientation;\n\n    // Helper to be compile-time compatible with both Cordova 3.x and 4.x.\n    private View getView() {\n        try {\n            return (View)webView.getClass().getMethod(\"getView\").invoke(webView);\n        } catch (Exception e) {\n            return (View)webView;\n        }\n    }\n\n    private int getSplashId() {\n        int drawableId = 0;\n        String splashResource = preferences.getString(\"SplashScreen\", \"screen\");\n        if (splashResource != null) {\n            drawableId = cordova.getActivity().getResources().getIdentifier(splashResource, \"drawable\", cordova.getActivity().getClass().getPackage().getName());\n            if (drawableId == 0) {\n                drawableId = cordova.getActivity().getResources().getIdentifier(splashResource, \"drawable\", cordova.getActivity().getPackageName());\n            }\n        }\n        return drawableId;\n    }\n\n    @Override\n    protected void pluginInitialize() {\n        if (HAS_BUILT_IN_SPLASH_SCREEN) {\n            return;\n        }\n        // Make WebView invisible while loading URL\n        // CB-11326 Ensure we're calling this on UI thread\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                getView().setVisibility(View.INVISIBLE);\n            }\n        });\n        int drawableId = getSplashId();\n\n        // Save initial orientation.\n        orientation = cordova.getActivity().getResources().getConfiguration().orientation;\n\n        if (firstShow) {\n            boolean autoHide = preferences.getBoolean(\"AutoHideSplashScreen\", true);\n            showSplashScreen(autoHide);\n        }\n\n        if (preferences.getBoolean(\"SplashShowOnlyFirstTime\", true)) {\n            firstShow = false;\n        }\n    }\n\n    /**\n     * Shorter way to check value of \"SplashMaintainAspectRatio\" preference.\n     */\n    private boolean isMaintainAspectRatio () {\n        return preferences.getBoolean(\"SplashMaintainAspectRatio\", false);\n    }\n\n    private int getFadeDuration () {\n        int fadeSplashScreenDuration = preferences.getBoolean(\"FadeSplashScreen\", true) ?\n            preferences.getInteger(\"FadeSplashScreenDuration\", DEFAULT_FADE_DURATION) : 0;\n\n        if (fadeSplashScreenDuration < 30) {\n            // [CB-9750] This value used to be in decimal seconds, so we will assume that if someone specifies 10\n            // they mean 10 seconds, and not the meaningless 10ms\n            fadeSplashScreenDuration *= 1000;\n        }\n\n        return fadeSplashScreenDuration;\n    }\n\n    @Override\n    public void onPause(boolean multitasking) {\n        if (HAS_BUILT_IN_SPLASH_SCREEN) {\n            return;\n        }\n        // hide the splash screen to avoid leaking a window\n        this.removeSplashScreen(true);\n    }\n\n    @Override\n    public void onDestroy() {\n        if (HAS_BUILT_IN_SPLASH_SCREEN) {\n            return;\n        }\n        // hide the splash screen to avoid leaking a window\n        this.removeSplashScreen(true);\n        // If we set this to true onDestroy, we lose track when we go from page to page!\n        //firstShow = true;\n    }\n\n    @Override\n    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {\n        if (action.equals(\"hide\")) {\n            cordova.getActivity().runOnUiThread(new Runnable() {\n                public void run() {\n                    webView.postMessage(\"splashscreen\", \"hide\");\n                }\n            });\n        } else if (action.equals(\"show\")) {\n            cordova.getActivity().runOnUiThread(new Runnable() {\n                public void run() {\n                    webView.postMessage(\"splashscreen\", \"show\");\n                }\n            });\n        } else {\n            return false;\n        }\n\n        callbackContext.success();\n        return true;\n    }\n\n    @Override\n    public Object onMessage(String id, Object data) {\n        if (HAS_BUILT_IN_SPLASH_SCREEN) {\n            return null;\n        }\n        if (\"splashscreen\".equals(id)) {\n            if (\"hide\".equals(data.toString())) {\n                this.removeSplashScreen(false);\n            } else {\n                this.showSplashScreen(false);\n            }\n        } else if (\"spinner\".equals(id)) {\n            if (\"stop\".equals(data.toString())) {\n                getView().setVisibility(View.VISIBLE);\n            }\n        } else if (\"onReceivedError\".equals(id)) {\n            this.spinnerStop();\n        }\n        return null;\n    }\n\n    // Don't add @Override so that plugin still compiles on 3.x.x for a while\n    public void onConfigurationChanged(Configuration newConfig) {\n        if (newConfig.orientation != orientation) {\n            orientation = newConfig.orientation;\n\n            // Splash drawable may change with orientation, so reload it.\n            if (splashImageView != null) {\n                int drawableId = getSplashId();\n                if (drawableId != 0) {\n                    splashImageView.setImageDrawable(cordova.getActivity().getResources().getDrawable(drawableId));\n                }\n            }\n        }\n    }\n\n    private void removeSplashScreen(final boolean forceHideImmediately) {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            public void run() {\n        if (splashDialog != null && splashImageView != null && splashDialog.isShowing()) {//check for non-null splashImageView, see https://issues.apache.org/jira/browse/CB-12277\n                    final int fadeSplashScreenDuration = getFadeDuration();\n                    // CB-10692 If the plugin is being paused/destroyed, skip the fading and hide it immediately\n                    if (fadeSplashScreenDuration > 0 && forceHideImmediately == false) {\n                        AlphaAnimation fadeOut = new AlphaAnimation(1, 0);\n                        fadeOut.setInterpolator(new DecelerateInterpolator());\n                        fadeOut.setDuration(fadeSplashScreenDuration);\n\n                        splashImageView.setAnimation(fadeOut);\n                        splashImageView.startAnimation(fadeOut);\n\n                        fadeOut.setAnimationListener(new Animation.AnimationListener() {\n                            @Override\n                            public void onAnimationStart(Animation animation) {\n                                spinnerStop();\n                            }\n\n                            @Override\n                            public void onAnimationEnd(Animation animation) {\n                                if (splashDialog != null && splashImageView != null && splashDialog.isShowing()) {//check for non-null splashImageView, see https://issues.apache.org/jira/browse/CB-12277\n                                    splashDialog.dismiss();\n                                    splashDialog = null;\n                                    splashImageView = null;\n                                }\n                            }\n\n                            @Override\n                            public void onAnimationRepeat(Animation animation) {\n                            }\n                        });\n                    } else {\n                        spinnerStop();\n                        splashDialog.dismiss();\n                        splashDialog = null;\n                        splashImageView = null;\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Shows the splash screen over the full Activity\n     */\n    @SuppressWarnings(\"deprecation\")\n    private void showSplashScreen(final boolean hideAfterDelay) {\n        final int splashscreenTime = preferences.getInteger(\"SplashScreenDelay\", DEFAULT_SPLASHSCREEN_DURATION);\n        final int drawableId = getSplashId();\n\n        final int fadeSplashScreenDuration = getFadeDuration();\n        final int effectiveSplashDuration = Math.max(0, splashscreenTime - fadeSplashScreenDuration);\n\n        lastHideAfterDelay = hideAfterDelay;\n\n        // Prevent to show the splash dialog if the activity is in the process of finishing\n        if (cordova.getActivity().isFinishing()) {\n            return;\n        }\n        // If the splash dialog is showing don't try to show it again\n        if (splashDialog != null && splashDialog.isShowing()) {\n            return;\n        }\n        if (drawableId == 0 || (splashscreenTime <= 0 && hideAfterDelay)) {\n            return;\n        }\n\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            public void run() {\n                // Get reference to display\n                Display display = cordova.getActivity().getWindowManager().getDefaultDisplay();\n                Context context = webView.getContext();\n\n                // Use an ImageView to render the image because of its flexible scaling options.\n                splashImageView = new ImageView(context);\n                splashImageView.setImageResource(drawableId);\n                LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);\n                splashImageView.setLayoutParams(layoutParams);\n\n                splashImageView.setMinimumHeight(display.getHeight());\n                splashImageView.setMinimumWidth(display.getWidth());\n\n                // TODO: Use the background color of the webView's parent instead of using the preference.\n                splashImageView.setBackgroundColor(preferences.getInteger(\"backgroundColor\", Color.BLACK));\n\n                if (isMaintainAspectRatio()) {\n                    // CENTER_CROP scale mode is equivalent to CSS \"background-size:cover\"\n                    splashImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\n                }\n                else {\n                    // FIT_XY scales image non-uniformly to fit into image view.\n                    splashImageView.setScaleType(ImageView.ScaleType.FIT_XY);\n                }\n\n                // Create and show the dialog\n                splashDialog = new Dialog(context, android.R.style.Theme_Translucent_NoTitleBar);\n                // check to see if the splash screen should be full screen\n                if ((cordova.getActivity().getWindow().getAttributes().flags & WindowManager.LayoutParams.FLAG_FULLSCREEN)\n                        == WindowManager.LayoutParams.FLAG_FULLSCREEN) {\n                    splashDialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n                            WindowManager.LayoutParams.FLAG_FULLSCREEN);\n                }\n                splashDialog.setContentView(splashImageView);\n                splashDialog.setCancelable(false);\n                splashDialog.show();\n\n                if (preferences.getBoolean(\"ShowSplashScreenSpinner\", true)) {\n                    spinnerStart();\n                }\n\n                // Set Runnable to remove splash screen just in case\n                if (hideAfterDelay) {\n                    final Handler handler = new Handler();\n                    handler.postDelayed(new Runnable() {\n                        public void run() {\n                            if (lastHideAfterDelay) {\n                                removeSplashScreen(false);\n                            }\n                        }\n                    }, effectiveSplashDuration);\n                }\n            }\n        });\n    }\n\n    // Show only spinner in the center of the screen\n    private void spinnerStart() {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            public void run() {\n                spinnerStop();\n\n                spinnerDialog = new ProgressDialog(webView.getContext());\n                spinnerDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\n                    public void onCancel(DialogInterface dialog) {\n                        spinnerDialog = null;\n                    }\n                });\n\n                spinnerDialog.setCancelable(false);\n                spinnerDialog.setIndeterminate(true);\n\n                RelativeLayout centeredLayout = new RelativeLayout(cordova.getActivity());\n                centeredLayout.setGravity(Gravity.CENTER);\n                centeredLayout.setLayoutParams(new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));\n\n                ProgressBar progressBar = new ProgressBar(webView.getContext());\n                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);\n                layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);\n                progressBar.setLayoutParams(layoutParams);\n\n                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {\n                    String colorName = preferences.getString(\"SplashScreenSpinnerColor\", null);\n                    if(colorName != null){\n                        int[][] states = new int[][] {\n                            new int[] { android.R.attr.state_enabled}, // enabled\n                            new int[] {-android.R.attr.state_enabled}, // disabled\n                            new int[] {-android.R.attr.state_checked}, // unchecked\n                            new int[] { android.R.attr.state_pressed}  // pressed\n                        };\n                        int progressBarColor = Color.parseColor(colorName);\n                        int[] colors = new int[] {\n                            progressBarColor,\n                            progressBarColor,\n                            progressBarColor,\n                            progressBarColor\n                        };\n                        ColorStateList colorStateList = new ColorStateList(states, colors);\n                        progressBar.setIndeterminateTintList(colorStateList);\n                    }\n                }\n\n                centeredLayout.addView(progressBar);\n\n                spinnerDialog.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);\n                spinnerDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n\n                spinnerDialog.show();\n                spinnerDialog.setContentView(centeredLayout);\n            }\n        });\n    }\n\n    private void spinnerStop() {\n        cordova.getActivity().runOnUiThread(new Runnable() {\n            public void run() {\n                if (spinnerDialog != null && spinnerDialog.isShowing()) {\n                    spinnerDialog.dismiss();\n                    spinnerDialog = null;\n                }\n            }\n        });\n    }\n}\n","size_bytes":17328}},"version":1}